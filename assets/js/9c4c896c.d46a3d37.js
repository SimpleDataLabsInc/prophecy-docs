"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[23852],{15680:(e,a,t)=>{t.d(a,{xA:()=>c,yg:()=>g});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=r.createContext({}),p=function(e){var a=r.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=p(e.components);return r.createElement(i.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(t),d=n,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||l;return t?r.createElement(g,o(o({ref:a},c),{},{components:t})):r.createElement(g,o({ref:a},c))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=d;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[m]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},19365:(e,a,t)=>{t.d(a,{A:()=>o});var r=t(96540),n=t(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.A)(l.tabItem,o),hidden:t},a)}},11470:(e,a,t)=>{t.d(a,{A:()=>v});var r=t(58168),n=t(96540),l=t(20053),o=t(23104),s=t(56347),i=t(57485),p=t(31682),c=t(89466);function m(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function u(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??m(t);return function(e){const a=(0,p.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function d(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function g(e){let{queryString:a=!1,groupId:t}=e;const r=(0,s.W6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i.aZ)(l),(0,n.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(r.location.search);a.set(l,e),r.replace({...r.location,search:a.toString()})}),[l,r])]}function y(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,l=u(e),[o,s]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:l}))),[i,p]=g({queryString:t,groupId:r}),[m,y]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,l]=(0,c.Dv)(t);return[r,(0,n.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),f=(()=>{const e=i??m;return d({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var f=t(92303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:a,block:t,selectedValue:s,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.a_)(),u=e=>{const a=e.currentTarget,t=c.indexOf(a),r=p[t].value;r!==s&&(m(a),i(r))},d=e=>{let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":t},a)},p.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>c.push(e),onKeyDown:d,onClick:u},o,{className:(0,l.A)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":s===a})}),t??a)})))}function k(e){let{lazy:a,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function N(e){const a=y(e);return n.createElement("div",{className:(0,l.A)("tabs-container",h.tabList)},n.createElement(b,(0,r.A)({},e,a)),n.createElement(k,(0,r.A)({},e,a)))}function v(e){const a=(0,f.A)();return n.createElement(N,(0,r.A)({key:String(a)},e))}},50728:(e,a,t)=>{t.d(a,{A:()=>n});var r=t(96540);function n(e){return r.createElement("div",null,e.python_package_name&&e.python_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.python_package_name),r.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.scala_package_name),r.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsPython"),r.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsScala"),r.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Single Cluster"),r.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Shared"),r.createElement("span",{className:"right"},e.uc_shared))),e.livy&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Livy"),r.createElement("span",{className:"right"},e.livy))),r.createElement("br",null),r.createElement("br",null))}},69857:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(58168),n=(t(96540),t(15680)),l=t(50728),o=t(11470),s=t(19365);const i={title:"Kafka",id:"kafka",description:"Parameters and properties to read from and write to Kafka files",tags:["gems","file","kafka"]},p=void 0,c={unversionedId:"Spark/gems/source-target/file/kafka",id:"Spark/gems/source-target/file/kafka",title:"Kafka",description:"Parameters and properties to read from and write to Kafka files",source:"@site/docs/Spark/gems/source-target/file/kafka-stream.md",sourceDirName:"Spark/gems/source-target/file",slug:"/Spark/gems/source-target/file/kafka",permalink:"/Spark/gems/source-target/file/kafka",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"kafka",permalink:"/tags/kafka"}],version:"current",frontMatter:{title:"Kafka",id:"kafka",description:"Parameters and properties to read from and write to Kafka files",tags:["gems","file","kafka"]},sidebar:"mySidebar",previous:{title:"JSON",permalink:"/Spark/gems/source-target/file/json"},next:{title:"ORC",permalink:"/Spark/gems/source-target/file/orc"}},m={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target properties",id:"target-properties",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3},{value:"Example Pipeline",id:"example-pipeline",level:2},{value:"Source Pipeline Example",id:"source-pipeline-example",level:3},{value:"Metadata Table",id:"metadata-table",level:4},{value:"Spark Code used for script component",id:"spark-code-used-for-script-component",level:4}],d={toc:u},g="wrapper";function y(e){let{components:a,...i}=e;return(0,n.yg)(g,(0,r.A)({},d,i,{components:a,mdxType:"MDXLayout"}),(0,n.yg)(l.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"1.9.24",uc_single:"Not Supported",uc_shared:"14.3+",livy:"Not Supported",mdxType:"Requirements"}),(0,n.yg)("p",null,"The Kafka file type is used in ",(0,n.yg)("a",{parentName:"p",href:"https://kafka.apache.org/"},"Apache Kafka"),", which:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Is an open-source distributed event streaming platform."),(0,n.yg)("li",{parentName:"ul"},"Handles high volumes of data and delivers messages with low latency."),(0,n.yg)("li",{parentName:"ul"},"Supports real-time analytics, stream processing, fault tolerance, scalability, data integration, and event-driven architectures.")),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Tab"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Bootstrap Server/Broker List"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Comma separated list of Kafka brokers.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Security Protocol"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Security protocol for Kafka. (Default value is ",(0,n.yg)("inlineCode",{parentName:"td"},"SASL_SSL"),".)")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"SASL Mechanisms"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Default SASL Mechanism for ",(0,n.yg)("inlineCode",{parentName:"td"},"SASL_SSL"),". (Default value is ",(0,n.yg)("inlineCode",{parentName:"td"},"SCRAM-SHA-256"),".)")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Credentials"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"How to provide your credentials. ",(0,n.yg)("br",null),"You can select: ",(0,n.yg)("inlineCode",{parentName:"td"},"Databricks Secrets"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"Username & Password"),", or ",(0,n.yg)("inlineCode",{parentName:"td"},"Environment variables"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Kafka topic"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Comma separated list of Kafka topics.")))),(0,n.yg)("h2",{id:"source"},"Source"),(0,n.yg)("p",null,"The Source gem reads data from Kafka stream in batch mode and allows you to optionally specify the following additional properties. This means that Kafka only reads data incrementally from the last offset stored in the specified Metadata table. If the Metadata table is not present, then Kafka reads data from the ",(0,n.yg)("inlineCode",{parentName:"p"},"earliest")," offset."),(0,n.yg)("h3",{id:"source-properties"},"Source properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Group Id"),(0,n.yg)("td",{parentName:"tr",align:null},"Kafka consumer group ID."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Session Timeout"),(0,n.yg)("td",{parentName:"tr",align:null},"Session timeout for Kafka."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"6000"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Store offsets read per partition in Delta table"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to store offsets read per partition in Delta table."),(0,n.yg)("td",{parentName:"tr",align:null},"false")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Metadata Table"),(0,n.yg)("td",{parentName:"tr",align:null},"Delta table to store offsets for each topic and partition."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Kerberos service name for Kafka SASL"),(0,n.yg)("td",{parentName:"tr",align:null},"Name of your Kerberos service to use in Kafka."),(0,n.yg)("td",{parentName:"tr",align:null},"None")))),(0,n.yg)("h3",{id:"source-example"},"Example"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Filter",src:t(38999).A,width:"3024",height:"1590"})),(0,n.yg)("h3",{id:"source-code"},"Generated Code"),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(s.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def KafkaSource(spark: SparkSession) -> DataFrame:\n    from delta.tables import DeltaTable\n    import json\n    from pyspark.dbutils import DBUtils\n\n    if spark.catalog._jcatalog.tableExists(f"metadata.kafka_offsets"):\n        offset_dict = {}\n\n        for row in DeltaTable.forName(spark, f"metadata.kafka_offsets").toDF().collect():\n            if row["topic"] in offset_dict.keys():\n                offset_dict[row["topic"]].update({row["partition"] : row["max_offset"] + 1})\n            else:\n                offset_dict[row["topic"]] = {row["partition"] : row["max_offset"] + 1}\n\n        return (spark.read\\\n            .format("kafka")\\\n            .options(\n              **{\n                "kafka.sasl.jaas.config": (\n                  f"kafkashaded.org.apache.kafka.common.security.scram.ScramLoginModule"\n                  + f\' required username="{DBUtils(spark).secrets.get(scope = "test", key = "username")}" password="{DBUtils(spark).secrets.get(scope = "test", key = "password")}";\'\n                ),\n                "kafka.sasl.mechanism": "SCRAM-SHA-256",\n                "kafka.security.protocol": "SASL_SSL",\n                "kafka.bootstrap.servers": "broker1.aws.com:9094,broker2.aws.com:9094",\n                "kafka.session.timeout.ms": "6000",\n                "group.id": "group_id_1",\n                "subscribe": "my_first_topic,my_second_topic",\n                "startingOffsets": json.dumps(offset_dict),\n              }\n            )\\\n            .load()\\\n            .withColumn("value", col("value").cast("string"))\\\n            .withColumn("key", col("key").cast("string")))\n    else:\n        return (spark.read\\\n            .format("kafka")\\\n            .options(\n              **{\n                "kafka.sasl.jaas.config": (\n                  f"kafkashaded.org.apache.kafka.common.security.scram.ScramLoginModule"\n                  + f\' required username="{DBUtils(spark).secrets.get(scope = "test", key = "username")}" password="{DBUtils(spark).secrets.get(scope = "test", key = "password")}";\'\n                ),\n                "kafka.sasl.mechanism": "SCRAM-SHA-256",\n                "kafka.security.protocol": "SASL_SSL",\n                "kafka.bootstrap.servers": "broker1.aws.com:9094,broker2.aws.com:9094",\n                "kafka.session.timeout.ms": "6000",\n                "group.id": "group_id_1",\n                "subscribe": "my_first_topic,my_second_topic"\n              }\n            )\\\n            .load()\\\n            .withColumn("value", col("value").cast("string"))\\\n            .withColumn("key", col("key").cast("string")))\n')))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"target"},"Target"),(0,n.yg)(l.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"Not Supported",uc_shared:"14.3+",livy:"Not Supported",mdxType:"Requirements"}),(0,n.yg)("p",null,"The Target gem writes data to each row from the ",(0,n.yg)("inlineCode",{parentName:"p"},"Dataframe")," to a Kafka topic as JSON messages and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"target-properties"},"Target properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Message Unique Key"),(0,n.yg)("td",{parentName:"tr",align:null},"Key to help determine which partition to write the data to."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Kerberos service name for Kafka SASL"),(0,n.yg)("td",{parentName:"tr",align:null},"Name of your Kerberos service to use in Kafka."),(0,n.yg)("td",{parentName:"tr",align:null},"None")))),(0,n.yg)("h3",{id:"target-example"},"Example"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Filter",src:t(24123).A,width:"3042",height:"1452"})),(0,n.yg)("h3",{id:"target-code"},"Generated Code"),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(s.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def KafkaTarget(spark: SparkSession, in0: DataFrame):\n    df1 = in0.select(to_json(struct("*")).alias("value"))\n    df2 = df1.selectExpr("CAST(value AS STRING)")\n    df2.write\\\n        .format("kafka")\\\n        .options(\n          **{\n            "kafka.sasl.jaas.config": (\n              f"kafkashaded.org.apache.kafka.common.security.scram.ScramLoginModule"\n              + f\' required username="{DBUtils(spark).secrets.get(scope = "test", key = "username")}" password="{DBUtils(spark).secrets.get(scope = "test", key = "password")}";\'\n            ),\n            "kafka.sasl.mechanism": "SCRAM-SHA-256",\n            "kafka.security.protocol": "SASL_SSL",\n            "kafka.bootstrap.servers": "broker1.aws.com:9094,broker2.aws.com:9094",\n            "topic": "my_first_topic,my_second_topic",\n          }\n        )\\\n        .save()\n')))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"example-pipeline"},"Example Pipeline"),(0,n.yg)("h3",{id:"source-pipeline-example"},"Source Pipeline Example"),(0,n.yg)("p",null,"In this example, you read JSON messages from Kafka, parse them, remove any null messages, and persist the data to a Delta table."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Filter",src:t(47983).A,width:"1139",height:"584"})),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)("h4",{id:"metadata-table"},"Metadata Table"),(0,n.yg)("p",null,"To avoid reprocessing messages on subsequent pipeline runs, update a table with the last processed offsets for each Kafka partition and topic. When you run the pipeline, the table only gets a batch of messages that arrived since the previously-processed offset."),(0,n.yg)("p",null,"In this example, you update ",(0,n.yg)("inlineCode",{parentName:"p"},"metadata.kafka_offsets"),", which has the following structure:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"topic"),(0,n.yg)("th",{parentName:"tr",align:"left"},"partition"),(0,n.yg)("th",{parentName:"tr",align:"left"},"max_offset"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"my_first_topic"),(0,n.yg)("td",{parentName:"tr",align:"left"},"0"),(0,n.yg)("td",{parentName:"tr",align:"left"},"10")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"my_first_topic"),(0,n.yg)("td",{parentName:"tr",align:"left"},"1"),(0,n.yg)("td",{parentName:"tr",align:"left"},"5")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"my_second_topic"),(0,n.yg)("td",{parentName:"tr",align:"left"},"0"),(0,n.yg)("td",{parentName:"tr",align:"left"},"10")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"my_second_topic"),(0,n.yg)("td",{parentName:"tr",align:"left"},"1"),(0,n.yg)("td",{parentName:"tr",align:"left"},"5")))),(0,n.yg)("p",null,"Taking this approach provides you the with following benefits:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Builds the pipeline interactively without committing any offsets."),(0,n.yg)("li",{parentName:"ol"},"Production workflows only consume messages that arrived since the previously-processed offset."),(0,n.yg)("li",{parentName:"ol"},"You can replay old messages by modifying the Metadata table.")),(0,n.yg)("admonition",{type:"note"},(0,n.yg)("p",{parentName:"admonition"},"For production workflows the ",(0,n.yg)("a",{parentName:"p",href:"/concepts/project/gems#gem-phase"},"phase")," for the ",(0,n.yg)("inlineCode",{parentName:"p"},"Script")," gem that updates the offsets should be greater than the phase of the Target gem. This ensures that offsets only update in the table after Prophecy safely persists the data to the Target.")),(0,n.yg)("h4",{id:"spark-code-used-for-script-component"},"Spark Code used for script component"),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(s.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def UpdateOffsets(spark: SparkSession, in0: DataFrame):\n\n    if not ("SColumnExpression" in locals()):\n        from delta.tables import DeltaTable\n        import pyspark.sql.functions as f\n        metadataTable = "metadata.kafka_offsets"\n        metaDataDf = in0.groupBy("partition", "topic").agg(f.max(f.col("`offset`").cast("int")).alias("max_offset"))\n\n        if not spark.catalog._jcatalog.tableExists(metadataTable):\n            metaDataDf.write.format("delta").mode("overwrite").saveAsTable(metadataTable)\n        else:\n            DeltaTable\\\n                .forName(spark, metadataTable)\\\n                .alias("target")\\\n                .merge(\n                  metaDataDf.alias("source"),\n                  (\n                    (col("source.`partition`") == col("target.`partition`"))\n                    & (col("source.`topic`") == col("target.`topic`"))\n                  )\n                )\\\n                .whenMatchedUpdateAll()\\\n                .whenNotMatchedInsertAll()\\\n                .execute()\n')))))}y.isMDXComponent=!0},47983:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/kafka_pipeline_eg-f97290ea76491916f47acf312a5ea95b.gif"},38999:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/kafka_source_eg_1-5d9b36695526379b9a62cf152b6170bf.png"},24123:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/kafka_target_eg_1-498e2012164f661686168fbd52aebaaf.png"}}]);