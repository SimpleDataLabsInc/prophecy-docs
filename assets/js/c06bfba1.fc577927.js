"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[7949],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),r=n(67294),o=n(86010),i=n(12466),l=n(16550),s=n(91980),p=n(67392),c=n(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,p]=h({queryString:n,groupId:a}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),k=(()=>{const e=s??u;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{k&&l(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var k=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==l&&(u(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,o.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",b.tabList)},r.createElement(f,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},7973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(74866),i=n(85162);const l={sidebar_position:3,title:"Pinecone Lookup",id:"ml-pinecone-lookup",description:"Lookup a vector embedding from a Pinecone Database",tags:["generative-ai","machine-learning","llm","pinecone","openai"]},s=void 0,p={unversionedId:"low-code-spark/gems/machine-learning/ml-pinecone-lookup",id:"low-code-spark/gems/machine-learning/ml-pinecone-lookup",title:"Pinecone Lookup",description:"Lookup a vector embedding from a Pinecone Database",source:"@site/docs/low-code-spark/gems/machine-learning/ml-pinecone-lookup.md",sourceDirName:"low-code-spark/gems/machine-learning",slug:"/low-code-spark/gems/machine-learning/ml-pinecone-lookup",permalink:"/low-code-spark/gems/machine-learning/ml-pinecone-lookup",draft:!1,tags:[{label:"generative-ai",permalink:"/tags/generative-ai"},{label:"machine-learning",permalink:"/tags/machine-learning"},{label:"llm",permalink:"/tags/llm"},{label:"pinecone",permalink:"/tags/pinecone"},{label:"openai",permalink:"/tags/openai"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Pinecone Lookup",id:"ml-pinecone-lookup",description:"Lookup a vector embedding from a Pinecone Database",tags:["generative-ai","machine-learning","llm","pinecone","openai"]},sidebar:"defaultSidebar",previous:{title:"OpenAI",permalink:"/low-code-spark/gems/machine-learning/ml-openai"},next:{title:"Subgraph",permalink:"/low-code-spark/gems/subgraph/"}},c={},u=[{value:"Gem Parameters",id:"gem-parameters",level:3},{value:"Credentials",id:"credentials",level:4},{value:"Properties",id:"properties",level:4},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"FAQ",id:"faq",level:3},{value:"Troubleshooting",id:"troubleshooting",level:4},{value:"Creating a Pinecone Index",id:"creating-a-pinecone-index",level:4}],d={toc:u},m="wrapper";function h(e){let{components:t,...l}=e;return(0,r.kt)(m,(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.kt)("iframe",{src:"https://fast.wistia.net/embed/iframe/nupkza0ir6?seo=false?videoFoam=true",title:"Getting Started With SQL Video",allow:"autoplay; fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.kt)("script",{src:"https://fast.wistia.net/assets/external/E-v1.js",async:!0}),(0,r.kt)("br",null),(0,r.kt)("p",null,"The Pinecone Lookup Gem identifies content that is similar to a provided vector embedding. The Gem calls the Pinecone API and returns a set of IDs with highest similarity to the provided embedding."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#gem-parameters"},(0,r.kt)("strong",{parentName:"a"},"Parameters:"))," Configure the parameters needed to call the Pinecone API.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#input"},(0,r.kt)("strong",{parentName:"a"},"Input:"))," This Gem requires an embedding as input. The embedding is provided by a foundational model like ",(0,r.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/introduction"},"OpenAI"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#output"},(0,r.kt)("strong",{parentName:"a"},"Output:"))," This Gem outputs an array of IDs with corresponding similarity scores."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Input and Output",src:n(90967).Z,width:"2376",height:"814"})),(0,r.kt)("p",null,"Now let\u2019s understand the Gem Parameters, Input, and Output in detail."),(0,r.kt)("h3",{id:"gem-parameters"},"Gem Parameters"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Parameters",src:n(59542).Z,width:"2880",height:"1726"})),(0,r.kt)("p",null,"Verify the ",(0,r.kt)("strong",{parentName:"p"},"(1) input columns")," contain a column with the embeddings. The structure of this column's entries must be compatible with the structure of the Pinecone index."),(0,r.kt)("h4",{id:"credentials"},"Credentials"),(0,r.kt)("p",null,"Configure the Pinecone API credentials here. Storing the Pinecone API token as a ",(0,r.kt)("strong",{parentName:"p"},"(2) Databricks Secret")," is highly recommended. For instructions click ",(0,r.kt)("a",{parentName:"p",href:"https://docs.databricks.com/en/security/secrets/index.html"},"here.")," Be sure to use the ",(0,r.kt)("strong",{parentName:"p"},"(3) Fabric connection")," to the Databricks workspace which contains the Databricks scope and secrets configured in this Gem."),(0,r.kt)("p",null,"Hardcoding the Pinecone credential is not recommended. Selecting this option could send credentials to be stored hardcoded in Git; ",(0,r.kt)("a",{parentName:"p",href:"https://www.prophecy.io/request-a-demo"},"reach out")," to understand the integrations with other secret managers."),(0,r.kt)("h4",{id:"properties"},"Properties"),(0,r.kt)("p",null,"Pinecone DB uses indexing to map the vectors to a data structure that will enable faster searching. The Pinecone Lookup Gem searches through a Pinecone index to identify embeddings with similarity to the input embedding. Enter the Pinecone ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#faq"},"(4) Index name"))," which you\u2019d like to use for looking up embeddings."),(0,r.kt)("p",null,"Select one of the Gem\u2019s input columns with vector embeddings as the ",(0,r.kt)("strong",{parentName:"p"},"(5) Vector column")," to send to Pinecone\u2019s API. The column ",(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#input"},"must")," be compatible with the Pinecone Index. To change the column\u2019s datatype and properties, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#faq"},"configure")," the Gem(s) preceding the Pinecone Lookup Gem."),(0,r.kt)("p",null,"Pinecone\u2019s API can return multiple results. Depending on the use case, select the desired ",(0,r.kt)("strong",{parentName:"p"},"(6) Number of results")," sorted by similarity score. The result with highest similarity to the user\u2019s text question will be listed first."),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"Pinecone Lookup requires a model_embedding column as input. Use one of Prophecy's Machine Learning Gems to provide the model_embedding. For example, the OpenAI Gem can precede the Pinecone Lookup Gem in the Pipeline. The OpenAI Gem, configured to ",(0,r.kt)("inlineCode",{parentName:"p"},"Compute a text embedding"),", will output an openai_embedding column. This is a suitable input for the Pinecone Lookup Gem."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Column"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"model_embedding"),(0,r.kt)("td",{parentName:"tr",align:null},"array(float) - The format of this embedding is important. It must be an array of floating point numbers that matches the requirements of the Pinecone index. For example, we used a Pinecone index with ",(0,r.kt)("inlineCode",{parentName:"td"},"1536")," dimensions, ",(0,r.kt)("inlineCode",{parentName:"td"},"Cosine")," metric, and an ",(0,r.kt)("inlineCode",{parentName:"td"},"s1")," pod type. So each record in the model_embedding column must be an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"1536")," floating point numbers, such as ",(0,r.kt)("inlineCode",{parentName:"td"},"[-0.0018493991, -0.0059955865, ... -0.02498541]"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"True")))),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"The output Dataset contains the pinecone_matches and pinecone_error columns. For each input content entry, this Gem adds an array to the pinecone_matches column. The output array will have ",(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/gems/machine-learning/ml-pinecone-lookup#properties"},"Number of Results")," entries."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Column"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pinecone_matches"),(0,r.kt)("td",{parentName:"tr",align:null},"array - an array of several content IDs and their scores. Example: ",(0,r.kt)("inlineCode",{parentName:"td"},'[{"id":"web-223","score":0.8437653},{"id":"web-224","score":0.8403446}, ...{"id":"web-237","score":0.82916564}]'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pinecone_error"),(0,r.kt)("td",{parentName:"tr",align:null},"string - this column is provided to show any error message returned from Pinecone\u2019s API; helpful for troubleshooting errors related to the Pinecone Lookup Gem.")))),(0,r.kt)("p",null,"Prophecy converts the visual design into Spark code available on the Prophecy user's Git repository. Find the Spark code for the Pinecone Lookup Gem below."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def vector_lookup(Spark: SparkSession, in0: DataFrame) -> DataFrame:\n    from pySpark.sql.functions import expr, array, struct\n    from Spark_ai.dbs.pinecone import PineconeDB, IdVector\n    from pySpark.dbutils import DBUtils\n    PineconeDB(DBUtils(Spark).secrets.get(scope = "< my_scope >", key = "< my_key >"), "us-east-1-aws")\\\n        .register_udfs(Spark)\n\n    return in0\\\n        .withColumn("_vector", col("<model>_embedding"))\\\n        .withColumn("_response", expr(f"pinecone_query(\\<index name>\\", _vector, {3})"))\\\n        .withColumn("pinecone_matches", col("_response.matches"))\\\n        .withColumn("pinecone_error", col("_response.error"))\\\n        .drop("_vector", "_response")\n'))),(0,r.kt)(i.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"  [Not yet supported]\n")))),(0,r.kt)("h3",{id:"faq"},"FAQ"),(0,r.kt)("h4",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"To troubleshoot the Gem preceding Pinecone Lookup, open the data preview output from the previous Gem. For example if the embedding structure is incorrect then try adjusting the previous Gem, run, and view that Gem\u2019s output data preview."),(0,r.kt)("h4",{id:"creating-a-pinecone-index"},"Creating a Pinecone Index"),(0,r.kt)("p",null,"If you don\u2019t have one yet, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/quickstart"},"create a Pinecone index"),". Click ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/choosing-index-type-and-size"},"here")," for pointers on choosing an index type and size. How to populate the index? For example, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/getting-started/gen-ai-chatbot#step-2-build-a-knowledge-warehouse"},"this guide")," shows how to ingest and vectorize web content data to store in a Pinecone Database index."))}h.isMDXComponent=!0},59542:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pinecone_lookup_configure-c0222e658f0a0e83456793ea8e3bffd0.png"},90967:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pinecone_lookup_input_output-268c3aecc7c4cb663c302cdd2682e30f.png"}}]);