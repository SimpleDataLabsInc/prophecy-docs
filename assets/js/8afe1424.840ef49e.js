"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[35392],{15680:(e,t,a)=>{a.d(t,{xA:()=>g,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},g=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,m=u["".concat(s,".").concat(d)]||u[d]||c[d]||l;return a?n.createElement(m,o(o({ref:t},g),{},{components:a})):n.createElement(m,o({ref:t},g))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>o});var n=a(96540),r=a(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,o),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>v});var n=a(58168),r=a(96540),l=a(20053),o=a(23104),i=a(56347),s=a(57485),p=a(31682),g=a(89466);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function c(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??u(a);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=c(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,p]=m({queryString:a,groupId:n}),[u,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,g.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),b=(()=>{const e=s??u;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var b=a(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:p}=e;const g=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),c=e=>{const t=e.currentTarget,a=g.indexOf(t),n=p[a].value;n!==i&&(u(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=g.indexOf(e.currentTarget)+1;t=g[a]??g[0];break}case"ArrowLeft":{const a=g.indexOf(e.currentTarget)-1;t=g[a]??g[g.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>g.push(e),onKeyDown:d,onClick:c},o,{className:(0,l.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=y(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(h,(0,n.A)({},e,t)),r.createElement(N,(0,n.A)({},e,t)))}function v(e){const t=(0,b.A)();return r.createElement(w,(0,n.A)({key:String(t)},e))}},50728:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540);function r(e){return n.createElement("div",null,e.python_package_name&&e.python_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.python_package_name),n.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.scala_package_name),n.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsPython"),n.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsScala"),n.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Single Cluster"),n.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Shared"),n.createElement("span",{className:"right"},e.uc_shared))),e.livy&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Livy"),n.createElement("span",{className:"right"},e.livy))),n.createElement("br",null),n.createElement("br",null))}},89741:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>y,frontMatter:()=>s,metadata:()=>g,toc:()=>c});var n=a(58168),r=(a(96540),a(15680)),l=a(50728),o=a(11470),i=a(19365);const s={title:"MongoDB",id:"mongodb",description:"MongoDB",tags:["gems","warehouse","mongodb"]},p=void 0,g={unversionedId:"Spark/gems/source-target/warehouse/mongodb",id:"Spark/gems/source-target/warehouse/mongodb",title:"MongoDB",description:"MongoDB",source:"@site/docs/Spark/gems/source-target/warehouse/mongodb.md",sourceDirName:"Spark/gems/source-target/warehouse",slug:"/Spark/gems/source-target/warehouse/mongodb",permalink:"/Spark/gems/source-target/warehouse/mongodb",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"warehouse",permalink:"/tags/warehouse"},{label:"mongodb",permalink:"/tags/mongodb"}],version:"current",frontMatter:{title:"MongoDB",id:"mongodb",description:"MongoDB",tags:["gems","warehouse","mongodb"]},sidebar:"mySidebar",previous:{title:"JDBC",permalink:"/Spark/gems/source-target/warehouse/jdbc"},next:{title:"Oracle",permalink:"/Spark/gems/source-target/warehouse/oracle"}},u={},c=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Supported Write Modes",id:"supported-write-modes",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3}],d={toc:c},m="wrapper";function y(e){let{components:t,...a}=e;return(0,r.yg)(m,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{python_package_name:"ProphecyWarehousePython",python_package_version:"0.0.1+",scala_package_name:"ProphecyWarehouseScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"Not Supported",uc_shared:"Not Supported",livy:"Not Supported",mdxType:"Requirements"}),(0,r.yg)("admonition",{title:"Built on",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Built on ",(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/#mongodb-connector-for-spark"},"MongoDB Spark Connector")," v10.0. ",(0,r.yg)("br",null),"\nAdd ",(0,r.yg)("inlineCode",{parentName:"p"},"mongodb-spark-connector")," jar as dependency ",(0,r.yg)("a",{parentName:"p",href:"/extensibility/dependencies/spark-dependencies"},"for more"),".")),(0,r.yg)("p",null,"Allows read and write operations on ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB"),"."),(0,r.yg)("h2",{id:"source"},"Source"),(0,r.yg)("h3",{id:"source-parameters"},"Source Parameters"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/read/"},"Official documentation")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Username"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Password"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Driver"),(0,r.yg)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,r.yg)("br",null)," e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Database"),(0,r.yg)("td",{parentName:"tr",align:null},"Database from which we want to read the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Collection"),(0,r.yg)("td",{parentName:"tr",align:null},"Collection from which we want to read the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,r.yg)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,r.yg)("br",null)," You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner"),(0,r.yg)("td",{parentName:"tr",align:null},"The partitioner full class name. You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.Partitioner")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.SamplePartitioner")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.partition.field"),(0,r.yg)("td",{parentName:"tr",align:null},"The field to use for partitioning, which must be a unique field. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_id")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.partition.size"),(0,r.yg)("td",{parentName:"tr",align:null},"The size (in MB) for each partition. Smaller partition sizes create more partitions containing fewer documents. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"64")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.samples.per.partition"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of samples to take per partition. The total number of samples taken is: ",(0,r.yg)("inlineCode",{parentName:"td"},"samples per partiion * ( count / number of documents per partition)")," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"10")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sampleSize"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of documents to sample from the collection when inferring the schema. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"1000")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.enabled"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable Map types when inferring the schema. When enabled, large compatible struct types are inferred to a MapType instead. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.minimum.key.size"),(0,r.yg)("td",{parentName:"tr",align:null},"Minimum size of a StructType before inferring as a MapType. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"250")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"aggregation.pipeline"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies a custom aggregation pipeline to apply to the collection before sending data to Spark. The value must be either an extended JSON single document or list of documents.",(0,r.yg)("br",null)," A single document should resemble the following:",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},'{"$match": {"closed": false}}')," ",(0,r.yg)("br",null)," A list of documents should resemble the following:",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},'[{"$match": {"closed": false}}, {"$project": {"status": 1, "name": 1, "description": 1}}]')),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"aggregation.allowDiskUse"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies whether to allow storage to disk when running the aggregation. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")))),(0,r.yg)("h3",{id:"source-example"},"Example"),(0,r.yg)("p",null,"Below is an example of configuring MongoDB Source using Prophecy IDE.\nWe will be reading Airbnb public ",(0,r.yg)("inlineCode",{parentName:"p"},"listingReviews")," dataset using in-built ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB")," Source gem.",(0,r.yg)("br",null),"\nAfter configuration you can view schema by clicking ",(0,r.yg)("inlineCode",{parentName:"p"},"Infer Schema")," in properties tab and also view data by clicking ",(0,r.yg)("inlineCode",{parentName:"p"},"Load")," inside Preview tab."),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218975988-7e445ee5-81c1-4c0c-90dd-711ec28f0a38.mp4",title:"MongoDB Source",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,r.yg)("h3",{id:"source-code"},"Generated Code"),(0,r.yg)(o.A,{defaultValue:"scala",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'object input_mongodb {\n\n  def apply(context: Context): DataFrame = {\n    context.spark.read\n      .format("mongodb")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",   "test_input")\n      .option("collection", "listAndReviews")\n      .load()\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"target"},"Target"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/write/"},"Official documentation")),(0,r.yg)("h3",{id:"target-parameters"},"Target Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Username"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Password"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Driver"),(0,r.yg)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,r.yg)("br",null)," e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Database"),(0,r.yg)("td",{parentName:"tr",align:null},"Database to which we want to write the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Collection"),(0,r.yg)("td",{parentName:"tr",align:null},"Collection to which we want to write the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,r.yg)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,r.yg)("br",null)," You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"maxBatchSize"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies the maximum number of operations to batch in bulk operations. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"512")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ordered"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies whether to perform ordered bulk operations. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"operationType"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies the type of write operation to perform. You can set this to one of the following values: ",(0,r.yg)("inlineCode",{parentName:"td"},"insert"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"replace")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"replace")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"idFieldList"),(0,r.yg)("td",{parentName:"tr",align:null},"Field or list of fields by which to split the collection data. To specify more than one field, separate them using a comma as shown in the following example:",(0,r.yg)("inlineCode",{parentName:"td"},'"fieldName1,fieldName2"')," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_id")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.w"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies w, a write concern option to acknowledge the level to which the change propagated in the MongoDB replica set. You can specify one of the following values: ",(0,r.yg)("inlineCode",{parentName:"td"},"MAJORITY"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W1"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W2"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W3"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"ACKNOWLEDGED")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"UNACKNOWLEDGED"),(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_ACKNOWLEDGED")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.journal"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies j, a write concern option to enable request for acknowledgment that the data is confirmed on on-disk journal for the criteria specified in the w option.",(0,r.yg)("br",null)," You can specify either ",(0,r.yg)("inlineCode",{parentName:"td"},"true")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),"."),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.wTimeoutMS"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies wTimeoutMS, a write concern option to return an error when a write operation exceeds the number of milliseconds. If you use this optional setting, you must specify a ",(0,r.yg)("inlineCode",{parentName:"td"},"non-negative")," integer."),(0,r.yg)("td",{parentName:"tr",align:null},"False")))),(0,r.yg)("h3",{id:"supported-write-modes"},"Supported Write Modes"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Write Mode"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"overwrite"),(0,r.yg)("td",{parentName:"tr",align:null},"If data already exists, ",(0,r.yg)("inlineCode",{parentName:"td"},"overwrite")," the contents of the Collection with data.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"append"),(0,r.yg)("td",{parentName:"tr",align:null},"If data already exists, ",(0,r.yg)("inlineCode",{parentName:"td"},"append")," the data on to the contents of the Collection.")))),(0,r.yg)("h3",{id:"target-example"},"Example"),(0,r.yg)("p",null,"Below is an example of configuring MongoDB Target using Prophecy IDE.\nWe will be writing back Airbnb public ",(0,r.yg)("inlineCode",{parentName:"p"},"listingReviews")," data into a collection in ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB")," using our in-built Target gem."),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218750916-a3ea2ead-9c81-42c9-9ad2-c60a61cdde4a.mp4",title:"MongoDB Target",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,r.yg)("h3",{id:"target-code"},"Generated Code"),(0,r.yg)(o.A,{defaultValue:"scala",mdxType:"Tabs"},(0,r.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'object output_mongodb {\n  def apply(context: Context, df: DataFrame): Unit = {\n    df.write\n      .format("mongodb")\n      .mode("overwrite")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",      "test")\n      .option("collection",    "test_output")\n      .option("ordered",       "true")\n      .option("operationType", "replace")\n      .save()\n  }\n}\n')))))}y.isMDXComponent=!0}}]);