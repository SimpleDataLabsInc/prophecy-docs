"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[87941],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>y});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),g=s(n),m=a,y=g["".concat(l,".").concat(m)]||g[m]||d[m]||i;return n?r.createElement(y,o(o({ref:t},c),{},{components:n})):r.createElement(y,o({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[g]="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94845:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(58168),a=(n(96540),n(15680));const i={sidebar_position:9,title:"SetOperation",id:"set-operation",description:"Union, Intersect and Difference",tags:["gems","set","union","intersect","difference"]},o=void 0,p={unversionedId:"SQL/gems/transform/set-operation",id:"SQL/gems/transform/set-operation",title:"SetOperation",description:"Union, Intersect and Difference",source:"@site/docs/SQL/gems/transform/set-operation.md",sourceDirName:"SQL/gems/transform",slug:"/SQL/gems/transform/set-operation",permalink:"/SQL/gems/transform/set-operation",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"set",permalink:"/tags/set"},{label:"union",permalink:"/tags/union"},{label:"intersect",permalink:"/tags/intersect"},{label:"difference",permalink:"/tags/difference"}],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"SetOperation",id:"set-operation",description:"Union, Intersect and Difference",tags:["gems","set","union","intersect","difference"]},sidebar:"mySidebar",previous:{title:"Reformat",permalink:"/SQL/gems/transform/reformat"},next:{title:"Unpivot",permalink:"/SQL/gems/transform/unpivot"}},l={},s=[{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3},{value:"Operation Type - <code>Union</code>",id:"operation-type---union",level:4},{value:"Operation Type - <code>Intersect</code>",id:"operation-type---intersect",level:4},{value:"Operation Type - <code>Except</code>",id:"operation-type---except",level:4}],c={toc:s},g="wrapper";function d(e){let{components:t,...i}=e;return(0,a.yg)(g,(0,r.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h3",null,(0,a.yg)("span",{class:"badge"},"SQL Gem")),(0,a.yg)("p",null,"Use the SetOperation Gem to perform addition or subtraction of rows from Models with identical schemas and different data."),(0,a.yg)("h3",{id:"parameters"},"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:"left"},"Parameter"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Description"),(0,a.yg)("th",{parentName:"tr",align:"left"},"Required"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Model 1"),(0,a.yg)("td",{parentName:"tr",align:"left"},"First input Source"),(0,a.yg)("td",{parentName:"tr",align:"left"},"True")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Model 2"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Second input Source"),(0,a.yg)("td",{parentName:"tr",align:"left"},"True")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Model N"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Nth input Source"),(0,a.yg)("td",{parentName:"tr",align:"left"},"False")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:"left"},"Operation type"),(0,a.yg)("td",{parentName:"tr",align:"left"},"Operation to perform",(0,a.yg)("br",null),"- ",(0,a.yg)("inlineCode",{parentName:"td"},"Union"),": Returns a Model containing rows in any one of the input Sources, while preserving duplicates.",(0,a.yg)("br",null),"- ",(0,a.yg)("inlineCode",{parentName:"td"},"Intersect"),": Returns a Model containing rows in all of the input Sources, while preserving duplicates. ",(0,a.yg)("br",null),"- ",(0,a.yg)("inlineCode",{parentName:"td"},"Except"),": Returns a Model containing rows in the first Source, but not in the other Sources, while preserving duplicates."),(0,a.yg)("td",{parentName:"tr",align:"left"},"True")))),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"To add more input Sources, simply click ",(0,a.yg)("inlineCode",{parentName:"p"},"+")," icon on the left sidebar\n",(0,a.yg)("img",{alt:"Set Operation - Add input dataframe",src:n(62615).A,width:"556",height:"136"}))),(0,a.yg)("h3",{id:"examples"},"Examples"),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"operation-type---union"},"Operation Type - ",(0,a.yg)("inlineCode",{parentName:"h4"},"Union")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Example usage of Set Operation - Union",src:n(64844).A,width:"1798",height:"904"})),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"operation-type---intersect"},"Operation Type - ",(0,a.yg)("inlineCode",{parentName:"h4"},"Intersect")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Example usage of Set Operation - Intersect",src:n(33319).A,width:"1822",height:"868"})),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"operation-type---except"},"Operation Type - ",(0,a.yg)("inlineCode",{parentName:"h4"},"Except")),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Example usage of Set Operation - Except",src:n(61982).A,width:"1812",height:"783"})))}d.isMDXComponent=!0},62615:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/set_add_inputs-bdf7b6691fc473ea1eee60161a5b9786.png"},64844:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/set_eg_1-46701e21c8cebc491888db3d556e8345.png"},33319:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/set_eg_2-fe430fbd13a44d729c0c0ef00e7ca2d9.png"},61982:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/set_eg_3-5ad43a57037f0e1ada3b964fcf2934a7.png"}}]);