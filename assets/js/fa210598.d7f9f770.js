"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[42685],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>c});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),m=n,c=d["".concat(s,".").concat(m)]||d[m]||g[m]||l;return a?r.createElement(c,i(i({ref:t},p),{},{components:a})):r.createElement(c,i({ref:t},p))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>i});var r=a(96540),n=a(20053);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.A)(l.tabItem,i),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>w});var r=a(58168),n=a(96540),l=a(20053),i=a(23104),o=a(56347),s=a(57485),u=a(31682),p=a(89466);function d(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function g(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??d(a);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function m(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:a}=e;const r=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=g(e),[i,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[s,u]=c({queryString:a,groupId:r}),[d,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,p.Dv)(a);return[r,(0,n.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:r}),f=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),y(e)}),[u,y,l]),tabValues:l}}var f=a(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),g=e=>{const t=e.currentTarget,a=p.indexOf(t),r=u[a].value;r!==o&&(d(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":g(e);break;case"ArrowRight":{const a=p.indexOf(e.currentTarget)+1;t=p[a]??p[0];break}case"ArrowLeft":{const a=p.indexOf(e.currentTarget)-1;t=p[a]??p[p.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:i}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:g},i,{className:(0,l.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":o===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:r}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=y(e);return n.createElement("div",{className:(0,l.A)("tabs-container",b.tabList)},n.createElement(h,(0,r.A)({},e,t)),n.createElement(N,(0,r.A)({},e,t)))}function w(e){const t=(0,f.A)();return n.createElement(v,(0,r.A)({key:String(t)},e))}},37102:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var r=a(58168),n=(a(96540),a(15680)),l=a(11470),i=a(19365);const o={title:"Parquet",id:"parquet",description:"Parquet",sidebar_position:10,tags:["gems","file","parquet"]},s=void 0,u={unversionedId:"Spark/gems/source-target/file/parquet",id:"Spark/gems/source-target/file/parquet",title:"Parquet",description:"Parquet",source:"@site/docs/Spark/gems/source-target/file/parquet.md",sourceDirName:"Spark/gems/source-target/file",slug:"/Spark/gems/source-target/file/parquet",permalink:"/Spark/gems/source-target/file/parquet",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"parquet",permalink:"/tags/parquet"}],version:"current",sidebarPosition:10,frontMatter:{title:"Parquet",id:"parquet",description:"Parquet",sidebar_position:10,tags:["gems","file","parquet"]},sidebar:"mySidebar",previous:{title:"ORC",permalink:"/Spark/gems/source-target/file/orc"},next:{title:"Text",permalink:"/Spark/gems/source-target/file/text"}},p={},d=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Supported Write Modes",id:"supported-write-modes",level:3},{value:"Example",id:"target",level:3},{value:"Generated Code",id:"target-code",level:3}],g={toc:d},m="wrapper";function c(e){let{components:t,...a}=e;return(0,n.yg)(m,(0,r.A)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Parquet is an open-source Columnar storage data format. It handles large volumes of data by supporting complex pushdown predicates, nested schemas and a wide variety of column encoding types."),(0,n.yg)("p",null,"This gem allows you to read from or write to Parquet files."),(0,n.yg)("h2",{id:"source"},"Source"),(0,n.yg)("p",null,"Reads data from Parquet files at the given path."),(0,n.yg)("h3",{id:"source-parameters"},"Source Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Required"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"File path where parquet files are present"),(0,n.yg)("td",{parentName:"tr",align:null},"True"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema to be applied on the loaded data. Can be defined/edited as json or inferred using ",(0,n.yg)("inlineCode",{parentName:"td"},"Infer Schema")," button."),(0,n.yg)("td",{parentName:"tr",align:null},"True"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Recursive File Lookup"),(0,n.yg)("td",{parentName:"tr",align:null},"This is used to recursively load files from the given Location. Disables partition discovery. An exception will be thrown if this option and a ",(0,n.yg)("inlineCode",{parentName:"td"},"partitionSpec")," are specified."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"False")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Path Global Filter"),(0,n.yg)("td",{parentName:"tr",align:null},"An optional glob pattern to only include files with paths matching the pattern. The syntax follows ",(0,n.yg)("a",{parentName:"td",href:"https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/fs/GlobFilter.html"},"GlobFilter"),". It does not change the behavior of partition discovery."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Modified Before"),(0,n.yg)("td",{parentName:"tr",align:null},"An optional Timestamp to only include files with modification times occurring before the specified Time. The provided timestamp must be in ",(0,n.yg)("inlineCode",{parentName:"td"},"YYYY-MM-DDTHH:mm:ss")," form (e.g. ",(0,n.yg)("inlineCode",{parentName:"td"},"2020-06-01T13:00:00"),")"),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Modified After"),(0,n.yg)("td",{parentName:"tr",align:null},"An optional timestamp to only include files with modification times occurring after the specified Time. The provided timestamp must be in ",(0,n.yg)("inlineCode",{parentName:"td"},"YYYY-MM-DDTHH:mm:ss")," form (e.g. ",(0,n.yg)("inlineCode",{parentName:"td"},"2020-06-01T13:00:00"),")"),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Merge Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Sets whether schemas should be merged from all collected Parquet part-files. This will override ",(0,n.yg)("inlineCode",{parentName:"td"},"spark.sql.parquet.mergeSchema"),"."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"(value of ",(0,n.yg)("inlineCode",{parentName:"td"},"spark.sql.parquet."),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"mergeSchema"),")")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Int96 Rebase mode"),(0,n.yg)("td",{parentName:"tr",align:null},"The ",(0,n.yg)("inlineCode",{parentName:"td"},"int96RebaseMode")," option allows to specify the rebasing mode for INT96 timestamps from the Julian to Proleptic Gregorian calendar. ",(0,n.yg)("br",null),(0,n.yg)("br",null)," Currently supported modes are: ",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"EXCEPTION"),": fails in reads of ancient INT96 timestamps that are ambiguous between the two calendars.",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"CORRECTED"),": loads INT96 timestamps without rebasing.",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"LEGACY"),": performs rebasing of ancient timestamps from the Julian to Proleptic Gregorian calendar."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"(value of ",(0,n.yg)("inlineCode",{parentName:"td"},"spark.sql.parquet"),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},".int96RebaseModeInRead"),")")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Datetime Rebase mode"),(0,n.yg)("td",{parentName:"tr",align:null},"The ",(0,n.yg)("inlineCode",{parentName:"td"},"datetimeRebaseMode")," option allows to specify the rebasing mode for the values of the DATE, TIMESTAMP_MILLIS, TIMESTAMP_MICROS logical types from the Julian to Proleptic Gregorian calendar.",(0,n.yg)("br",null),"Currently supported modes are:",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"EXCEPTION"),": fails in reads of ancient dates/timestamps that are ambiguous between the two calendars.",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"CORRECTED"),": loads dates/timestamps without rebasing.",(0,n.yg)("br",null),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},"LEGACY"),": performs rebasing of ancient dates/timestamps from the Julian to Proleptic Gregorian calendar."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"(value of ",(0,n.yg)("inlineCode",{parentName:"td"},"spark.sql.parquet"),(0,n.yg)("br",null),(0,n.yg)("inlineCode",{parentName:"td"},".datetimeRebaseModeInRead"),")")))),(0,n.yg)("h3",{id:"source-example"},"Example"),(0,n.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,n.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,n.yg)("iframe",{src:"https://user-images.githubusercontent.com/103921419/175030738-4c53b5c9-73e7-46c7-9fdc-c49048f78572.mp4",title:"Parquet Source",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,n.yg)("h3",{id:"source-code"},"Generated Code"),(0,n.yg)(l.A,{mdxType:"Tabs"},(0,n.yg)(i.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def read_parquet(spark: SparkSession) -> DataFrame:\n    return spark.read\\\n        .format("parquet")\\\n        .option("mergeSchema", True)\\\n        .load("dbfs:/FileStore/Users/parquet/test.parquet")\n\n'))),(0,n.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object read_parquet {\n\n  def apply(spark: SparkSession): DataFrame =\n    spark.read\n        .format("parquet")\n        .option("mergeSchema", true)\n        .load("dbfs:/FileStore/Users/parquet/test.parquet")\n\n}\n')))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"target"},"Target"),(0,n.yg)("h3",{id:"target-parameters"},"Target Parameters"),(0,n.yg)("p",null,"Write data as Parquet files at the specified path."),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Required"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"File path where the Parquet files will be written"),(0,n.yg)("td",{parentName:"tr",align:null},"True"),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Compression"),(0,n.yg)("td",{parentName:"tr",align:null},"Compression codec to use when saving to file. This can be one of the known case-insensitive shorten names (",(0,n.yg)("inlineCode",{parentName:"td"},"none"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"uncompressed"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"snappy"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"gzip"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"lzo"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"brotli"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"lz4"),", and ",(0,n.yg)("inlineCode",{parentName:"td"},"zstd"),"). This will override ",(0,n.yg)("inlineCode",{parentName:"td"},"spark.sql.parquet.compression.codec"),"."),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"`snappy")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Write Mode"),(0,n.yg)("td",{parentName:"tr",align:null},"How to handle existing data. See ",(0,n.yg)("a",{parentName:"td",href:"#supported-write-modes"},"this table")," for a list of available options."),(0,n.yg)("td",{parentName:"tr",align:null},"True"),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"error"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Partition Columns"),(0,n.yg)("td",{parentName:"tr",align:null},"List of columns to partition the Parquet files by"),(0,n.yg)("td",{parentName:"tr",align:null},"False"),(0,n.yg)("td",{parentName:"tr",align:null},"None")))),(0,n.yg)("h3",{id:"supported-write-modes"},"Supported Write Modes"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Write Mode"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"overwrite"),(0,n.yg)("td",{parentName:"tr",align:null},"If data already exists, overwrite with the contents of the Dataframe.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"append"),(0,n.yg)("td",{parentName:"tr",align:null},"If data already exists, append the contents of the Dataframe.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"ignore"),(0,n.yg)("td",{parentName:"tr",align:null},"If data already exists, do nothing with the contents of the Dataframe. This is similar to a ",(0,n.yg)("inlineCode",{parentName:"td"},"CREATE TABLE IF NOT EXISTS")," in SQL.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"error"),(0,n.yg)("td",{parentName:"tr",align:null},"If data already exists, throw an exception.")))),(0,n.yg)("h3",{id:"target"},"Example"),(0,n.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,n.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,n.yg)("iframe",{src:"https://user-images.githubusercontent.com/103921419/175030713-9de9d38a-c145-42e9-8411-baa44a70d0d0.mp4",title:"Parquet Target",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,n.yg)("h3",{id:"target-code"},"Generated Code"),(0,n.yg)(l.A,{mdxType:"Tabs"},(0,n.yg)(i.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def write_parquet(spark: SparkSession, in0: DataFrame):\n    in0.write\\\n        .format("parquet")\\\n        .mode("overwrite")\\\n        .save("dbfs:/data/test_output.parquet")\n'))),(0,n.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object write_parquet {\n  def apply(spark: SparkSession, in: DataFrame): Unit =\n    in.write\n        .format("parquet")\n        .mode("overwrite")\n        .save("dbfs:/data/test_output.parquet")\n}\n')))),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"To know more about tweaking Parquet related properties in Spark config ",(0,n.yg)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/sql-data-sources-parquet.html"},(0,n.yg)("strong",{parentName:"a"},"click here")),".")))}c.isMDXComponent=!0}}]);