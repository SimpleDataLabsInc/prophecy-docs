"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[9083],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return f}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),f=n,u=c["".concat(s,".").concat(f)]||c[f]||d[f]||i;return a?r.createElement(u,o(o({ref:t},m),{},{components:a})):r.createElement(u,o({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1735:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return k},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),o=["components"],l={title:"Fixed Format",id:"fixed-format",description:"Fixed Format",sidebar_position:8,tags:["gems","file","fixed-format"]},s=void 0,p={unversionedId:"low-code-spark/gems/source-target/file/fixed-format",id:"low-code-spark/gems/source-target/file/fixed-format",title:"Fixed Format",description:"Fixed Format",source:"@site/docs/low-code-spark/gems/source-target/file/fixed-format.md",sourceDirName:"low-code-spark/gems/source-target/file",slug:"/low-code-spark/gems/source-target/file/fixed-format",permalink:"/low-code-spark/gems/source-target/file/fixed-format",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"fixed-format",permalink:"/tags/fixed-format"}],version:"current",sidebarPosition:8,frontMatter:{title:"Fixed Format",id:"fixed-format",description:"Fixed Format",sidebar_position:8,tags:["gems","file","fixed-format"]},sidebar:"defaultSidebar",previous:{title:"ORC",permalink:"/low-code-spark/gems/source-target/file/orc"},next:{title:"Kafka",permalink:"/low-code-spark/gems/source-target/file/kafka"}},m={},d=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Supported Write Modes",id:"supported-write-modes",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3}],c=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},f=c("Tabs"),u=c("TabItem"),g={toc:d};function k(e){var t=e.components,l=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Enterprise Only")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Please ",(0,i.kt)("a",{parentName:"p",href:"https://www.prophecy.io/request-a-demo"},"contact us")," to learn more about the Enterprise offering."))),(0,i.kt)("p",null,"Read and write fixed format files with an expected schema."),(0,i.kt)("h2",{id:"source"},"Source"),(0,i.kt)("p",null,"Reads data from fixed format files"),(0,i.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Location"),(0,i.kt)("td",{parentName:"tr",align:"left"},"File path where fixed format files are present"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Fixed Format Schema"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Schema string for the fixed format file, supports either EBCDIC or ASCII formats"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,i.kt)("h3",{id:"source-example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Delta source example",src:a(6452).Z,width:"1183",height:"672"})),(0,i.kt)("p",null,":::"),(0,i.kt)("h3",{id:"source-code"},"Generated Code"),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(u,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'\nobject ReadEbcdic {\n\n  def apply(spark: SparkSession): DataFrame = {\n    import _root_.io.prophecy.abinitio.dml.DMLSchema.parse\n    import _root_.io.prophecy.libs.{FFSchemaRecord, _}\n    import play.api.libs.json.Json\n    import _root_.io.prophecy.libs.FixedFormatSchemaImplicits._\n    spark.read\n      .option(\n        "schema",\n        Some("""ebcdic record\n                string(6) service ;\n                string(2) person ;\n                decimal(2, 0) data ;\n                string(1) format ;\n                string(1) working ;\n                end""").map(s => parse(s).asInstanceOf[FFSchemaRecord])\n                          .map(s => Json.stringify(Json.toJson(s)))\n                          .getOrElse("")\n      )\n      .format("io.prophecy.libs.FixedFileFormat")\n      .load("/FileStore/tables/fixed_format/test/write_ebcdic")\n      .cache()\n  }\n\n}\n')))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"target"},"Target"),(0,i.kt)("p",null,"Writes data in fixed file format according to the specified schema string."),(0,i.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Location"),(0,i.kt)("td",{parentName:"tr",align:null},"File path where fixed format files will be written"),(0,i.kt)("td",{parentName:"tr",align:null},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Write mode"),(0,i.kt)("td",{parentName:"tr",align:null},"How to handle existing data. See ",(0,i.kt)("a",{parentName:"td",href:"#supported-write-modes"},"this table")," for a list of available options."),(0,i.kt)("td",{parentName:"tr",align:null},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Fixed Format Schema"),(0,i.kt)("td",{parentName:"tr",align:null},"Schema string for the fixed format file, supports either EBCDIC or ASCII formats"),(0,i.kt)("td",{parentName:"tr",align:null},"True")))),(0,i.kt)("h3",{id:"supported-write-modes"},"Supported Write Modes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Write Mode"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"overwrite"),(0,i.kt)("td",{parentName:"tr",align:null},"If data already exists, overwrite with the contents of the DataFrame")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"append"),(0,i.kt)("td",{parentName:"tr",align:null},"If data already exists, append the contents of the DataFrame")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ignore"),(0,i.kt)("td",{parentName:"tr",align:null},"If data already exists, do nothing with the contents of the DataFrame. This is similar to a ",(0,i.kt)("inlineCode",{parentName:"td"},"CREATE TABLE IF NOT EXISTS")," in SQL.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"error"),(0,i.kt)("td",{parentName:"tr",align:null},"If data already exists, throw an exception.")))),(0,i.kt)("h3",{id:"target-example"},"Example"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Delta Target Example",src:a(733).Z,width:"894",height:"470"})),(0,i.kt)("h3",{id:"target-code"},"Generated Code"),(0,i.kt)(f,{mdxType:"Tabs"},(0,i.kt)(u,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object write_ebcdic {\n\n  def apply(spark: SparkSession, in: DataFrame): Unit = {\n    import _root_.io.prophecy.abinitio.dml.DMLSchema.parse\n    import _root_.io.prophecy.libs.{FFSchemaRecord, _}\n    import play.api.libs.json.Json\n    import _root_.io.prophecy.libs.FixedFormatSchemaImplicits._\n    val schema = Some("""ebcdic record\n                            string(6) service ;\n                            string(2) person ;\n                            decimal(2, 0) data ;\n                            string(1) format ;\n                            string(1) working ;\n                            end""").map(s => parse(s).asInstanceOf[FFSchemaRecord])\n    var writer = in.write.format("io.prophecy.libs.FixedFileFormat")\n    writer = writer.mode("overwrite")\n    schema\n      .map(s => Json.stringify(Json.toJson(s)))\n      .foreach(schema => writer = writer.option("schema", schema))\n    writer.save("/FileStore/tables/fixed_format/test/write_ebcdic_alt")\n  }\n\n}\n')))))}k.isMDXComponent=!0},6452:function(e,t,a){t.Z=a.p+"assets/images/ff-source-small-3b13c691a868ae9789a145fe6cd1157e.gif"},733:function(e,t,a){t.Z=a.p+"assets/images/ff-target-small-4279378adafa421862f32729ff6b7cf5.gif"}}]);