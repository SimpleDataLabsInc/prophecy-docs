"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[2760],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>y});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=u(t),m=o,y=s["".concat(p,".").concat(m)]||s[m]||c[m]||i;return t?r.createElement(y,a(a({ref:n},d),{},{components:t})):r.createElement(y,a({ref:n},d))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},83510:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>a,default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(83117),o=(t(67294),t(3905));const i={title:"Prophecy Metadata API Enums",id:"mdapi-enums",description:"Metadata API Enums",sidebar_position:1,tags:[]},a=void 0,l={type:"mdx",permalink:"/mdapi/enums",source:"@site/src/pages/mdapi/enums.md",title:"Prophecy Metadata API Enums",description:"Metadata API Enums",frontMatter:{title:"Prophecy Metadata API Enums",id:"mdapi-enums",description:"Metadata API Enums",sidebar_position:1,tags:[]}},p=[{value:"ExternalGitProviderType",id:"externalgitprovidertype",level:2},{value:"BackEndCodeLanguage",id:"backendcodelanguage",level:2},{value:"WorkflowMode",id:"workflowmode",level:2},{value:"BuildSystem",id:"buildsystem",level:2},{value:"MergeStatus",id:"mergestatus",level:2},{value:"AspectKind",id:"aspectkind",level:2},{value:"SectionType",id:"sectiontype",level:2},{value:"ItemSelectionType",id:"itemselectiontype",level:2},{value:"DatasetType",id:"datasettype",level:2},{value:"EntityKind",id:"entitykind",level:2},{value:"CommitLogEntityMutationType",id:"commitlogentitymutationtype",level:2},{value:"ForkMode",id:"forkmode",level:2},{value:"ForkType",id:"forktype",level:2},{value:"Role",id:"role",level:2},{value:"ResolutionStrategy",id:"resolutionstrategy",level:2},{value:"RemoteType",id:"remotetype",level:2},{value:"SyncMode",id:"syncmode",level:2},{value:"UserAccountType",id:"useraccounttype",level:2},{value:"UserManagedType",id:"usermanagedtype",level:2},{value:"Scheduler",id:"scheduler",level:2},{value:"CloudProvider",id:"cloudprovider",level:2},{value:"Status",id:"status",level:2},{value:"TeamKind",id:"teamkind",level:2}],u={toc:p},d="wrapper";function s(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"externalgitprovidertype"},"ExternalGitProviderType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum ExternalGitProviderType {\n    Github\n    GithubEnterprise\n    AzureDevOps\n    BitBucket\n    GitLab\n    GitLabEnterprise\n    Other\n    ProphecyManaged\n    Unknown\n}\n")),(0,o.kt)("h2",{id:"backendcodelanguage"},"BackEndCodeLanguage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum BackEndCodeLanguage {\n    scala\n    python\n}\n")),(0,o.kt)("h2",{id:"workflowmode"},"WorkflowMode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum WorkflowMode {\n    batch\n    stream\n}\n")),(0,o.kt)("h2",{id:"buildsystem"},"BuildSystem"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum BuildSystem {\n    maven\n    wheel\n}\n")),(0,o.kt)("h2",{id:"mergestatus"},"MergeStatus"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum MergeStatus {\n    Success\n    Conflicted\n}\n")),(0,o.kt)("h2",{id:"aspectkind"},"AspectKind"),(0,o.kt)("p",null,"Supported aspect types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum AspectKind {\n    "List of Pipeline in job"\n    PipelinesInJob\n\n    "Dependency information"\n    Dependency\n\n    "Configuration content. Versioned."\n    Configuration\n\n    "Hive metastore related information."\n    Storage\n\n    "Airflow connections info"\n    AirflowConnectionInfo\n\n    "Unit test execution result information"\n    TestResult\n\n    "Dag Information "\n    DagInformation\n\n    "Job size information like resources etc."\n    JobSize\n\n    "Spark Provider Information for a fabric"\n    SparkProviderInfo\n\n    "Scheduler Provider Information for a fabric"\n    SchedulerProviderInfo\n\n    "Code content. Versioned."\n    Code\n\n    "Unit Tests. Versioned."\n    TestVisual\n\n    "Dataset schema information"\n    Schema\n\n    "Version information of Entity"\n    MigrationInfo\n\n    "Commit ids sorted by date for deploy option in scheduler"\n    ListCommits\n\n    "Git storage information like repo url etc."\n    GitStorage\n\n    "Git storage information like repo url etc. for Projects"\n    GitConfig\n\n    "General information like description"\n    Info\n\n    "Code dependency information"\n    CodeDeps\n\n    "Lineage Branch information"\n    LineageBranch\n\n    "Lineage"\n    Lineage\n\n    "Lineage Release information"\n    LineageRelease\n\n    "Lineage Commit information"\n    LineageCommit\n\n    "Cluster information"\n    ClusterInfo\n\n    "User fabric info for all fabrics"\n    UserAllFabricInfo\n\n    "Job Deployment Airflow Info"\n    JobDeploymentAirflowInfo\n\n    "ExpressionInfo"\n    ExpressionsInfo\n\n    "Databricks Deployment"\n    DatabricksDeployment\n\n    "Run Info"\n    RunInfo\n\n    "Transpiler Import Input Info"\n    InputInfo\n\n    "Transpiler Import Output Pipeline Info"\n    OutputInfo\n\n    "Snapshot of entity at a point in time"\n    Snapshot\n\n    "Detailed information for datasets in Pipeline Runs"\n    DatasetDetails\n\n    "Interim content for a dataset"\n    Interim\n\n    "Partner Info aspect"\n    PartnerInfo\n\n    "Resolution Mode for library"\n    ResolutionModeInfo\n\n    "Admin level information for an entity"\n    AdminInfo\n}\n')),(0,o.kt)("h2",{id:"sectiontype"},"SectionType"),(0,o.kt)("p",null,"SelectionType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum SectionType{\n    "EntityAndAspects"\n    EntityAndAspects\n\n    "Author"\n    Author\n\n    "Team"\n    Team\n\n    "Project"\n    Project\n\n    "Recency"\n    Recency\n}\n')),(0,o.kt)("h2",{id:"itemselectiontype"},"ItemSelectionType"),(0,o.kt)("p",null,"ItemSelectionType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum ItemSelectionType {\n    AtMostOne\n    ExactlyOne\n    Many\n}\n")),(0,o.kt)("h2",{id:"datasettype"},"DatasetType"),(0,o.kt)("p",null,"Supported Dataset types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum DatasetType {\n    File\n    Database\n    Stream\n    TestData\n    Warehouse\n    Table\n}\n")),(0,o.kt)("h2",{id:"entitykind"},"EntityKind"),(0,o.kt)("p",null,"Supported entity types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum EntityKind {\n    "Deployment Entity"\n    Deployment\n\n    "Repository Entity"\n    Repository\n\n    "Team Entity"\n    Team\n\n    "Dataset Entity"\n    Dataset\n\n    "Schedule Entity - renamed to Job"\n    Schedule\n\n    "Job Entity"\n    Job\n\n    "PhysicalDataset Entity"\n    PhysicalDataset\n\n    "Workflow Entity - renamed to Pipeline"\n    Workflow\n\n    "Pipeline Entity"\n    Pipeline\n\n    "Project Entity"\n    Project\n\n    "Subgraph Entity"\n    Subgraph\n\n    "Configuration Entity"\n    Configuration\n\n    "PipelineConfigurations Entity"\n    PipelineConfigurations\n\n    "User Entity"\n    User\n\n    "Fabric Entity"\n    Fabric\n\n    "Library Entity"\n    Library\n\n    "Gem Entity"\n    Gem\n\n    "Udf Entity"\n    Udf\n\n    "Udaf Entity"\n    Udaf\n\n    "Expression Entity"\n    Expression\n\n    "Dependency Entity"\n    Dependency\n\n    "ProjectRelease Entity"\n    ProjectRelease\n\n    "JobRelease Entity"\n    JobRelease\n\n    "TranspilerImport Entity"\n    TranspilerImport\n\n    "Template Entity"\n    Template\n\n}\n')),(0,o.kt)("h2",{id:"commitlogentitymutationtype"},"CommitLogEntityMutationType"),(0,o.kt)("p",null,"Supported Commit Log Mutation Type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum CommitLogEntityMutationType {\n    "New Mutation"\n    New\n\n    "Modified Mutation"\n    Modified\n\n    "Deleted Mutation"\n    Deleted\n}\n')),(0,o.kt)("h2",{id:"forkmode"},"ForkMode"),(0,o.kt)("p",null,"Forking Modes for Git Repo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum ForkMode {\n    Multi\n    Single\n}\n")),(0,o.kt)("h2",{id:"forktype"},"ForkType"),(0,o.kt)("p",null,"Type of fork of the repository ","[Master / User]"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum ForkType {\n    Master\n    User\n}\n")),(0,o.kt)("h2",{id:"role"},"Role"),(0,o.kt)("p",null,"User role in team"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum Role{\n    owner,\n    admin,\n    member\n}\n")),(0,o.kt)("h2",{id:"resolutionstrategy"},"ResolutionStrategy"),(0,o.kt)("p",null,"Supported resolution types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum ResolutionStrategy {\n    LeftBranch\n    RightBranch\n}\n")),(0,o.kt)("h2",{id:"remotetype"},"RemoteType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum RemoteType {\n    Local\n    Upstream\n    Origin\n}\n")),(0,o.kt)("h2",{id:"syncmode"},"SyncMode"),(0,o.kt)("p",null,"Project's Git Repos Syncing Modes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum SyncMode {\n    External\n    Internal\n}\n")),(0,o.kt)("h2",{id:"useraccounttype"},"UserAccountType"),(0,o.kt)("p",null,"Type of User's Account"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum UserAccountType {\n    "Licensed Account for SaSS User"\n    CeLicenseAcquired\n\n    "The Default Account for User"\n    Enterprise\n\n    "A user coming from AWS"\n    AwsMarketplace\n\n    "A user coming from Azure"\n    AzureMarketplace\n\n    "Free Account for SaSS User"\n    CeFree\n\n    "A user coming from Databricks Partner Hub"\n    DatabricksPartner\n\n    "A user which is on Enterprise Trial"\n    EnterpriseTrial\n\n    "A user to manage Prophecy cluster"\n    ClusterAdmin\n\n    "A support user to manage Prophecy IDE"\n    Support\n}\n')),(0,o.kt)("h2",{id:"usermanagedtype"},"UserManagedType"),(0,o.kt)("p",null,"The user managed type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum UserManagedType {\n    "The prophecy managed user type"\n    ProphecyManaged\n\n    "The LDAP managed user type"\n    Ldap\n\n    "The SAML managed user type"\n    Saml\n\n    "The AzureAD managed user type"\n    AzureAd\n\n    "The Google managed user type"\n    Google\n}\n')),(0,o.kt)("h2",{id:"scheduler"},"Scheduler"),(0,o.kt)("p",null,"Scheduler Enum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum Scheduler {\n\n    "Amazon Managed Workflows for Apache Airflow"\n    MWAA\n\n    "Astronomer - Airflow"\n    Astronomer\n\n    "Databricks Jobs"\n    Databricks\n}\n')),(0,o.kt)("h2",{id:"cloudprovider"},"CloudProvider"),(0,o.kt)("p",null,"Cloud Provider Enum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum CloudProvider {\n\n    "Amazon Web Services"\n    AWS\n\n    "Microsoft Azure"\n    Azure\n\n    "Google Cloud Provider"\n    GCP\n}\n')),(0,o.kt)("h2",{id:"status"},"Status"),(0,o.kt)("p",null,"Release Status enum"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'enum Status {\n\n    "Pending, Not Started"\n    Pending\n\n    "RUNNING"\n    Running\n\n    "Succeeded"\n    Succeeded\n\n    "Retrying"\n    Retrying\n\n    "Failed"\n    Failed\n}\n')),(0,o.kt)("h2",{id:"teamkind"},"TeamKind"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"enum TeamKind {\n    ProphecyManaged,\n    IdpOrganizationWide,\n    IdpGroup\n}\n")))}s.isMDXComponent=!0}}]);