"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[1634],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),y=r,m=u["".concat(i,".").concat(y)]||u[y]||d[y]||s;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=y;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>l});var a=n(96540),r=n(20053);const s={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,l),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>k});var a=n(58168),r=n(96540),s=n(20053),l=n(23104),o=n(56347),i=n(57485),p=n(31682),c=n(89466);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function y(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!y({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[i,p]=m({queryString:n,groupId:a}),[u,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),b=(()=>{const e=i??u;return y({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!y({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),f(e)}),[p,f,s]),tabValues:s}}var b=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:o,selectValue:i,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==o&&(u(t),i(a))},y=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:y,onClick:d},l,{className:(0,s.A)("tabs__item",g.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function _(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=f(e);return r.createElement("div",{className:(0,s.A)("tabs-container",g.tabList)},r.createElement(h,(0,a.A)({},e,t)),r.createElement(_,(0,a.A)({},e,t)))}function k(e){const t=(0,b.A)();return r.createElement(v,(0,a.A)({key:String(t)},e))}},50728:(e,t,n)=>{n.d(t,{A:()=>r});var a=n(96540);function r(e){return a.createElement("div",null,e.python_package_name&&e.python_package_version&&a.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},a.createElement("span",{className:"badge-dependency"},a.createElement("span",{className:"left"},e.python_package_name),a.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&a.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},a.createElement("span",{className:"badge-dependency"},a.createElement("span",{className:"left"},e.scala_package_name),a.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&a.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},a.createElement("span",{className:"badge-dependency"},a.createElement("span",{className:"left"},"ProphecyLibsPython"),a.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&a.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},a.createElement("span",{className:"badge-dependency"},a.createElement("span",{className:"left"},"ProphecyLibsScala"),a.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&a.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},a.createElement("span",{className:"badge-spark"},a.createElement("span",{className:"left"},"Databricks UC Single Cluster"),a.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&a.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},a.createElement("span",{className:"badge-spark"},a.createElement("span",{className:"left"},"Databricks UC Shared"),a.createElement("span",{className:"right"},e.uc_shared))),e.livy&&a.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},a.createElement("span",{className:"badge-spark"},a.createElement("span",{className:"left"},"Livy"),a.createElement("span",{className:"right"},e.livy))),a.createElement("br",null),a.createElement("br",null))}},38035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var a=n(58168),r=(n(96540),n(15680)),s=n(50728),l=n(11470),o=n(19365);const i={title:"FileOperation",id:"file-operations",description:"Perform file operations on different file systems",tags:["file","dbfs"]},p=void 0,c={unversionedId:"Spark/gems/custom/file-operations",id:"Spark/gems/custom/file-operations",title:"FileOperation",description:"Perform file operations on different file systems",source:"@site/docs/Spark/gems/custom/file-operation.md",sourceDirName:"Spark/gems/custom",slug:"/Spark/gems/custom/file-operations",permalink:"/Spark/gems/custom/file-operations",draft:!1,tags:[{label:"file",permalink:"/tags/file"},{label:"dbfs",permalink:"/tags/dbfs"}],version:"current",frontMatter:{title:"FileOperation",id:"file-operations",description:"Perform file operations on different file systems",tags:["file","dbfs"]},sidebar:"mySidebar",previous:{title:"DeltaTableOperations",permalink:"/Spark/gems/custom/delta-ops"},next:{title:"RestAPIEnrich",permalink:"/Spark/gems/custom/rest-api-enrich"}},u={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Copy Single File",id:"copy-single-file",level:3},{value:"Copy All Files From A Directory",id:"copy-all-files-from-a-directory",level:3},{value:"Move Files",id:"move-files",level:3},{value:"S3 - Sync Entire Directory",id:"s3---sync-entire-directory",level:3}],y={toc:d},m="wrapper";function f(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(s.A,{python_package_name:"",python_package_version:"",scala_package_name:"",scala_package_version:"",scala_lib:"",python_lib:"",uc_single:"Not Supported",uc_shared:"Not Supported",livy:"Not Supported",mdxType:"Requirements"}),(0,r.yg)("p",null,"Helps perform file operations like ",(0,r.yg)("inlineCode",{parentName:"p"},"copy")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"move")," on different file systems."),(0,r.yg)("h2",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Required"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"File System"),(0,r.yg)("td",{parentName:"tr",align:"left"},(0,r.yg)("inlineCode",{parentName:"td"},"Local")," - for operations on driver node file system ",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"DBFS")," - for operations on Databricks file system ",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},"S3")," - for operations on S3 object store"),(0,r.yg)("td",{parentName:"tr",align:"left"},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Operation"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Operation to perform, ",(0,r.yg)("inlineCode",{parentName:"td"},"Copy"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"Move")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"Sync")),(0,r.yg)("td",{parentName:"tr",align:"left"},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Filename Regex"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Regex to Filter File Names Eg: stdlog.","*",".","txt"),(0,r.yg)("td",{parentName:"tr",align:"left"},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Ignore empty files"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Ignore if file size is empty (Size of file is 0 bytes)"),(0,r.yg)("td",{parentName:"tr",align:"left"},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Recurse"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Boolean for performing ",(0,r.yg)("inlineCode",{parentName:"td"},"Operation")," recursively. Default is ",(0,r.yg)("inlineCode",{parentName:"td"},"False")),(0,r.yg)("td",{parentName:"tr",align:"left"},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Source Path"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Path of source file/directory. ",(0,r.yg)("br",null),"Eg: /dbfs/source_file.txt, dbfs:/source_file.txt, s3://source_bucket/source_prefix/filename.txt"),(0,r.yg)("td",{parentName:"tr",align:"left"},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"Destination Path"),(0,r.yg)("td",{parentName:"tr",align:"left"},"Path of destination file/directory. ",(0,r.yg)("br",null)," Eg: /dbfs/target_file.txt, dbfs:/target_file.txt, s3://target_bucket/target_prefix/filename.txt"),(0,r.yg)("td",{parentName:"tr",align:"left"},"True")))),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"You can perform operations on DBFS files using ",(0,r.yg)("inlineCode",{parentName:"p"},"Local")," file system too by providing path under ",(0,r.yg)("inlineCode",{parentName:"p"},"/dbfs"),"!",(0,r.yg)("br",null)," This is because Databricks uses a FUSE mount to provide local access to the files stored in the cloud. A FUSE mount is a secure, virtual filesystem.")),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"copy-single-file"},"Copy Single File"),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://github.com/SimpleDataLabsInc/prophecy-docs/assets/130362885/6db06ea9-27ef-4833-a837-a49adf3ff2c6",title:"File Copy single file",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"DBFS",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def copy_file(spark: SparkSession):\n    from pyspark.dbutils import DBUtils\n    DBUtils(spark).fs.cp(\n        "dbfs:/Prophecy/example/source/person.json",\n        "dbfs:/Prophecy/example/target/person.json",\n        recurse = False\n    )\n'))),(0,r.yg)(o.A,{value:"py2",label:"Local",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def copy_file(spark: SparkSession):\n    import os\n    import shutil\n    shutil.copy2("/dbfs/Prophecy/example/source/person.json",\n                 "/dbfs/Prophecy/example/target/person.json")\n'))),(0,r.yg)(o.A,{value:"py3",label:"S3",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"def copy_file(spark: SparkSession):\n    for obj in boto3.client(\"s3\").list_objects_v2(Bucket = src_bucket, Prefix = src_url.path.lstrip('/'))['Contents']:\n        new_dest_prefix = re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n\n        if (\n            (\n              mode in [\"copy\", \"move\"]\n              and not obj['Key'].endswith(\"/\")\n            )\n            or (\n              not obj['Key'].endswith(\"/\")\n              and mode == \"sync\"\n              and re.sub(src_prefix, dest_prefix, obj['Key'], 1) not in dest_files\n            )\n        ):\n\n            if (\n                (\n                  bool(ignoreEmptyFiles) == True\n                  and (\n                    s3.head_object(Bucket=src_bucket, Key=obj['Key'])['ContentLength']\n                    == 0\n                  )\n                )\n                or (\n                  bool(fileRegex)\n                  and fileRegex != \"\"\n                  and not bool(\n                    re.compile(fileRegex).match(obj['Key'].split('/')[- 1])\n                  )\n                )\n            ):\n                continue\n\n            s3.copy(\n                {'Bucket' : src_bucket, 'Key' : obj['Key']},\n                dest_bucket,\n                re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n            )\n\n            if props.operation == \"move\":\n                s3.delete_object(Bucket = src_bucket, Key = obj['Key'])\n\n")))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"copy-all-files-from-a-directory"},"Copy All Files From A Directory"),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://github.com/SimpleDataLabsInc/prophecy-docs/assets/130362885/107a8195-e76a-48ab-900f-28e07b7798ed",title:"File Copy a directory",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"DBFS",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def copy_file(spark: SparkSession):\n    from pyspark.dbutils import DBUtils\n    DBUtils(spark).fs.cp(\n        "dbfs:/Prophecy/example/source/",\n        "dbfs:/Prophecy/example/target/",\n        recurse = True\n    )\n'))),(0,r.yg)(o.A,{value:"py2",label:"Local",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def copy_file(spark: SparkSession):\n    import os\n    import shutil\n    shutil.copytree(\n        "/dbfs/Prophecy/example/source/",\n        "/dbfs/Prophecy/example/target/",\n        copy_function = shutil.copy2,\n        dirs_exist_ok = True\n    )\n'))),(0,r.yg)(o.A,{value:"py3",label:"S3",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"def copy_file(spark: SparkSession):\n    for obj in boto3.client(\"s3\").list_objects_v2(Bucket = src_bucket, Prefix = src_url.path.lstrip('/'))['Contents']:\n        new_dest_prefix = re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n\n        if (\n            (\n              mode in [\"copy\", \"move\"]\n              and not obj['Key'].endswith(\"/\")\n            )\n            or (\n              not obj['Key'].endswith(\"/\")\n              and mode == \"sync\"\n              and re.sub(src_prefix, dest_prefix, obj['Key'], 1) not in dest_files\n            )\n        ):\n\n            if (\n                (\n                  bool(ignoreEmptyFiles) == True\n                  and (\n                    s3.head_object(Bucket=src_bucket, Key=obj['Key'])['ContentLength']\n                    == 0\n                  )\n                )\n                or (\n                  bool(fileRegex)\n                  and fileRegex != \"\"\n                  and not bool(\n                    re.compile(fileRegex).match(obj['Key'].split('/')[- 1])\n                  )\n                )\n            ):\n                continue\n\n            s3.copy(\n                {'Bucket' : src_bucket, 'Key' : obj['Key']},\n                dest_bucket,\n                re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n            )\n\n            if props.operation == \"move\":\n                s3.delete_object(Bucket = src_bucket, Key = obj['Key'])\n\n")))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"move-files"},"Move Files"),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://github.com/SimpleDataLabsInc/prophecy-docs/assets/130362885/6bbd4a4e-2b6a-4cf6-bb07-0712f6720650",title:"Move File",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"DBFS",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def move_file(spark: SparkSession):\n    from pyspark.dbutils import DBUtils\n    DBUtils(spark).fs.mv("dbfs:/Prophecy/example/source/", "dbfs:/Prophecy/example/target/", recurse = False)\n\n'))),(0,r.yg)(o.A,{value:"py2",label:"Local",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def move_file(spark: SparkSession):\n    import os\n    import shutil\n    shutil.copy2("/Prophecy/example/source/", "/Prophecy/example/target/")\n    shutil.rmtree("/Prophecy/example/source/")\n'))),(0,r.yg)(o.A,{value:"py3",label:"S3",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},"def move_file(spark: SparkSession):\n    for obj in boto3.client(\"s3\").list_objects_v2(Bucket = src_bucket, Prefix = src_url.path.lstrip('/'))['Contents']:\n        new_dest_prefix = re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n\n        if (\n            (\n              mode in [\"copy\", \"move\"]\n              and not obj['Key'].endswith(\"/\")\n            )\n            or (\n              not obj['Key'].endswith(\"/\")\n              and mode == \"sync\"\n              and re.sub(src_prefix, dest_prefix, obj['Key'], 1) not in dest_files\n            )\n        ):\n\n            if (\n                (\n                  bool(ignoreEmptyFiles) == True\n                  and (\n                    s3.head_object(Bucket=src_bucket, Key=obj['Key'])['ContentLength']\n                    == 0\n                  )\n                )\n                or (\n                  bool(fileRegex)\n                  and fileRegex != \"\"\n                  and not bool(re.compile(fileRegex).match(obj['Key'].split('/')[- 1]))\n                )\n            ):\n                continue\n\n            s3.copy(\n                {'Bucket' : src_bucket, 'Key' : obj['Key']},\n                dest_bucket,\n                re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n            )\n\n            if mode == \"move\":\n                s3.delete_object(Bucket = src_bucket, Key = obj['Key'])\n\n\n")))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"s3---sync-entire-directory"},"S3 - Sync Entire Directory"),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://github.com/SimpleDataLabsInc/prophecy-docs/assets/130362885/2e579779-3d61-476d-9f04-38f687c96ebf",title:"S3 File Sync",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.yg)(l.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"S3",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"def sync_file(spark: SparkSession):\n    dest_files = set(\n        [\n          f_object['Key'].lstrip('/')\n          for f_object in boto3.client(\"s3\").list_objects_v2(Bucket = dest_bucket, Prefix = dest_url.path.lstrip('/'))['Contents']\n          if not f_object['Key'].endswith(\"/\")\n        ]\n    )\n\n    for obj in boto3.client(\"s3\").list_objects_v2(Bucket = src_bucket, Prefix = src_url.path.lstrip('/'))['Contents']:\n        new_dest_prefix = re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n\n        if (\n            (\n              mode in [\"copy\", \"move\"]\n              and not obj['Key'].endswith(\"/\")\n            )\n            or (\n              not obj['Key'].endswith(\"/\")\n              and mode == \"sync\"\n              and re.sub(src_prefix, dest_prefix, obj['Key'], 1) not in dest_files\n            )\n        ):\n\n            if (\n                (\n                  bool(ignoreEmptyFiles) == True\n                  and (\n                    s3.head_object(Bucket=src_bucket, Key=obj['Key'])['ContentLength']\n                    == 0\n                  )\n                )\n                or (\n                  bool(fileRegex)\n                  and fileRegex != \"\"\n                  and not bool(re.compile(fileRegex).match(obj['Key'].split('/')[- 1]))\n                )\n            ):\n                continue\n\n            s3.copy(\n                {'Bucket' : src_bucket, 'Key' : obj['Key']},\n                dest_bucket,\n                re.sub(src_prefix, dest_prefix, obj['Key'], 1)\n            )\n\n            if mode == \"move\":\n                s3.delete_object(Bucket = src_bucket, Key = obj['Key'])\n\n")))),(0,r.yg)("hr",null))}f.isMDXComponent=!0}}]);