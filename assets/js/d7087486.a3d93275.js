"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[18755],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),y=a,g=m["".concat(i,".").concat(y)]||m[y]||c[y]||l;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=y;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const l={sidebar_position:11,title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once.",tags:["gems","type","columns"]},o=void 0,s={unversionedId:"Spark/gems/transform/bulk-column-expressions",id:"Spark/gems/transform/bulk-column-expressions",title:"BulkColumnExpressions",description:"Change the data type of multiple columns at once.",source:"@site/docs/Spark/gems/transform/bulk-column-expressions.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/bulk-column-expressions",permalink:"/Spark/gems/transform/bulk-column-expressions",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"type",permalink:"/tags/type"},{label:"columns",permalink:"/tags/columns"}],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once.",tags:["gems","type","columns"]},sidebar:"defaultSidebar",previous:{title:"BulkColumnRename",permalink:"/Spark/gems/transform/bulk-column-rename"},next:{title:"DataCleansing",permalink:"/Spark/gems/transform/data-cleansing"}},i={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2}],u={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The BulkColumnExpressions Gem primarily lets you cast or change the data type of multiple columns at once. It provides additional functionality, including:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Adding a prefix or suffix to selected columns."),(0,a.yg)("li",{parentName:"ul"},"Applying a custom expression to selected columns.")),(0,a.yg)("h2",{id:"parameters"},"Parameters"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Data Type of the columns to do operations on"),(0,a.yg)("td",{parentName:"tr",align:null},"The data type of columns to select.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Selected Columns"),(0,a.yg)("td",{parentName:"tr",align:null},"The columns on which to apply transformations")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Change output column name"),(0,a.yg)("td",{parentName:"tr",align:null},"An option to add a prefix or suffix to the selected column names")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Change output column type"),(0,a.yg)("td",{parentName:"tr",align:null},"The data type that the columns will be transformed into")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Output Expression"),(0,a.yg)("td",{parentName:"tr",align:null},"A Spark SQL expression that can be applied to the selected columns")))),(0,a.yg)("h2",{id:"example"},"Example"),(0,a.yg)("p",null,"Assume you have some columns in a table that represent zero-based indices and are stored as long data types. You want them to represent one-based indices and be stored as integers to optimize memory use."),(0,a.yg)("p",null,"Using the BulkColumnExpressions Gem, you can:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Filter your columns by long data types."),(0,a.yg)("li",{parentName:"ul"},"Select the columns you wish to transform."),(0,a.yg)("li",{parentName:"ul"},"Cast the output column(s) to be integers."),(0,a.yg)("li",{parentName:"ul"},"Include ",(0,a.yg)("inlineCode",{parentName:"li"},"column_value + 1")," in the expression field to shift the indices.")))}c.isMDXComponent=!0}}]);