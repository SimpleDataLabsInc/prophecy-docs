"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[59486],{15680:(e,a,t)=>{t.d(a,{xA:()=>i,yg:()=>y});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=r.createContext({}),p=function(e){var a=r.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},i=function(e){var a=p(e.components);return r.createElement(o.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),m=p(t),g=n,y=m["".concat(o,".").concat(g)]||m[g]||u[g]||s;return t?r.createElement(y,l(l({ref:a},i),{},{components:t})):r.createElement(y,l({ref:a},i))}));function y(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,l=new Array(s);l[0]=g;var c={};for(var o in a)hasOwnProperty.call(a,o)&&(c[o]=a[o]);c.originalType=e,c[m]="string"==typeof e?e:n,l[1]=c;for(var p=2;p<s;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},50728:(e,a,t)=>{t.d(a,{A:()=>n});var r=t(96540);function n(e){return r.createElement("div",null,e.python_package_name&&e.python_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.python_package_name),r.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.scala_package_name),r.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsPython"),r.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsScala"),r.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Single Cluster"),r.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Shared"),r.createElement("span",{className:"right"},e.uc_shared))),e.livy&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Livy"),r.createElement("span",{className:"right"},e.livy))),r.createElement("br",null),r.createElement("br",null))}},38680:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>i});var r=t(58168),n=(t(96540),t(15680)),s=t(50728);const l={title:"ColumnParser",id:"column-parser",description:"Parse XML or JSON inside a table",tags:["gems","transform","parse"]},c=void 0,o={unversionedId:"Spark/gems/transform/column-parser",id:"Spark/gems/transform/column-parser",title:"ColumnParser",description:"Parse XML or JSON inside a table",source:"@site/docs/Spark/gems/transform/column-parser.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/column-parser",permalink:"/Spark/gems/transform/column-parser",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"transform",permalink:"/tags/transform"},{label:"parse",permalink:"/tags/parse"}],version:"current",frontMatter:{title:"ColumnParser",id:"column-parser",description:"Parse XML or JSON inside a table",tags:["gems","transform","parse"]},sidebar:"mySidebar",previous:{title:"BulkColumnRename",permalink:"/Spark/gems/transform/bulk-column-rename"},next:{title:"DataCleansing",permalink:"/Spark/gems/transform/data-cleansing"}},p={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Output",id:"output",level:2}],m={toc:i},u="wrapper";function g(e){let{components:a,...l}=e;return(0,n.yg)(u,(0,r.A)({},m,l,{components:a,mdxType:"MDXLayout"}),(0,n.yg)(s.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.2.27+",scala_package_name:"",scala_package_version:"",scala_lib:"8.2.1",python_lib:"1.9.16",uc_single:"14.3+",uc_shared:"14.3+",livy:"Not Supported",mdxType:"Requirements"}),(0,n.yg)("p",null,"The ColumnParser lets you parse XML or JSON that is included in a column of your table."),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Source Column Name"),(0,n.yg)("td",{parentName:"tr",align:null},"The name of the column that contains the XML or JSON records.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Parser Type"),(0,n.yg)("td",{parentName:"tr",align:null},"The format that you want to be parsed (XML or JSON).")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Parsing Method"),(0,n.yg)("td",{parentName:"tr",align:null},"The method that Prophecy will use to generate the schema of the output.")))),(0,n.yg)("p",null,"When you select a parsing method, you have three options:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse automatically.")," Prophecy infers the schema by reading the first 40 records."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse from sample record.")," Prophecy uses the schema that you provide in the sample record."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse from schema.")," Prophecy uses the schema that you provide in the form of a schema struct.")),(0,n.yg)("h2",{id:"output"},"Output"),(0,n.yg)("p",null,"The schema of the ColumnParser gem output includes the parsed content as a ",(0,n.yg)("strong",{parentName:"p"},"struct")," data type, in addition to all of the input columns."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"New output struct",src:t(30348).A,width:"2620",height:"1508"})))}g.isMDXComponent=!0},30348:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/new-output-struct-3ce5e9c0d51e7c9aa09b4c45cb8bf45c.png"}}]);