"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[34088],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>g});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(a),u=n,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||l;return a?r.createElement(g,o(o({ref:t},c),{},{components:a})):r.createElement(g,o({ref:t},c))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:n,o[1]=i;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>o});var r=a(96540),n=a(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.A)(l.tabItem,o),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>w});var r=a(58168),n=a(96540),l=a(20053),o=a(23104),i=a(56347),s=a(57485),p=a(31682),c=a(89466);function m(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function d(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,p.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function u(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const r=(0,i.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=d(e),[o,i]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[s,p]=g({queryString:a,groupId:r}),[m,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,c.Dv)(a);return[r,(0,n.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:r}),f=(()=>{const e=s??m;return u({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!u({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),y(e)}),[p,y,l]),tabValues:l}}var f=a(92303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.a_)(),d=e=>{const t=e.currentTarget,a=c.indexOf(t),r=p[a].value;r!==i&&(m(t),s(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:d},o,{className:(0,l.A)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":i===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:r}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function v(e){const t=y(e);return n.createElement("div",{className:(0,l.A)("tabs-container",h.tabList)},n.createElement(b,(0,r.A)({},e,t)),n.createElement(N,(0,r.A)({},e,t)))}function w(e){const t=(0,f.A)();return n.createElement(v,(0,r.A)({key:String(t)},e))}},50728:(e,t,a)=>{a.d(t,{A:()=>n});var r=a(96540);function n(e){return r.createElement("div",null,e.python_package_name&&e.python_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.python_package_name),r.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},e.scala_package_name),r.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsPython"),r.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&r.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},r.createElement("span",{className:"badge-dependency"},r.createElement("span",{className:"left"},"ProphecyLibsScala"),r.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Single Cluster"),r.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Databricks UC Shared"),r.createElement("span",{className:"right"},e.uc_shared))),e.livy&&r.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},r.createElement("span",{className:"badge-spark"},r.createElement("span",{className:"left"},"Livy"),r.createElement("span",{className:"right"},e.livy))),r.createElement("br",null),r.createElement("br",null))}},39146:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>y,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=a(58168),n=(a(96540),a(15680)),l=a(50728),o=a(11470),i=a(19365);const s={title:"Fixed Format",id:"fixed-format",description:"Parameters and properties to read from and write to Fixed Format files",tags:["gems","file","fixed-format"]},p=void 0,c={unversionedId:"Spark/gems/source-target/file/fixed-format",id:"Spark/gems/source-target/file/fixed-format",title:"Fixed Format",description:"Parameters and properties to read from and write to Fixed Format files",source:"@site/docs/Spark/gems/source-target/file/fixed-format.md",sourceDirName:"Spark/gems/source-target/file",slug:"/Spark/gems/source-target/file/fixed-format",permalink:"/Spark/gems/source-target/file/fixed-format",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"fixed-format",permalink:"/tags/fixed-format"}],version:"current",frontMatter:{title:"Fixed Format",id:"fixed-format",description:"Parameters and properties to read from and write to Fixed Format files",tags:["gems","file","fixed-format"]},sidebar:"mySidebar",previous:{title:"Delta",permalink:"/Spark/gems/source-target/file/delta"},next:{title:"JSON",permalink:"/Spark/gems/source-target/file/json"}},m={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source Properties",id:"source-properties",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Properties",id:"target-properties",level:3},{value:"Supported write modes",id:"supported-write-modes",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3}],u={toc:d},g="wrapper";function y(e){let{components:t,...s}=e;return(0,n.yg)(g,(0,r.A)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,n.yg)(l.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"Not Supported",livy:"Not Supported",mdxType:"Requirements"}),(0,n.yg)("admonition",{title:"Enterprise Only",type:"caution"},(0,n.yg)("p",{parentName:"admonition"},"To learn more about our Enterprise offering, please ",(0,n.yg)("a",{parentName:"p",href:"https://www.prophecy.io/request-a-demo"},"contact us"),".")),(0,n.yg)("p",null,"A Fixed Format (Fixed-Length Format) file type:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Is a text file where each field or column occupies a predetermined, constant number of characters in each record."),(0,n.yg)("li",{parentName:"ul"},"Can parse and process quickly because the software knows exactly where to find each field."),(0,n.yg)("li",{parentName:"ul"},"Is often used in legacy systems, data exchange, and performance-critical applications.")),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Tab"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"File path to read from or write to the Fixed Format file.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Properties"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema to apply on the loaded data.",(0,n.yg)("br",null),"In the Source gem, you can define or edit the schema visually or in JSON code.",(0,n.yg)("br",null),"In the Target gem, you can view the schema visually or as JSON code.")))),(0,n.yg)("h2",{id:"source"},"Source"),(0,n.yg)("p",null,"The Source gem reads data from Fixed Format files and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"source-properties"},"Source Properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Description"),(0,n.yg)("td",{parentName:"tr",align:null},"Description of your dataset."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Skip header lines"),(0,n.yg)("td",{parentName:"tr",align:null},"Number of lines to skip at the beginning of the file."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Skip footer lines"),(0,n.yg)("td",{parentName:"tr",align:null},"Number of lines to skip at the end of the file."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Fixed Format Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema string for the fixed format file. ",(0,n.yg)("br",null),"Supports either EBCDIC or ASCII formats."),(0,n.yg)("td",{parentName:"tr",align:null},"None")))),(0,n.yg)("h3",{id:"source-example"},"Example"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Fixed format source example",src:a(45424).A,width:"1183",height:"672"})),(0,n.yg)("h3",{id:"source-code"},"Generated Code"),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(i.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def read_ebcdic(spark: SparkSession) -> DataFrame:\n    from prophecy.utils.transpiler import parse\n\n    return spark.read\\\n        .option("schema", parse("ebcdic record\\nstring(18) c_name;\\ndecimal(10, 0) c_custkey ;\\nend"))\\\n        .format("io.prophecy.libs.FixedFileFormat")\\\n        .load("/FileStore/tables/fixed_format/test/read_ebcdic")\n\n'))),(0,n.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object ReadEbcdic {\n\n  def apply(spark: SparkSession): DataFrame = {\n    import _root_.io.prophecy.abinitio.dml.DMLSchema.parse\n    import _root_.io.prophecy.libs.{FFSchemaRecord, _}\n    import play.api.libs.json.Json\n    import _root_.io.prophecy.libs.FixedFormatSchemaImplicits._\n    spark.read\n      .option(\n        "schema",\n        Some("""ebcdic record\n                string(6) service ;\n                string(2) person ;\n                decimal(2, 0) data ;\n                string(1) format ;\n                string(1) working ;\n                end""").map(s => parse(s).asInstanceOf[FFSchemaRecord])\n                          .map(s => Json.stringify(Json.toJson(s)))\n                          .getOrElse("")\n      )\n      .format("io.prophecy.libs.FixedFileFormat")\n      .load("/FileStore/tables/fixed_format/test/write_ebcdic")\n      .cache()\n  }\n\n}\n')))),(0,n.yg)("hr",null),(0,n.yg)("h2",{id:"target"},"Target"),(0,n.yg)("p",null,"The Target gem writes data to Fixed Format files and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"target-properties"},"Target Properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Write Mode"),(0,n.yg)("td",{parentName:"tr",align:null},"How to handle existing data. For a list of the possible values, see ",(0,n.yg)("a",{parentName:"td",href:"#supported-write-modes"},"Supported write modes"),"."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"error"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Description"),(0,n.yg)("td",{parentName:"tr",align:null},"Description of your dataset."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Fixed Format Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema string for the fixed format file. ",(0,n.yg)("br",null),"Supports either EBCDIC or ASCII formats."),(0,n.yg)("td",{parentName:"tr",align:null},"None")))),(0,n.yg)("h3",{id:"supported-write-modes"},"Supported write modes"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Write mode"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"error"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, throw an exception.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"overwrite"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, overwrite the data with the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),".")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"append"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, append the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),".")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"ignore"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, do nothing with the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),". ",(0,n.yg)("br",null),"This is similar to the ",(0,n.yg)("inlineCode",{parentName:"td"},"CREATE TABLE IF NOT EXISTS")," clause in SQL.")))),(0,n.yg)("h3",{id:"target-example"},"Example"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Fixed format target Example",src:a(28504).A,width:"894",height:"470"})),(0,n.yg)("h3",{id:"target-code"},"Generated Code"),(0,n.yg)("admonition",{type:"tip"},(0,n.yg)("p",{parentName:"admonition"},"To see the generated source code of your project, ",(0,n.yg)("a",{parentName:"p",href:"/getting-started/tutorials/spark-with-databricks#review-the-code"},"switch to the Code view")," in the project header.")),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(i.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def write_ebcdic(spark: SparkSession, in0: DataFrame):\n    from prophecy.utils.transpiler import parse\n    in0.write\\\n        .mode("overwrite")\\\n        .option("schema", parse("ebcdic record\\nstring(18) c_name ;\\ndecimal(10, 0) c_custkey ;\\nend"))\\\n        .format("io.prophecy.libs.FixedFileFormat")\\\n        .save("/FileStore/tables/fixed_format/test/write_ebcdic_alt")\n'))),(0,n.yg)(i.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object write_ebcdic {\n\n  def apply(spark: SparkSession, in: DataFrame): Unit = {\n    import _root_.io.prophecy.abinitio.dml.DMLSchema.parse\n    import _root_.io.prophecy.libs.{FFSchemaRecord, _}\n    import play.api.libs.json.Json\n    import _root_.io.prophecy.libs.FixedFormatSchemaImplicits._\n    val schema = Some("""ebcdic record\n                            string(6) service ;\n                            string(2) person ;\n                            decimal(2, 0) data ;\n                            string(1) format ;\n                            string(1) working ;\n                            end""").map(s => parse(s).asInstanceOf[FFSchemaRecord])\n    var writer = in.write.format("io.prophecy.libs.FixedFileFormat")\n    writer = writer.mode("overwrite")\n    schema\n      .map(s => Json.stringify(Json.toJson(s)))\n      .foreach(schema => writer = writer.option("schema", schema))\n    writer.save("/FileStore/tables/fixed_format/test/write_ebcdic_alt")\n  }\n\n}\n')))))}y.isMDXComponent=!0},45424:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ff-source-small-3b13c691a868ae9789a145fe6cd1157e.gif"},28504:(e,t,a)=>{a.d(t,{A:()=>r});const r=a.p+"assets/images/ff-target-small-4279378adafa421862f32729ff6b7cf5.gif"}}]);