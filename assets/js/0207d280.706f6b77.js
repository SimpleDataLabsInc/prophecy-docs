"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[29324],{6211:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_add_exp-9b144921f044f3a1ad68091d823283a1.gif"},16464:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_gem-088dcb90a9e1679a18b6f2497692a93b.png"},28453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var a=t(96540);const n={},i=a.createContext(n);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:s},e.children)}},29081:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_input-252ad05824ac1130f88196d0d1132dde.png"},30856:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_input_interim-895ec66b9df67847cfb7df93737c7236.png"},49235:(e,s,t)=>{t.d(s,{A:()=>n});t(96540);var a=t(74848);function n(e){return(0,a.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.python_package_name," ",e.python_package_version]})}),e.scala_package_name&&e.scala_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.scala_package_name," ",e.scala_package_version]})}),e.python_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsPython ",e.python_lib]})}),e.scala_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsScala ",e.scala_lib]})}),e.uc_single&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Dedicated Cluster ",e.uc_single]})}),e.uc_shared&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Standard Cluster ",e.uc_shared]})}),e.livy&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["Livy ",e.livy]})}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},68954:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_output-2377e8e555ac97a7dcd5c9faf7a32045.png"},85507:(e,s,t)=>{t.d(s,{A:()=>a});const a=t.p+"assets/images/flatten_output_interim-66b78f2b754bce19f56ff25afa3c2037.png"},98367:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"Spark/gems/transform/flatten-schema","title":"FlattenSchema","description":"Flatten nested data","source":"@site/docs/Spark/gems/transform/flattenschema.md","sourceDirName":"Spark/gems/transform","slug":"/engineers/flatten-schema","permalink":"/engineers/flatten-schema","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"schema","permalink":"/tags/schema"},{"inline":true,"label":"explode","permalink":"/tags/explode"},{"inline":true,"label":"flatten","permalink":"/tags/flatten"}],"version":"current","frontMatter":{"title":"FlattenSchema","id":"flatten-schema","slug":"/engineers/flatten-schema","description":"Flatten nested data","tags":["gems","schema","explode","flatten"]},"sidebar":"mySidebar","previous":{"title":"Filter","permalink":"/engineers/filter"},"next":{"title":"FuzzyMatch","permalink":"/engineers/fuzzy-match"}}');var n=t(74848),i=t(28453),r=t(49235);const c={title:"FlattenSchema",id:"flatten-schema",slug:"/engineers/flatten-schema",description:"Flatten nested data",tags:["gems","schema","explode","flatten"]},l=void 0,d={},o=[{value:"The Input",id:"the-input",level:2},{value:"The Expressions",id:"the-expressions",level:2},{value:"The Output",id:"the-output",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",img:"img",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.0.1+"}),"\n",(0,n.jsx)(s.p,{children:"When processing raw data it can be useful to flatten complex data types like structures and arrays into simpler, flatter schemas."}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"The FlattenSchema gem",src:t(16464).A+"",width:"290",height:"305"})}),"\n",(0,n.jsx)(s.h2,{id:"the-input",children:"The Input"}),"\n",(0,n.jsx)(s.p,{children:"FlattenSchema works on DataFrames that have nested columns that you'd like to extract into a flat schema."}),"\n",(0,n.jsx)(s.p,{children:"For example, with an input schema like so:"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Input schema",src:t(29081).A+"",width:"376",height:"434"})}),"\n",(0,n.jsx)(s.p,{children:"And the data looks like so:"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Input data",src:t(30856).A+"",width:"2764",height:"416"})}),"\n",(0,n.jsxs)(s.p,{children:["We want to extract ",(0,n.jsx)(s.code,{children:"count"})," from ",(0,n.jsx)(s.em,{children:"result"})," and all of the columns from ",(0,n.jsx)(s.em,{children:"events"})," into a flattened schema."]}),"\n",(0,n.jsx)(s.h2,{id:"the-expressions",children:"The Expressions"}),"\n",(0,n.jsxs)(s.p,{children:["Having added a FlattenSchema gem to your pipeline, all you need to do is click the column names you wish to extract and they'll be added to the ",(0,n.jsx)(s.strong,{children:"Expressions"})," section. Then, you can change the values in the ",(0,n.jsx)(s.strong,{children:"Target Column"})," to change the name of output columns."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Adding Expressions",src:t(6211).A+"",width:"630",height:"432"})}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.strong,{children:"Columns Delimiter"})," dropdown allows you to control how the names of the new columns are derived. Currently dashes and underscores are supported."]}),"\n",(0,n.jsx)(s.h2,{id:"the-output",children:"The Output"}),"\n",(0,n.jsxs)(s.p,{children:["If we check the ",(0,n.jsx)(s.strong,{children:"Output"})," tab in the gem, you'll see the schema that we've created using the selected columns."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Output schema",src:t(68954).A+"",width:"404",height:"531"})}),"\n",(0,n.jsx)(s.p,{children:"And here's what the output data looks like:"}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{alt:"Output interim",src:t(85507).A+"",width:"2766",height:"1436"})}),"\n",(0,n.jsx)(s.p,{children:"No more nested structures!"}),"\n",(0,n.jsx)(s.admonition,{type:"info",children:(0,n.jsxs)(s.p,{children:["For more advanced use cases, the Spark ",(0,n.jsx)(s.code,{children:"explode"})," function is available to use in the ",(0,n.jsx)(s.a,{href:"/engineers/reformat",children:"Reformat"})," gem, ",(0,n.jsx)(s.a,{href:"/engineers/sql-statement",children:"Custom SQL"})," gem, or anywhere else that accepts Spark expressions."]})})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);