"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[69181],{15613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"analysts/development/gems/source-target/file/file-types","title":"File types","description":"Read and write files from various connections","source":"@site/docs/analysts/development/gems/source-target/file/file.md","sourceDirName":"analysts/development/gems/source-target/file","slug":"/analysts/file-types","permalink":"/analysts/file-types","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"File types","id":"file-types","slug":"/analysts/file-types","description":"Read and write files from various connections","tags":[]},"sidebar":"mySidebar","previous":{"title":"Salesforce","permalink":"/analysts/salesforce"},"next":{"title":"CSV","permalink":"/analysts/csv"}}');var r=n(74848),i=n(28453),o=n(99563),l=n(89791);const c={title:"File types",id:"file-types",slug:"/analysts/file-types",description:"Read and write files from various connections",tags:[]},a=void 0,u={},d=[{value:"What&#39;s next",id:"whats-next",level:2}];function f(e){const t={h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Prophecy supports the following file types."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"CSV"}),"\n",(0,r.jsx)(t.li,{children:"Excel"}),"\n",(0,r.jsx)(t.li,{children:"JSON"}),"\n",(0,r.jsx)(t.li,{children:"Parquet"}),"\n",(0,r.jsx)(t.li,{children:"XML"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Depending on the connection type you choose in the source/target gem, you might see fewer options."}),"\n",(0,r.jsx)(t.p,{children:"Each file type, regardless of its origin connection, has the same parameters and properties. Because of this, each file type has its own documentation. This is different from tables that have specific parameters according to the data provider."}),"\n",(0,r.jsx)(t.h2,{id:"whats-next",children:"What's next"}),"\n",(0,r.jsx)(t.p,{children:"Learn about the different file types that you can use for Source and Target gems in the following pages."}),"\n","\n",(0,r.jsx)(o.A,{items:(0,l.$S)().items})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(f,{...e})}):f(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(96540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},81430:(e,t,n)=>{n.d(t,{W:()=>a});var s=n(96540),r=n(40797);const i=["zero","one","two","few","many","other"];function o(e){return i.filter((t=>e.includes(t)))}const l={locale:"en",pluralForms:o(["one","other"]),select:e=>1===e?"one":"other"};function c(){const{i18n:{currentLocale:e}}=(0,r.A)();return(0,s.useMemo)((()=>{try{return function(e){const t=new Intl.PluralRules(e);return{locale:e,pluralForms:o(t.resolvedOptions().pluralCategories),select:e=>t.select(e)}}(e)}catch(t){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${t.message}\n`),l}}),[e])}function a(){const e=c();return{selectMessage:(t,n)=>function(e,t,n){const s=e.split("|");if(1===s.length)return s[0];s.length>n.pluralForms.length&&console.error(`For locale=${n.locale}, a maximum of ${n.pluralForms.length} plural forms are expected (${n.pluralForms.join(",")}), but the message contains ${s.length}: ${e}`);const r=n.select(t),i=n.pluralForms.indexOf(r);return s[Math.min(i,s.length-1)]}(n,t,e)}}},89791:(e,t,n)=>{n.d(t,{$S:()=>s});n(40797);function s(){return n(56942).$S(...arguments)}},99563:(e,t,n)=>{n.d(t,{A:()=>y});n(96540);var s=n(18215),r=n(93751),i=n(56289),o=n(81430),l=n(22887),c=n(50539),a=n(9303);const u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var d=n(74848);function f(e){let{href:t,children:n}=e;return(0,d.jsx)(i.A,{href:t,className:(0,s.A)("card padding--lg",u.cardContainer),children:n})}function p(e){let{href:t,icon:n,title:r,description:i}=e;return(0,d.jsxs)(f,{href:t,children:[(0,d.jsxs)(a.A,{as:"h2",className:(0,s.A)("text--truncate",u.cardTitle),title:r,children:[n," ",r]}),i&&(0,d.jsx)("p",{className:(0,s.A)("text--truncate",u.cardDescription),title:i,children:i})]})}function h(e){let{item:t}=e;const n=(0,r.Nr)(t),s=function(){const{selectMessage:e}=(0,o.W)();return t=>e(t,(0,c.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t}))}();return n?(0,d.jsx)(p,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:t.description??s(t.items.length)}):null}function m(e){let{item:t}=e;const n=(0,l.A)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",s=(0,r.cC)(t.docId??void 0);return(0,d.jsx)(p,{href:t.href,icon:n,title:t.label,description:t.description??s?.description})}function g(e){let{item:t}=e;switch(t.type){case"link":return(0,d.jsx)(m,{item:t});case"category":return(0,d.jsx)(h,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function x(e){let{className:t}=e;const n=(0,r.$S)();return(0,d.jsx)(y,{items:n.items,className:t})}function y(e){const{items:t,className:n}=e;if(!t)return(0,d.jsx)(x,{...e});const i=(0,r.d1)(t);return(0,d.jsx)("section",{className:(0,s.A)("row",n),children:i.map(((e,t)=>(0,d.jsx)("article",{className:"col col--6 margin-bottom--lg",children:(0,d.jsx)(g,{item:e})},t)))})}}}]);