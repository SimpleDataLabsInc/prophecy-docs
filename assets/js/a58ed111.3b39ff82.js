"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[59647],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},83280:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting-started/concepts/project/projects","title":"Projects","description":"Understanding your workspace for building data pipelines in Prophecy","source":"@site/docs/getting-started/concepts/project/project.md","sourceDirName":"getting-started/concepts/project","slug":"/projects","permalink":"/projects","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"concepts","permalink":"/tags/concepts"},{"inline":true,"label":"project","permalink":"/tags/project"}],"version":"current","frontMatter":{"title":"Projects","id":"projects","slug":"/projects","description":"Understanding your workspace for building data pipelines in Prophecy","tags":["concepts","project"]},"sidebar":"gettingStartedSidebar","previous":{"title":"Fabrics","permalink":"/fabrics"},"next":{"title":"Pipelines","permalink":"/pipelines"}}');var s=r(74848),o=r(28453);const i={title:"Projects",id:"projects",slug:"/projects",description:"Understanding your workspace for building data pipelines in Prophecy",tags:["concepts","project"]},a=void 0,c={},l=[{value:"Project types",id:"project-types",level:2},{value:"SQL projects",id:"sql-projects",level:3},{value:"Python/Scala projects",id:"pythonscala-projects",level:3},{value:"Compute differences",id:"compute-differences",level:3},{value:"Project components",id:"project-components",level:2},{value:"SQL project components",id:"sql-project-components",level:3},{value:"Python/Scala project components",id:"pythonscala-project-components",level:3},{value:"Version control",id:"version-control",level:2},{value:"Git repository options",id:"git-repository-options",level:3},{value:"Git storage models",id:"git-storage-models",level:3},{value:"Access and sharing",id:"access-and-sharing",level:2},{value:"Team assignment",id:"team-assignment",level:3},{value:"Cross-team sharing",id:"cross-team-sharing",level:3},{value:"Project metadata",id:"project-metadata",level:2},{value:"Common questions",id:"common-questions",level:2},{value:"What&#39;s next",id:"whats-next",level:2}];function d(e){const n={a:"a",admonition:"admonition",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.admonition,{title:"Editions",type:"edition",children:(0,s.jsx)(n.p,{children:"Free, Professional, and Express Editions only support SQL projects. Enterprise Edition supports SQL, Python, and Scala."})}),"\n",(0,s.jsx)(n.p,{children:"Projects serve as your primary workspace in Prophecy for building data pipelines. They are containers that organize related data transformations, tests, and schedules in one place. Projects provide some core capabilities that support your data pipeline development:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Organization"}),": Keep related pipelines, data sources, and schedules together in a logical structure."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Collaboration"}),": Share your work with team members and other teams through controlled access."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Version Control"}),": Track changes and manage versions of your data transformations over time."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Deployment"}),": Move your work from development to production environments."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-types",children:"Project types"}),"\n",(0,s.jsx)(n.p,{children:"When you create a project in Prophecy, you must choose between project types: SQL, Python, or Scala. This choice determines the programming language used for your data transformations and the execution environment where your pipelines will run."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"You cannot change your project type after creation. This decision affects the underlying architecture and code generation patterns."})}),"\n",(0,s.jsx)(n.h3,{id:"sql-projects",children:"SQL projects"}),"\n",(0,s.jsx)(n.p,{children:"SQL projects are designed for users who work primarily with SQL data warehouses and focus on business analytics. Choose SQL if you:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Are a ",(0,s.jsx)(n.strong,{children:"business analyst"})," or ",(0,s.jsx)(n.strong,{children:"data analyst"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Work with SQL warehouses such as Databricks SQL or BigQuery."}),"\n",(0,s.jsx)(n.li,{children:"Focus on transforming data for business intelligence and reporting."}),"\n",(0,s.jsx)(n.li,{children:"Prefer visual interfaces over writing code."}),"\n",(0,s.jsx)(n.li,{children:"Benefit from built-in scheduling capabilities and API triggers."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"SQL projects can run on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/administration/fabrics/prophecy-fabrics/",children:"Prophecy fabrics"})}),": Environment including a SQL warehouse and Prophecy Automate (Prophecy-native runtime)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/administration/fabrics/sql-fabrics/Fabrics",children:"SQL fabrics"})}),": Environment only including SQL warehouse compute. Project capabilities are limited when using SQL fabrics. Use SQL fabrics for data modeling only."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pythonscala-projects",children:"Python/Scala projects"}),"\n",(0,s.jsx)(n.p,{children:"Python and Scala projects are designed for users who need more control over data processing and work with distributed computing environments. Choose Python or Scala if you:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Are a ",(0,s.jsx)(n.strong,{children:"data engineer"})," or ",(0,s.jsx)(n.strong,{children:"platform engineer"})," building complex data processing systems."]}),"\n",(0,s.jsx)(n.li,{children:"Work with Spark clusters."}),"\n",(0,s.jsx)(n.li,{children:"Need full control over the code and execution environment."}),"\n",(0,s.jsx)(n.li,{children:"Use external orchestration tools like Databricks Jobs."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Python and Scala projects can run on ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/administration/fabrics/Spark-fabrics/Fabrics",children:"Spark fabrics"})}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For detailed capabilities and feature comparisons, see ",(0,s.jsx)(n.a,{href:"/administration/project-types/",children:"Project types"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"compute-differences",children:"Compute differences"}),"\n",(0,s.jsx)(n.p,{children:"SQL projects are tied to a specific SQL warehouse provider (for example, Databricks), which you select when creating the project. Python/Scala projects, by contrast, are provider-agnostic and can run on any Spark cluster (such as Databricks or Livy). Keep in mind that results may vary\u2014Prophecy supports different capabilities based on the requirements and limitations of each different compute (both SQL and Spark-based compute)."}),"\n",(0,s.jsx)(n.h2,{id:"project-components",children:"Project components"}),"\n",(0,s.jsx)(n.p,{children:"Your project contains different components depending on the type you choose. These components work together to create complete data transformation workflows."}),"\n",(0,s.jsx)(n.h3,{id:"sql-project-components",children:"SQL project components"}),"\n",(0,s.jsx)(n.p,{children:"SQL projects organize your work around pipelines that combine SQL transformations with external integrations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pipelines"}),": Visual workflows that sequence data transformation steps."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gems"}),": Individual transformation components that you configure visually. Each gem represents a specific data operation like reading, joining, or aggregating data. Gems run in your SQL warehouse for data processing and in Prophecy Automate for external integrations like API calls and email notifications."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Tables"}),": References to data sources and targets configured through Source and Target gems. No data is stored in Prophecy."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schedules"}),": Automated pipeline execution managed by Prophecy Automate. Schedules allow you to run pipelines at specified intervals without manual intervention."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["In Prophecy 4.0 and later, SQL projects use ",(0,s.jsx)(n.strong,{children:"pipelines"})," as the main transformation entity, which can include both SQL warehouse operations and Prophecy Automate functions like email notifications and API calls."]}),(0,s.jsxs)(n.p,{children:["In Prophecy versions prior to 4.0, SQL projects used ",(0,s.jsx)(n.strong,{children:"models"})," (dbt-based) that only supported SQL warehouse operations. If you're working with an older version, models will be your primary transformation entity."]})]}),"\n",(0,s.jsx)(n.h3,{id:"pythonscala-project-components",children:"Python/Scala project components"}),"\n",(0,s.jsx)(n.p,{children:"Python/Scala projects organize your work around pipelines that execute on Spark clusters:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pipelines"}),": Visual workflows that sequence data transformation steps. Pipelines run on Spark clusters."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gems"}),": Individual transformation components that you configure visually. Each gem represents a specific data operation that corresponds to Python or Scala code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Datasets"}),": References to data sources and targets configured through Source and Target gems. No data is stored in Prophecy."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Jobs"}),": Automated pipeline execution managed by external orchestration tools like Databricks Jobs."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"version-control",children:"Version control"}),"\n",(0,s.jsx)(n.p,{children:"All projects in Prophecy are automatically compiled into code and hosted on Git for version control. This ensures every change is tracked, versioned, and auditable. Version control options available depend on your project type and team requirements."}),"\n",(0,s.jsx)(n.h3,{id:"git-repository-options",children:"Git repository options"}),"\n",(0,s.jsx)(n.p,{children:"Projects can be hosted on two types of Git repositories:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Git Repository"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Use Case"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Prophecy-managed Git"})}),(0,s.jsx)(n.td,{children:"Prophecy hosts and manages everything for you. No external Git setup required."}),(0,s.jsx)(n.td,{children:"Teams new to Git or preferring simplified workflows"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"External Git"})}),(0,s.jsx)(n.td,{children:"Connect to GitHub, GitLab, or Bitbucket. You have full control over repository management."}),(0,s.jsx)(n.td,{children:"Teams with existing Git workflows or complex CI/CD requirements"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"git-storage-models",children:"Git storage models"}),"\n",(0,s.jsx)(n.p,{children:"Projects can leverage different Git storage models depending on your collaboration needs:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Git Storage Model"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Best For"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Simple workflow"})," (SQL projects only)"]}),(0,s.jsx)(n.td,{children:"Simplified save and publish process. Changes are still hosted on Git but abstracted in the project interface."}),(0,s.jsx)(n.td,{children:"Data analysts and teams preferring visual workflows"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Normal workflow"})}),(0,s.jsx)(n.td,{children:"Standard Git branching and merging with full control over the development process."}),(0,s.jsx)(n.td,{children:"Teams comfortable with Git workflows and branching strategies"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.strong,{children:"Fork per user"})," (External Git only)"]}),(0,s.jsx)(n.td,{children:"Each user works on their own fork of the repository, enabling isolated development."}),(0,s.jsx)(n.td,{children:"Large teams requiring strict isolation between developers"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"access-and-sharing",children:"Access and sharing"}),"\n",(0,s.jsx)(n.p,{children:"Projects in Prophecy use a team-based access model that determines ownership and permissions. This model ensures that only authorized users can access and modify your data transformations while enabling controlled collaboration."}),"\n",(0,s.jsx)(n.h3,{id:"team-assignment",children:"Team assignment"}),"\n",(0,s.jsx)(n.p,{children:"Each project is associated with a specific team that determines access permissions. The user who creates a project becomes its owner and can assign the project to a team during creation. Team membership grants users the ability to edit project components like pipelines and gems, while project owners retain special privileges such as the ability to release and deploy projects."}),"\n",(0,s.jsx)(n.p,{children:"When you first start using Prophecy, you are placed in your own personal, one-member team. This setup is ideal for private projects that only you can access. For collaborative work, your team administrator will typically create shared teams that include multiple users."}),"\n",(0,s.jsx)(n.h3,{id:"cross-team-sharing",children:"Cross-team sharing"}),"\n",(0,s.jsx)(n.p,{children:"Projects can be shared with other teams to extend their reach and enable reuse of data transformations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read-only access"}),": Users from other teams cannot directly edit the original project's components."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Component reuse"}),": When you share a project and publish it to the Package Hub, users can import the project as a dependency in their own projects. This allows them to use copies of your components without affecting the original."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pipeline execution"}),": If you share projects containing Prophecy Apps with other teams, users can execute those apps to run pipelines within the shared project. Prophecy Apps are only available for pipelines in SQL projects."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-metadata",children:"Project metadata"}),"\n",(0,s.jsx)(n.p,{children:"The Metadata page in Prophecy provides a comprehensive view of your projects and their components. This centralized directory allows you to search, discover, and manage all projects accessible to your teams. All of your team's projects are visible in the Projects tab of the Metadata page, where you can access detailed information about each project."}),"\n",(0,s.jsx)(n.p,{children:"You can view and edit the following metadata for projects:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Metadata"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"About"})}),(0,s.jsx)(n.td,{children:"An overview of your project and space for an in-depth description of the project."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Content"})}),(0,s.jsx)(n.td,{children:"A list of entities within the project like pipelines and jobs depending on your project type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Dependencies"})}),(0,s.jsx)(n.td,{children:"The dependencies that exist in the project, including packages and Prophecy libraries."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Version control"})}),(0,s.jsx)(n.td,{children:"Either the Git workflow of the project, or the version history of the project, depending on your project type."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Deployments"})}),(0,s.jsx)(n.td,{children:"A list of project versions that you have released and/or deployed (published)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Access"})}),(0,s.jsx)(n.td,{children:"The teams that can view your project via the Package Hub."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Settings"})}),(0,s.jsx)(n.td,{children:"Different configuration options for building and deploying your project."})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"common-questions",children:"Common questions"}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"What is a Prophecy for Analysts project?"}),(0,s.jsx)(n.p,{children:"Prophecy for Analysts is a project creation template designed specifically for data analysts. When you select this template, Prophecy automatically configures your project with Prophecy-managed Git in Simple mode and initializes it for a Databricks SQL warehouse. This template provides the most streamlined experience for users who primarily work with SQL and prefer visual interfaces over complex Git workflows."})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"Can I change my project type after creation?"}),(0,s.jsx)(n.p,{children:"No, project types cannot be changed after creation. This limitation exists because SQL and Python/Scala projects have fundamentally different architectures and code generation patterns. SQL projects generate dbt models and use Prophecy Automate, while Python/Scala projects generate Spark code and use external orchestration tools."}),(0,s.jsx)(n.p,{children:"If you need a different project type, you'll need to create a new project and manually recreate your pipelines. Consider starting with SQL if you're unsure about your requirements, as it provides a gentler learning curve for most analytics work."})]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("summary",{children:"When should I use models vs pipelines in SQL projects?"}),(0,s.jsx)(n.p,{children:"In Prophecy 4.0+, SQL projects primarily use pipelines as the main transformation entity. Pipelines can include both SQL warehouse operations and Prophecy Automate functions like API calls and email notifications."}),(0,s.jsx)(n.p,{children:"Models (dbt-based) are still available for pure SQL transformations that will be orchestrated externally through tools like Databricks Jobs. Use models when you need to integrate with existing dbt workflows or external orchestration systems."})]}),"\n",(0,s.jsx)(n.h2,{id:"whats-next",children:"What's next"}),"\n",(0,s.jsx)(n.p,{children:"To continue your journey with Prophecy projects, follow these recommended paths based on your project type:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For SQL projects:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/analysts/pipelines",children:"Create your first pipeline"})," to build visual data transformation workflows."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/analysts/scheduling",children:"Set up Prophecy Automate scheduling"})," to automate your pipeline execution."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/analysts/business-applications",children:"Build a Prophecy App"})," to create user-friendly interfaces for your data pipelines."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For Python/Scala projects:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/engineers/pipelines",children:"Create your first pipeline"})," to build Spark-based data processing workflows."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/engineers/orchestration",children:"Set up external orchestration"})," to schedule your pipelines with tools like Databricks Jobs."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/administration/fabrics/Spark-fabrics/Fabrics",children:"Configure Spark fabrics"})," to connect to your execution environments."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"For all projects:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/analysts/versioning",children:"Understand simple version control"})," and ",(0,s.jsx)(n.a,{href:"/engineers/git",children:"normal Git workflows"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/engineers/package-hub",children:"Explore the Package Hub"})," to discover reusable components and share your work."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/tutorials",children:"Follow tutorials"})," to build complete projects from start to finish."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);