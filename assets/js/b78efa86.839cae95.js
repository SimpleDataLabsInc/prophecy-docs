"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[5412],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,k=m["".concat(d,".").concat(c)]||m[c]||s[c]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72360:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(67294),r=n(86010),l="tabItem_OmH5";function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(87462),r=n(67294),l=n(72389),o=n(67392),i=n(7094),d=n(12466),p=n(86010),u="tabList_uSqn",s="tabItem_LplD";function m(e){var t,n,l,m=e.lazy,c=e.block,k=e.defaultValue,g=e.values,f=e.groupId,b=e.className,N=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=g?g:N.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),w=(0,o.l)(h,(function(e,t){return e.value===t.value}));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===k?k:null!=(t=null!=k?k:null==(n=N.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(l=N[0])?void 0:l.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var v=(0,i.U)(),C=v.tabGroupChoices,D=v.setTabGroupChoices,T=(0,r.useState)(y),x=T[0],M=T[1],S=[],O=(0,d.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var E=C[f];null!=E&&E!==x&&h.some((function(e){return e.value===E}))&&M(E)}var P=function(e){var t=e.currentTarget,n=S.indexOf(t),a=h[n].value;a!==x&&(O(t),M(a),null!=f&&D(f,a))},F=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;n=S[a]||S[0];break;case"ArrowLeft":var r=S.indexOf(e.currentTarget)-1;n=S[r]||S[S.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":c},b)},h.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return S.push(e)},onKeyDown:F,onFocus:P,onClick:P},l,{className:(0,p.Z)("tabs__item",s,null==l?void 0:l.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),m?(0,r.cloneElement)(N.filter((function(e){return e.props.value===x}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function c(e){var t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},51233:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),o=n(9877),i=n(72360),d=["components"],p={title:"MongoDB",id:"mongodb",description:"MongoDB",sidebar_position:1,tags:["gems","warehouse","mongodb"]},u=void 0,s={unversionedId:"low-code-spark/gems/source-target/warehouse/mongodb",id:"low-code-spark/gems/source-target/warehouse/mongodb",title:"MongoDB",description:"MongoDB",source:"@site/docs/low-code-spark/gems/source-target/warehouse/mongodb.md",sourceDirName:"low-code-spark/gems/source-target/warehouse",slug:"/low-code-spark/gems/source-target/warehouse/mongodb",permalink:"/low-code-spark/gems/source-target/warehouse/mongodb",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"warehouse",permalink:"/tags/warehouse"},{label:"mongodb",permalink:"/tags/mongodb"}],version:"current",sidebarPosition:1,frontMatter:{title:"MongoDB",id:"mongodb",description:"MongoDB",sidebar_position:1,tags:["gems","warehouse","mongodb"]},sidebar:"defaultSidebar",previous:{title:"XLSX (Excel)",permalink:"/low-code-spark/gems/source-target/file/xlsx"},next:{title:"Snowflake",permalink:"/low-code-spark/gems/source-target/warehouse/snowflake"}},m={},c=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Supported Write Modes",id:"supported-write-modes",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3}],k={toc:c};function g(e){var t=e.components,n=(0,r.Z)(e,d);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Built on")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Built on ",(0,l.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/#mongodb-connector-for-spark"},"MongoDB Spark Connector")," v10.0 ",(0,l.kt)("br",null),"\nPlease add ",(0,l.kt)("inlineCode",{parentName:"p"},"mongodb-spark-connector")," jar as dependency ",(0,l.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/extensibility/dependencies/#add-dependency"},"for more")))),(0,l.kt)("p",null,"Allows read and write operations on ",(0,l.kt)("inlineCode",{parentName:"p"},"MongoDB")),(0,l.kt)("h2",{id:"source"},"Source"),(0,l.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/read/"},"Official documentation")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Username"),(0,l.kt)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Password"),(0,l.kt)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Driver"),(0,l.kt)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, eg. ",(0,l.kt)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,l.kt)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,l.kt)("br",null)," eg. ",(0,l.kt)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Database"),(0,l.kt)("td",{parentName:"tr",align:null},"Database from which we want to read the data."),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Collection"),(0,l.kt)("td",{parentName:"tr",align:null},"Collection from which we want to read the data."),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,l.kt)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,l.kt)("br",null)," You can specify a custom implementation which must implement the ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"partitioner"),(0,l.kt)("td",{parentName:"tr",align:null},"The partitioner full class name. You can specify a custom implementation which must implement the ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.Partitioner")," interface. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.SamplePartitioner")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"partitioner.options.partition.field"),(0,l.kt)("td",{parentName:"tr",align:null},"The field to use for partitioning, which must be a unique field. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"_id")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"partitioner.options.partition.size"),(0,l.kt)("td",{parentName:"tr",align:null},"The size (in MB) for each partition. Smaller partition sizes create more partitions containing fewer documents. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"64")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"partitioner.options.samples.per.partition"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of samples to take per partition. The total number of samples taken is: ",(0,l.kt)("inlineCode",{parentName:"td"},"samples per partiion * ( count / number of documents per partition)")," ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"10")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sampleSize"),(0,l.kt)("td",{parentName:"tr",align:null},"The number of documents to sample from the collection when inferring the schema. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"1000")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.enabled"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to enable Map types when inferring the schema. When enabled, large compatible struct types are inferred to a MapType instead. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.minimum.key.size"),(0,l.kt)("td",{parentName:"tr",align:null},"Minimum size of a StructType before inferring as a MapType. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"250")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"aggregation.pipeline"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies a custom aggregation pipeline to apply to the collection before sending data to Spark. The value must be either an extended JSON single document or list of documents.",(0,l.kt)("br",null)," A single document should resemble the following:",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},'{"$match": {"closed": false}}')," ",(0,l.kt)("br",null)," A list of documents should resemble the following:",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},'[{"$match": {"closed": false}}, {"$project": {"status": 1, "name": 1, "description": 1}}]')),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"aggregation.allowDiskUse"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether to allow storage to disk when running the aggregation. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},"False")))),(0,l.kt)("h3",{id:"source-example"},"Example"),(0,l.kt)("p",null,"Below is an example of configuring MongoDB Source using Prophecy IDE.\nWe will be reading Airbnb public ",(0,l.kt)("inlineCode",{parentName:"p"},"listingReviews")," dataset using in-built ",(0,l.kt)("inlineCode",{parentName:"p"},"MongoDB")," Source Gem.",(0,l.kt)("br",null),"\nAfter configuration you can view schema by clicking ",(0,l.kt)("inlineCode",{parentName:"p"},"Infer Schema")," in properties tab and also view data by clicking ",(0,l.kt)("inlineCode",{parentName:"p"},"Load")," inside Preview tab."),(0,l.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,l.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,l.kt)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218975988-7e445ee5-81c1-4c0c-90dd-711ec28f0a38.mp4",title:"MongoDB Source",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,l.kt)("h3",{id:"source-code"},"Generated Code"),(0,l.kt)(o.Z,{defaultValue:"scala",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"Coming Soon!!!\n"))),(0,l.kt)(i.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object input_mongodb {\n\n  def apply(context: Context): DataFrame = {\n    context.spark.read\n      .format("mongodb")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",   "test_input")\n      .option("collection", "listAndReviews")\n      .load()\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"target"},"Target"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/write/"},"Official documentation")),(0,l.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Username"),(0,l.kt)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Password"),(0,l.kt)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Driver"),(0,l.kt)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, eg. ",(0,l.kt)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,l.kt)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,l.kt)("br",null)," eg. ",(0,l.kt)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Database"),(0,l.kt)("td",{parentName:"tr",align:null},"Database to which we want to write the data."),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Collection"),(0,l.kt)("td",{parentName:"tr",align:null},"Collection to which we want to write the data."),(0,l.kt)("td",{parentName:"tr",align:null},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,l.kt)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,l.kt)("br",null)," You can specify a custom implementation which must implement the ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"maxBatchSize"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the maximum number of operations to batch in bulk operations. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"512")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ordered"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies whether to perform ordered bulk operations. ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"operationType"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the type of write operation to perform. You can set this to one of the following values: ",(0,l.kt)("inlineCode",{parentName:"td"},"insert"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"replace")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"update")," ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"replace")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"idFieldList"),(0,l.kt)("td",{parentName:"tr",align:null},"Field or list of fields by which to split the collection data. To specify more than one field, separate them using a comma as shown in the following example:",(0,l.kt)("inlineCode",{parentName:"td"},'"fieldName1,fieldName2"')," ",(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"_id")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"writeConcern.w"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies w, a write concern option to acknowledge the level to which the change propagated in the MongoDB replica set. You can specify one of the following values: ",(0,l.kt)("inlineCode",{parentName:"td"},"MAJORITY"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"W1"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"W2"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"W3"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"ACKNOWLEDGED")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"UNACKNOWLEDGED"),(0,l.kt)("br",null)," Default: ",(0,l.kt)("inlineCode",{parentName:"td"},"_ACKNOWLEDGED")),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"writeConcern.journal"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies j, a write concern option to enable request for acknowledgment that the data is confirmed on on-disk journal for the criteria specified in the w option.",(0,l.kt)("br",null)," You can specify either ",(0,l.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"writeConcern.wTimeoutMS"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies wTimeoutMS, a write concern option to return an error when a write operation exceeds the number of milliseconds. If you use this optional setting, you must specify a ",(0,l.kt)("inlineCode",{parentName:"td"},"non-negative")," integer."),(0,l.kt)("td",{parentName:"tr",align:null},"False")))),(0,l.kt)("h3",{id:"supported-write-modes"},"Supported Write Modes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Write Mode"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"overwrite"),(0,l.kt)("td",{parentName:"tr",align:null},"If data already exists, ",(0,l.kt)("inlineCode",{parentName:"td"},"overwrite")," the contents of the Collection with data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"append"),(0,l.kt)("td",{parentName:"tr",align:null},"If data already exists, ",(0,l.kt)("inlineCode",{parentName:"td"},"append")," the data on to the contents of the Collection.")))),(0,l.kt)("h3",{id:"target-example"},"Example"),(0,l.kt)("p",null,"Below is an example of configuring MongoDB Target using Prophecy IDE.\nWe will be writing back Airbnb public ",(0,l.kt)("inlineCode",{parentName:"p"},"listingReviews")," data into a collection in ",(0,l.kt)("inlineCode",{parentName:"p"},"MongoDB")," using our in-built Target Gem."),(0,l.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,l.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,l.kt)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218750916-a3ea2ead-9c81-42c9-9ad2-c60a61cdde4a.mp4",title:"MongoDB Target",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,l.kt)("h3",{id:"target-code"},"Generated Code"),(0,l.kt)(o.Z,{defaultValue:"scala",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"Coming Soon!!!\n"))),(0,l.kt)(i.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object output_mongodb {\n  def apply(context: Context, df: DataFrame): Unit = {\n    df.write\n      .format("mongodb")\n      .mode("overwrite")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",      "test")\n      .option("collection",    "test_output")\n      .option("ordered",       "true")\n      .option("operationType", "replace")\n      .save()\n  }\n}\n')))))}g.isMDXComponent=!0}}]);