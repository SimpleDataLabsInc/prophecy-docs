"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[8492],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2360:function(e,t,n){n.d(t,{Z:function(){return l}});var a=n(7294),r=n(6010),i="tabItem_OmH5";function l(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return f}});var a=n(7462),r=n(7294),i=n(2389),l=n(7392),o=n(7094),s=n(2466),u=n(6010),c="tabList_uSqn",p="tabItem_LplD";function d(e){var t,n,i,d=e.lazy,f=e.block,m=e.defaultValue,g=e.values,h=e.groupId,b=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,l.l)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===m?m:null!=(t=null!=m?m:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=k[0])?void 0:i.props.value;if(null!==w&&!v.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,o.U)(),N=x.tabGroupChoices,S=x.setTabGroupChoices,Z=(0,r.useState)(w),X=Z[0],T=Z[1],_=[],E=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var O=N[h];null!=O&&O!==X&&v.some((function(e){return e.value===O}))&&T(O)}var C=function(e){var t=e.currentTarget,n=_.indexOf(t),a=v[n].value;a!==X&&(E(t),T(a),null!=h&&S(h,a))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=_.indexOf(e.currentTarget)+1;n=_[a]||_[0];break;case"ArrowLeft":var r=_.indexOf(e.currentTarget)-1;n=_[r]||_[_.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,u.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":f},b)},v.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:X===t?0:-1,"aria-selected":X===t,key:t,ref:function(e){return _.push(e)},onKeyDown:P,onFocus:C,onClick:C},i,{className:(0,u.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":X===t})}),null!=n?n:t)}))),d?(0,r.cloneElement)(k.filter((function(e){return e.props.value===X}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==X})}))))}function f(e){var t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},4790:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return f}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(9877),o=n(2360),s=["components"],u={title:"Working with XLSX (Excel) files"},c=void 0,p={unversionedId:"tutorials/low-code-spark/excel",id:"tutorials/low-code-spark/excel",title:"Working with XLSX (Excel) files",description:"If you've worked with numbers in your day-to-day operations, odds are you've run into a need to use Excel at one point or another. This tutorial is going to cover the two most basic scenarios: Reading and Writing.",source:"@site/docs/08-tutorials/03-low-code-spark/01-excel.md",sourceDirName:"08-tutorials/03-low-code-spark",slug:"/tutorials/low-code-spark/excel",permalink:"/tutorials/low-code-spark/excel",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Working with XLSX (Excel) files"},sidebar:"defaultSidebar",previous:{title:"Low-code Spark",permalink:"/tutorials/low-code-spark/intro"}},d={},f=[{value:"Reading XLSX files",id:"reading-xlsx-files",level:2},{value:"Writing XLSX files",id:"writing-xlsx-files",level:2},{value:"Writing a single output file",id:"writing-a-single-output-file",level:3}],m={toc:f};function g(e){var t=e.components,u=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,u,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"If you've worked with numbers in your day-to-day operations, odds are you've run into a need to use Excel at one point or another. This tutorial is going to cover the two most basic scenarios: Reading and Writing."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For a full list of options supported by Prophecy when interacting with Excel files ",(0,i.kt)("a",{parentName:"p",href:"/low-code-spark/gems/source-target/file/xlsx"},"see here")))),(0,i.kt)("h2",{id:"reading-xlsx-files"},"Reading XLSX files"),(0,i.kt)("p",null,"Reading an Excel file is quite easy in Prophecy! Simply follow these steps to create a new XLSX source."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select the XLSX format ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select XLSX source type",src:n(2010).Z,width:"3202",height:"2002"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Navigate to the desired XLSX source file ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Navigate to XLSX source file",src:n(3996).Z,width:"3044",height:"2000"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Customize any properties you might need and tweak the schema to your liking ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Adjust parameters and schema",src:n(5156).Z,width:"3032",height:"1998"})," ",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Preview the file and double-check that the schema matches your intentions ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Preview the input file",src:n(7008).Z,width:"3036",height:"1998"}))),(0,i.kt)("p",null,"Once the source gem is created and validation passes you'll be able to find the code of your new Source in the ",(0,i.kt)("inlineCode",{parentName:"p"},"graph")," directory of your Pipeline code."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def Source_0(spark: SparkSession) -> DataFrame:\n    if Config.fabricName == "demos":\n        return spark.read\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("inferSchema", True)\\\n            .load("dbfs:/FileStore/Users/scott/plain_number.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n\n')))),(0,i.kt)("h2",{id:"writing-xlsx-files"},"Writing XLSX files"),(0,i.kt)("p",null,"Writing an Excel file is just as easy, with only one small caveat to be discussed after. Let's look at an example pipeline with an XLSX output target:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Sample pipeline with XLSX output",src:n(7787).Z,width:"1616",height:"774"})),(0,i.kt)("p",null,"In this scenario we're building a report of spending by customer and want an XLSX file as output."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select the XLSX format ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select the XLSX target type",src:n(4502).Z,width:"2640",height:"1386"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Navigate to the target location ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select destination filename",src:n(1806).Z,width:"2818",height:"444"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Customize any properties needed when writing the output file ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Set output parameters",src:n(9550).Z,width:"2776",height:"1026"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Run the pipeline!")),(0,i.kt)("p",null,"Once the target gem is created and validation passes you'll be able to find the code of your new Target in the ",(0,i.kt)("inlineCode",{parentName:"p"},"graph")," directory of your Pipeline code."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def ExcelTarget(spark: SparkSession, in0: DataFrame):\n    if Config.fabricName == "demos":\n        in0.write\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("usePlainNumberFormat", False)\\\n            .mode("overwrite")\\\n            .save("dbfs:/FileStore/Users/scott/customers.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n')))),(0,i.kt)("h3",{id:"writing-a-single-output-file"},"Writing a single output file"),(0,i.kt)("p",null,"As mentioned above, there's a caveat when working with any text-based files in Spark. Because of the distributed nature of the framework, you'll find that your output file is not just a single output file but instead a directory with multiple separately partitioned files within it."),(0,i.kt)("p",null,"For example, using ",(0,i.kt)("inlineCode",{parentName:"p"},"dbfs:/FileStore/Users/scott/customers.xlsx")," as my Target location I can see the following in DBFS after running my pipeline:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"customers.xlsx")," is, in reality, a directory...",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Target output is a directory",src:n(5067).Z,width:"796",height:"49"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"... that contains multiple partitions within it",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Target output is partitioned",src:n(6297).Z,width:"958",height:"263"}),(0,i.kt)("br",null))),(0,i.kt)("p",null,"Each file within this directory will be a separate valid XLSX file with a segment of the overall output data. If you want to output only a single file, you'll need to change your pipeline as such:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add a ",(0,i.kt)("inlineCode",{parentName:"li"},"Repartition")," gem in ",(0,i.kt)("inlineCode",{parentName:"li"},"Coalesce")," mode with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Partition Count")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),". ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Coalesce using Repartition",src:n(2722).Z,width:"2870",height:"1678"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Connect it between your second-to-last transformation and the target gem",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Attach coalesce before desired target",src:n(2014).Z,width:"1906",height:"882"}),(0,i.kt)("br",null))),(0,i.kt)("p",null,"After running, your output will still be a directory, but this time it will only contain a single output file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Single output after coalesce",src:n(5549).Z,width:"970",height:"120"})))}g.isMDXComponent=!0},2010:function(e,t,n){t.Z=n.p+"assets/images/xlsx_src_1-5313bccdece9c6a651be172d88ca7122.png"},3996:function(e,t,n){t.Z=n.p+"assets/images/xlsx_src_2-ef0f8a6104489d61311eeb07ee0e742a.png"},5156:function(e,t,n){t.Z=n.p+"assets/images/xlsx_src_3-051d6b07ccd8fa67b6f3740f0ab0461c.png"},7008:function(e,t,n){t.Z=n.p+"assets/images/xlsx_src_4-e283c92a4500361b25e90491c58fa4f7.png"},7787:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_0-a3c18689dca6634c76c38ecd6cd7b35a.png"},4502:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_1-3785e5869cbe8ce3b209f9bb639da7cd.png"},1806:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_2-2942acb3a7922b6739d852f441068d27.png"},9550:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_3-a28bf175888719e996d707cd3b12fed9.png"},5067:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_4-7d10b8bb4ee57b8b856ca7e92ace22a3.png"},2722:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_5.5-1f42007802b75662fd2128729bf05f6a.png"},6297:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_5-b236d1298d654ebd04ce3ed957b9d766.png"},2014:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_6-4fcf34461fd56bcf2dd36f29bb3b223a.png"},5549:function(e,t,n){t.Z=n.p+"assets/images/xlsx_tgt_7-f67147547149a66b6636ee0a2933726c.png"}}]);