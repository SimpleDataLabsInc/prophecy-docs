"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[29324],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>d});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=i(a),g=r,d=m["".concat(p,".").concat(g)]||m[g]||u[g]||s;return a?n.createElement(d,l(l({ref:t},c),{},{components:a})):n.createElement(d,l({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var i=2;i<s;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},29411:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>i});var n=a(58168),r=(a(96540),a(15680));const s={title:"FlattenSchema",id:"flatten-schema",description:"Flatten nested data",tags:["gems","schema","explode","flatten"]},l=void 0,o={unversionedId:"Spark/gems/transform/flatten-schema",id:"Spark/gems/transform/flatten-schema",title:"FlattenSchema",description:"Flatten nested data",source:"@site/docs/Spark/gems/transform/flattenschema.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/flatten-schema",permalink:"/Spark/gems/transform/flatten-schema",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"schema",permalink:"/tags/schema"},{label:"explode",permalink:"/tags/explode"},{label:"flatten",permalink:"/tags/flatten"}],version:"current",frontMatter:{title:"FlattenSchema",id:"flatten-schema",description:"Flatten nested data",tags:["gems","schema","explode","flatten"]},sidebar:"mySidebar",previous:{title:"Filter",permalink:"/Spark/gems/transform/filter"},next:{title:"FuzzyMatch",permalink:"/Spark/gems/transform/fuzzy-match"}},p={},i=[{value:"The Input",id:"the-input",level:2},{value:"The Expressions",id:"the-expressions",level:2},{value:"The Output",id:"the-output",level:2}],c={toc:i},m="wrapper";function u(e){let{components:t,...s}=e;return(0,r.yg)(m,(0,n.A)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h3",null,(0,r.yg)("span",{class:"badge"},"Spark Gem")),(0,r.yg)("p",null,"When processing raw data it can be useful to flatten complex data types like structures and arrays into simpler, flatter schemas."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"The FlattenSchema gem",src:a(16464).A,width:"290",height:"305"})),(0,r.yg)("h2",{id:"the-input"},"The Input"),(0,r.yg)("p",null,"FlattenSchema works on DataFrames that have nested columns that you'd like to extract into a flat schema."),(0,r.yg)("p",null,"For example, with an input schema like so:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Input schema",src:a(29081).A,width:"376",height:"434"})),(0,r.yg)("p",null,"And the data looks like so:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Input data",src:a(30856).A,width:"2764",height:"416"})),(0,r.yg)("p",null,"We want to extract ",(0,r.yg)("inlineCode",{parentName:"p"},"count")," from ",(0,r.yg)("em",{parentName:"p"},"result")," and all of the columns from ",(0,r.yg)("em",{parentName:"p"},"events")," into a flattened schema."),(0,r.yg)("h2",{id:"the-expressions"},"The Expressions"),(0,r.yg)("p",null,"Having added a FlattenSchema gem to your pipeline, all you need to do is click the column names you wish to extract and they'll be added to the ",(0,r.yg)("strong",{parentName:"p"},"Expressions")," section. Then, you can change the values in the ",(0,r.yg)("strong",{parentName:"p"},"Target Column")," to change the name of output columns."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Adding Expressions",src:a(6211).A,width:"630",height:"432"})),(0,r.yg)("p",null,"The ",(0,r.yg)("strong",{parentName:"p"},"Columns Delimiter")," dropdown allows you to control how the names of the new columns are derived. Currently dashes and underscores are supported."),(0,r.yg)("h2",{id:"the-output"},"The Output"),(0,r.yg)("p",null,"If we check the ",(0,r.yg)("strong",{parentName:"p"},"Output")," tab in the gem, you'll see the schema that we've created using the selected columns."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Output schema",src:a(68954).A,width:"404",height:"531"})),(0,r.yg)("p",null,"And here's what the output data looks like:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Output interim",src:a(85507).A,width:"2766",height:"1436"})),(0,r.yg)("p",null,"No more nested structures!"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"For more advanced use cases, the Spark ",(0,r.yg)("inlineCode",{parentName:"p"},"explode")," function is available to use in the ",(0,r.yg)("a",{parentName:"p",href:"/Spark/gems/transform/reformat"},"Reformat")," gem, ",(0,r.yg)("a",{parentName:"p",href:"/Spark/gems/custom/sql-statement"},"Custom SQL")," gem, or anywhere else that accepts Spark expressions.")))}u.isMDXComponent=!0},6211:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_add_exp-9b144921f044f3a1ad68091d823283a1.gif"},16464:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_gem-088dcb90a9e1679a18b6f2497692a93b.png"},29081:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_input-252ad05824ac1130f88196d0d1132dde.png"},30856:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_input_interim-895ec66b9df67847cfb7df93737c7236.png"},68954:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_output-2377e8e555ac97a7dcd5c9faf7a32045.png"},85507:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/flatten_output_interim-66b78f2b754bce19f56ff25afa3c2037.png"}}]);