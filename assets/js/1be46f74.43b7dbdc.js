"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[2701],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),u=n,d=m["".concat(l,".").concat(u)]||m[u]||g[u]||i;return r?a.createElement(d,o(o({ref:t},c),{},{components:r})):a.createElement(d,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},16310:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={title:"Spark Structured Streaming",id:"streaming",description:"Prophecy Streaming Gems",tags:["streaming","gems","source","target"]},o=void 0,s={unversionedId:"low-code-spark/spark-streaming/streaming",id:"low-code-spark/spark-streaming/streaming",title:"Spark Structured Streaming",description:"Prophecy Streaming Gems",source:"@site/docs/low-code-spark/spark-streaming/spark-streaming.md",sourceDirName:"low-code-spark/spark-streaming",slug:"/low-code-spark/spark-streaming/",permalink:"/low-code-spark/spark-streaming/",draft:!1,tags:[{label:"streaming",permalink:"/tags/streaming"},{label:"gems",permalink:"/tags/gems"},{label:"source",permalink:"/tags/source"},{label:"target",permalink:"/tags/target"}],version:"current",frontMatter:{title:"Spark Structured Streaming",id:"streaming",description:"Prophecy Streaming Gems",tags:["streaming","gems","source","target"]},sidebar:"defaultSidebar",previous:{title:"Gem builder",permalink:"/low-code-spark/extensibility/gem-builder"},next:{title:"Streaming Sources and Targets",permalink:"/category/streaming-sources-and-targets"}},l={},p=[{value:"Spark Structured Streaming using Prophecy IDE",id:"spark-structured-streaming-using-prophecy-ide",level:2},{value:"Working with a Streaming Pipeline",id:"working-with-a-streaming-pipeline",level:3},{value:"Streaming Sources and Targets",id:"streaming-sources-and-targets",level:3},{value:"Streaming Transformations",id:"streaming-transformations",level:3}],c={toc:p},m="wrapper";function g(e){let{components:t,...i}=e;return(0,n.kt)(m,(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Prophecy 2.7 introduces native support for streaming data running on Spark Structured Streaming. The streaming capability is available for ",(0,n.kt)("inlineCode",{parentName:"p"},"Python")," projects. Support for Scala will be added in the future."),(0,n.kt)("p",null,"Streaming pipelines work differently from batch pipelines:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Streaming applications are always running, continuously processing incoming data."),(0,n.kt)("li",{parentName:"ol"},"Data is processed in micro-batches, with the notable exception of ",(0,n.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#continuous-processing"},"Continuous Triggers")," (an experimental feature available in Spark3.3). Continuous triggers are not supported by Prophecy."),(0,n.kt)("li",{parentName:"ol"},"Streaming applications handle transient data rather than maintain the entire data. Aggregations and joins require watermarking for maintaining a limited state."),(0,n.kt)("li",{parentName:"ol"},"All Streaming Datasets can behave similarly to Batch datasets using the Spark ",(0,n.kt)("inlineCode",{parentName:"li"},"ForEachBatch"),". More on ",(0,n.kt)("inlineCode",{parentName:"li"},"ForEachBatch")," ",(0,n.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.sql.streaming.DataStreamWriter.foreachBatch.html"},"here")," Note that ",(0,n.kt)("inlineCode",{parentName:"li"},"forEachBatch")," is not supported by Prophecy.")),(0,n.kt)("p",null,"This documentation assumes you are already familiar with how Structured Streaming works. For more information, you can consult the Structured Streaming documentation ",(0,n.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html"},"here"),"."),(0,n.kt)("h2",{id:"spark-structured-streaming-using-prophecy-ide"},"Spark Structured Streaming using Prophecy IDE"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"How to Create a Streaming Pipeline",src:r(94282).Z,width:"1816",height:"1270"}),"\nWithin a Prophecy ",(0,n.kt)("inlineCode",{parentName:"p"},"Python")," Project, a user can create a Structured Streaming Pipeline using the Streaming(beta) mode."),(0,n.kt)("h3",{id:"working-with-a-streaming-pipeline"},"Working with a Streaming Pipeline"),(0,n.kt)("p",null,"To create a Streaming Pipeline, users can follow a process similar to creating a Batch Pipeline in a ",(0,n.kt)("inlineCode",{parentName:"p"},"Python")," project. For more on Pipeline creation and understanding Prophecy pipelines, please check ",(0,n.kt)("a",{parentName:"p",href:"/concepts/project/pipeline"},"this")," link. Streaming Pipelines work differently from Batch Pipelines in the following ways:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Partial runs are not supported for streaming applications. A partial run is only allowed on a ",(0,n.kt)("inlineCode",{parentName:"li"},"Streaming Target")," Gem."),(0,n.kt)("li",{parentName:"ol"},"Streaming pipelines are long-running tasks and process data at intervals. Currently, they do not capture cumulative statistics."),(0,n.kt)("li",{parentName:"ol"},'Streaming Pipelines are continuous and do not stop running. To terminate a Streaming Pipeline, users need to click the "X" button. A Streaming Pipeline is an ongoing process and will not terminate itself.'),(0,n.kt)("li",{parentName:"ol"},"To deploy the Pipeline on Databricks, users can follow the same process described ",(0,n.kt)("a",{parentName:"li",href:"/low-code-jobs/databricks-jobs"},"here"),". A scheduled Job will check if the Streaming Pipeline is running every X minutes. If the Pipeline is not running, the Job will attempt to start it.")),(0,n.kt)("h3",{id:"streaming-sources-and-targets"},"Streaming Sources and Targets"),(0,n.kt)("p",null,"Spark Structured Streaming applications have a variety of source and target components available to construct Piplines."),(0,n.kt)("p",null,"Streaming source gems render to ",(0,n.kt)("inlineCode",{parentName:"p"},"spark.readStream()")," on the Spark side. Currently, we support file stream-based sources and targets, warehouse-based targets, and event stream-based sources and targets. For more information on Streaming Source and Target Gems, click ",(0,n.kt)("a",{parentName:"p",href:"/category/streaming-sources-and-targets"},"here"),"."),(0,n.kt)("p",null,"Additionally, any batch data sources can be used in a streaming application. Batch data sources are read using the ",(0,n.kt)("inlineCode",{parentName:"p"},"spark.read()")," function at every processing trigger (due to Spark evaluating lazily). More on triggers ",(0,n.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#triggers"},"here"),". For more information on Batch Source and Target Gems, click ",(0,n.kt)("a",{parentName:"p",href:"/low-code-spark/gems/source-target/"},"here"),"."),(0,n.kt)("h3",{id:"streaming-transformations"},"Streaming Transformations"),(0,n.kt)("p",null,"For more information on Streaming Transformations, click ",(0,n.kt)("a",{parentName:"p",href:"/low-code-spark/spark-streaming/transformations-streaming"},"here"),"."))}g.isMDXComponent=!0},94282:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/create-streaming-pipeline-09c38e5fc7c91853e19a517c3024c518.png"}}]);