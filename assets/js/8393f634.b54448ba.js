"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[49829],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var i=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var r=i.createContext({}),p=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return i.createElement(r.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,g=u["".concat(r,".").concat(m)]||u[m]||c[m]||a;return t?i.createElement(g,l(l({ref:n},d),{},{components:t})):i.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9317:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=t(58168),o=(t(96540),t(15680));const a={title:"Optimization functions",id:"optimization-functions",description:"Optimization functions",tags:["gem builder"]},l=void 0,s={unversionedId:"extensibility/gem-builder/optimization-functions",id:"extensibility/gem-builder/optimization-functions",title:"Optimization functions",description:"Optimization functions",source:"@site/docs/extensibility/gem-builder/optimization-functions.md",sourceDirName:"extensibility/gem-builder",slug:"/extensibility/gem-builder/optimization-functions",permalink:"/extensibility/gem-builder/optimization-functions",draft:!1,tags:[{label:"gem builder",permalink:"/tags/gem-builder"}],version:"current",frontMatter:{title:"Optimization functions",id:"optimization-functions",description:"Optimization functions",tags:["gem builder"]},sidebar:"mySidebar",previous:{title:"Gem Builder for Spark",permalink:"/extensibility/gem-builder/spark-gem-builder"}},r={},p=[{value:"Turn off loop unrolling",id:"turn-off-loop-unrolling",level:2},{value:"Replace variables and optimize objects",id:"replace-variables-and-optimize-objects",level:2},{value:"Disable all optimizations",id:"disable-all-optimizations",level:2}],d={toc:p},u="wrapper";function c(e){let{components:n,...a}=e;return(0,o.yg)(u,(0,i.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Custom gems create code by defining functionality in their ",(0,o.yg)("inlineCode",{parentName:"p"},"def apply()")," method.\nBy default Prophecy will apply optimizations to this generated code to assist the Spark\nCatalyst optimization engine when it creates the Spark Plan. The optimizations make replacements\nusing functionally equivalent code, but in some corner cases this may cause unwanted side effects."),(0,o.yg)("p",null,"In certain corner cases you may want disable some or all optimizations."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"These functions are Python specific.")),(0,o.yg)("h2",{id:"turn-off-loop-unrolling"},"Turn off loop unrolling"),(0,o.yg)("p",null,"By default Prophecy will unroll small static loops."),(0,o.yg)("p",null,"You can turn off loop unrolling by adding ",(0,o.yg)("inlineCode",{parentName:"p"},"# skipLoopUnRolling")," as a comment on the same line as the for loop."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Turn off loop unrolling example",src:t(69305).A,width:"719",height:"388"})),(0,o.yg)("h2",{id:"replace-variables-and-optimize-objects"},"Replace variables and optimize objects"),(0,o.yg)("p",null,"You can use two functions to disable substitution of variables during the optimization step."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"SubstituteDisabled")," - Disables the substitution of this variable with the value in all places it's used.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"PostSubstituteDisabled")," - Only performs optimization substitution if all instances of the variable can be replaced."))),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},'def testLoopUnRoll():\n    myCols: SubstituteDisabled = [\'a\']\n    cond = None\n    for scdCol in myCols:\n        if cond is None:\n            cond = (existingDF[scdCol] != updatesDF[scdCol])\n        else:\n            cond = (cond | (existingDF[scdCol] != updatesDF[scdCol]))\n    stagedUpdatesDF = updatesDF.where((existingDF["current"] == lit("true")) & (cond))\n\n    cols: PostSubstituteDisabled = [\'a\']\n    updateCond = None\n    for scdCol1 in cols:\n        if updateCond is None:\n            updateCond = (existingDF[scdCol1] != updatesDF[scdCol1])\n        else:\n            updateCond = (updateCond | (existingDF[scdCol1] != updatesDF[scdCol1]))\n    updatedDF = updatesDF.where((existingDF["current"] == lit("true")) & (updateCond))\n\n    cols1: PostSubstituteDisabled = [\'a\']\n    updateCond1 = None\n    for scdCol2 in cols1:#skipLoopUnRolling\n        if updateCond is None:\n            updateCond1 = (existingDF[scdCol2] != updatesDF[scdCol2])\n        else:\n            updateCond1 = (updateCond | (existingDF[scdCol2] != updatesDF[scdCol2]))\n    updatedDF1 = updatesDF.where((existingDF["current"] == lit("true")) & (updateCond1))\n')),(0,o.yg)("p",null,"The previous code sample becomes the following:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"def testLoopUnRoll():\n    myCols = ['a']\n    cond = None\n\n    for scdCol in myCols:\n        if cond is None:\n            cond = (existingDF[scdCol] != updatesDF[scdCol])\n        else:\n            cond = (cond | (existingDF[scdCol] != updatesDF[scdCol]))\n\n    updateCond = (existingDF['a'] != updatesDF['a'])\n    cols1 = ['a']\n\n    for scdCol2 in cols1:\n        if updateCond is None:\n            updateCond1 = (existingDF[scdCol2] != updatesDF[scdCol2])\n        else:\n            updateCond1 = (updateCond | (existingDF[scdCol2] != updatesDF[scdCol2]))\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"In above code sample, ",(0,o.yg)("inlineCode",{parentName:"li"},"SubstituteDisabled")," (",(0,o.yg)("inlineCode",{parentName:"li"},"myCols"),") did not replace the variable so the entire loop was not optimized."),(0,o.yg)("li",{parentName:"ul"},"In the first occurrence of ",(0,o.yg)("inlineCode",{parentName:"li"},"PostSubstituteDisabled")," (",(0,o.yg)("inlineCode",{parentName:"li"},"cols"),"), all instances of ",(0,o.yg)("inlineCode",{parentName:"li"},"cols")," could be replaced so the original variable was removed."),(0,o.yg)("li",{parentName:"ul"},"In the second occurrence of ",(0,o.yg)("inlineCode",{parentName:"li"},"PostSubstituteDisabled")," (",(0,o.yg)("inlineCode",{parentName:"li"},"cols1"),"), the for loop was marked to skip optimization (",(0,o.yg)("inlineCode",{parentName:"li"},"skipLoopUnRolling"),").\nSince at least one instance of the ",(0,o.yg)("inlineCode",{parentName:"li"},"cols1")," variable was marked to avoid optimization, the variable could not be optimized.")),(0,o.yg)("h2",{id:"disable-all-optimizations"},"Disable all optimizations"),(0,o.yg)("p",null,"You can turn off all optimizations by setting the optimize function stub to ",(0,o.yg)("inlineCode",{parentName:"p"},"False"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-py"},"def optimizeCode(self) -> bool:\n        return False\n")))}c.isMDXComponent=!0},69305:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/turn-off-loop-unrolling-d8b63f2c79514ed80a7b564d1530c9b2.png"}}]);