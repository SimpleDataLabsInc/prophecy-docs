"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[70778],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>g});var n=a(96540);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=i(a),d=l,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||r;return a?n.createElement(g,o(o({ref:t},u),{},{components:a})):n.createElement(g,o({ref:t},u))}));function g(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:l,o[1]=s;for(var i=2;i<r;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>o});var n=a(96540),l=a(20053);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.A)(r.tabItem,o),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>w});var n=a(58168),l=a(96540),r=a(20053),o=a(23104),s=a(56347),c=a(57485),i=a(31682),u=a(89466);function m(e){return function(e){return l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}function p(e){const{values:t,children:a}=e;return(0,l.useMemo)((()=>{const e=t??m(a);return function(e){const t=(0,i.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,s.W6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,c.aZ)(r),(0,l.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function f(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=p(e),[o,s]=(0,l.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[c,i]=g({queryString:a,groupId:n}),[m,f]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,u.Dv)(a);return[n,(0,l.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),h=(()=>{const e=c??m;return d({value:e,tabValues:r})?e:null})();(0,l.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:o,selectValue:(0,l.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),i(e),f(e)}),[i,f,r]),tabValues:r}}var h=a(92303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:s,selectValue:c,tabValues:i}=e;const u=[],{blockElementScrollPositionUntilNextRender:m}=(0,o.a_)(),p=e=>{const t=e.currentTarget,a=u.indexOf(t),n=i[a].value;n!==s&&(m(t),c(n))},d=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},t)},i.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:p},o,{className:(0,r.A)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":s===t})}),a??t)})))}function _(e){let{lazy:t,children:a,selectedValue:n}=e;const r=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=f(e);return l.createElement("div",{className:(0,r.A)("tabs-container",y.tabList)},l.createElement(b,(0,n.A)({},e,t)),l.createElement(_,(0,n.A)({},e,t)))}function w(e){const t=(0,h.A)();return l.createElement(v,(0,n.A)({key:String(t)},e))}},11002:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var n=a(58168),l=(a(96540),a(15680)),r=a(11470),o=a(19365);const s={sidebar_position:4,title:"CompareColumns",id:"compare-columns",description:"Compare columns between two dataframes",tags:["gems","compare","diff","compare-columns"]},c=void 0,i={unversionedId:"Spark/gems/join-split/compare-columns",id:"Spark/gems/join-split/compare-columns",title:"CompareColumns",description:"Compare columns between two dataframes",source:"@site/docs/Spark/gems/join-split/compare-columns.md",sourceDirName:"Spark/gems/join-split",slug:"/Spark/gems/join-split/compare-columns",permalink:"/Spark/gems/join-split/compare-columns",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"compare",permalink:"/tags/compare"},{label:"diff",permalink:"/tags/diff"},{label:"compare-columns",permalink:"/tags/compare-columns"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"CompareColumns",id:"compare-columns",description:"Compare columns between two dataframes",tags:["gems","compare","diff","compare-columns"]},sidebar:"mySidebar",previous:{title:"RowDistributor",permalink:"/Spark/gems/join-split/row-distributor"},next:{title:"Custom",permalink:"/Spark/gems/custom/"}},u={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Example - Compare columns of two DataFrames",id:"example---compare-columns-of-two-dataframes",level:3},{value:"Generated code",id:"generated-code",level:3}],p={toc:m},d="wrapper";function g(e){let{components:t,...a}=e;return(0,l.yg)(d,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h3",null,(0,l.yg)("span",{class:"badge"},"Spark Gem")),(0,l.yg)("p",null,"The CompareColumns Gem lets you compare columns between two DataFrames based on the key id columns defined."),(0,l.yg)("h2",{id:"parameters"},"Parameters"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:"left"},"Parameter"),(0,l.yg)("th",{parentName:"tr",align:"left"},"Description"),(0,l.yg)("th",{parentName:"tr",align:"left"},"Required"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"DataFrame 1"),(0,l.yg)("td",{parentName:"tr",align:"left"},"First input DataFrame"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"DataFrame 2"),(0,l.yg)("td",{parentName:"tr",align:"left"},"Second input DataFrame"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"ID columns to retain(Select Id Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"List of columns that are used joining two dataframes"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Output Column Name(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the column name that was compared among dataframes"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Match Count Column Name(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the column that shows the count of rows that matched between two dataframes"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Mismatch Count Column Name(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the column that shows the count of rows that mismatched between two dataframes"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Mismatch Example Left Column Name(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the column displaying an incorrect left column value"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Mismatch Example Right Column Name(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the column displaying an incorrect right column value"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"left"},"Mismatch Example ID Column Prefix(Select Output Columns)"),(0,l.yg)("td",{parentName:"tr",align:"left"},"In the output, alias name of the ID column value that mismatched between two dataframes"),(0,l.yg)("td",{parentName:"tr",align:"left"},"True")))),(0,l.yg)("h3",{id:"example---compare-columns-of-two-dataframes"},"Example - Compare columns of two DataFrames"),(0,l.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,l.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,l.yg)("iframe",{src:"https://github.com/SimpleDataLabsInc/prophecy-docs/assets/130362885/23c23ea9-e98b-4624-91a8-597cfaf0e647",title:"Compare columns",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,l.yg)("h3",{id:"generated-code"},"Generated code"),(0,l.yg)(r.A,{mdxType:"Tabs"},(0,l.yg)(o.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-py"},'def CompareColumns_1(spark: SparkSession, in0: DataFrame, in1: DataFrame) -> DataFrame:\n    joined = exploded1\\\n                 .join(\n                   exploded2,\n                   reduce(\n                     lambda a, c: a & c,\n                     [col(f"exploded1.column_name") == col(f"exploded2.column_name"),                       col(f"exploded1.customer_id") == col(f"exploded2.customer_id")],\n                     lit(True)\n                   ),\n                   "full_outer"\n                 )\\\n                 .select(\n                   coalesce(col(f"exploded1.column_name"), col(f"exploded2.column_name")).alias("column_name"),\n                   coalesce(col(f"exploded1.customer_id"), col(f"exploded2.customer_id")).alias("customer_id"),\n                   col(\n                       f"exploded1.##value##"\n                     )\\\n                     .alias(\n                     "##left_value##"\n                   ),\n                   col(\n                       f"exploded2.##value##"\n                     )\\\n                     .alias(\n                     "##right_value##"\n                   )\n                 )\\\n                 .withColumn(\n                   "match_count",\n                   when(\n                       coalesce(\n                         (\n                           col("##left_value##")\n                           == col(\n                             "##right_value##"\n                           )\n                         ),\n                         (\n                           col(\n                               "##left_value##"\n                             )\\\n                             .isNull()\n                           & col(\n                               "##right_value##"\n                             )\\\n                             .isNull()\n                         )\n                       ),\n                       lit(1)\n                     )\\\n                     .otherwise(lit(0))\n                 )\\\n                 .withColumn(\n        "mismatch_count",\n        when(\n            coalesce(\n              (\n                col("##left_value##")\n                != col(\n                  "##right_value##"\n                )\n              ),\n              ~ (\n                col(\n                    "##left_value##"\n                  )\\\n                  .isNull()\n                & col(\n                    "##right_value##"\n                  )\\\n                  .isNull()\n              )\n            ),\n            lit(1)\n          )\\\n          .otherwise(lit(0))\n                 )\n    mismatchExamples = joined\\\n                           .select(\n                             col("column_name"),\n                             col("customer_id"),\n                             lit(0).alias("match_count"),\n                             lit(0).alias("mismatch_count"),\n                             col(\n                                 "##left_value##"\n                               )\\\n                               .alias("mismatch_example_left"),\n                             col(\n                                 "##right_value##"\n                               )\\\n                               .alias("mismatch_example_right")\n                           )\\\n                           .dropDuplicates(["column_name"])\n\n    return joined\\\n        .union(mismatchExamples)\\\n        .groupBy("column_name")\\\n        .agg(\n          sum("match_count").alias("match_count"),\n          sum("mismatch_count").alias("mismatch_count"),\n          first(col("mismatch_example_left"), ignorenulls = True).alias("mismatch_example_left"),\n          first(col("mismatch_example_right"), ignorenulls = True).alias("mismatch_example_right"),\n          first(\n              when(coalesce(col("mismatch_example_left"), col("mismatch_example_right")).isNotNull(), col("customer_id"))\\\n                .otherwise(lit(None)),\n              ignorenulls = True\n            )\\\n            .alias("mismatch_example_customer_id")\n        )\\\n        .orderBy(col("mismatch_count").desc(), col("column_name"))\n\n'))),(0,l.yg)(o.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-scala"},'object CompareColumns_1 {\n   def apply(context: Context, in0: DataFrame, in1: DataFrame): DataFrame = {\n    import org.apache.spark.sql.expressions.Window\n    val joined = in0\n      .select(\n        col("customer_id"),\n        explode_outer(\n          map(\n            (in0.columns.toSet -- List("customer_id").toSet).toSeq.flatMap(c =>\n              List(lit(c), col(c).cast("string"))\n            ): _*\n          )\n        ).as(List("column_name", "##value##"))\n      )\n      .as("exploded1")\n      .join(\n        in1\n          .select(\n            col("customer_id"),\n            explode_outer(\n              map(\n                (in0.columns.toSet -- List("customer_id").toSet).toSeq\n                  .flatMap(c => List(lit(c), col(c).cast("string"))): _*\n              )\n            ).as(List("column_name", "##value##"))\n          )\n          .as("exploded2"),\n        lit(true)\n          .and(col("exploded1.column_name") === col("exploded2.column_name"))\n          .and(col("exploded1.customer_id") === col("exploded2.customer_id")),\n        "full_outer"\n      )\n      .select(\n        coalesce(col("exploded1.column_name"), col("exploded2.column_name"))\n          .as("column_name"),\n        coalesce(col("exploded1.customer_id"), col("exploded2.customer_id"))\n          .as("customer_id"),\n        col("exploded1.##value##").as("##left_value##"),\n        col("exploded2.##value##").as("##right_value##")\n      )\n      .withColumn(\n        "match_count",\n        when(\n          coalesce(col("##left_value##") === col("##right_value##"),\n                   col("##left_value##").isNull && col("##right_value##").isNull\n          ),\n          lit(1)\n        ).otherwise(lit(0))\n      )\n      .withColumn(\n        "mismatch_count",\n        when(coalesce(\n               col("##left_value##") =!= col("##right_value##"),\n               !(col("##left_value##").isNull && col("##right_value##").isNull)\n             ),\n             lit(1)\n        ).otherwise(lit(0))\n      )\n    joined\n      .groupBy("column_name")\n      .agg(\n        sum("match_count").as("match_count"),\n        sum("mismatch_count").as("mismatch_count"),\n        first(col("mismatch_example_left"), ignoreNulls = true)\n          .as("mismatch_example_left"),\n        first(col("mismatch_example_right"), ignoreNulls = true)\n          .as("mismatch_example_right"),\n        first(when(coalesce(col("mismatch_example_left"),\n                            col("mismatch_example_right")\n                   ).isNotNull,\n                   col("customer_id")\n              ).otherwise(lit(null)),\n              ignoreNulls = true\n        ).as("mismatch_example_customer_id")\n      )\n      .orderBy(col("mismatch_count").desc, col("column_name"))\n   }\n}\n')))),(0,l.yg)("p",null,"Below are the steps that are performed to compare two DataFrames in compare column Gem:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Pivot the DataFrame to get the key column's, compare column name and value"),(0,l.yg)("li",{parentName:"ul"},"Join the pivoted DataFrames and compare the column value using key column's"),(0,l.yg)("li",{parentName:"ul"},"Calculate the match and mismatch record counts")),(0,l.yg)("admonition",{type:"note"},(0,l.yg)("p",{parentName:"admonition"},"Repartition the DataFrames as they will be exploded and joined with each other")))}g.isMDXComponent=!0}}]);