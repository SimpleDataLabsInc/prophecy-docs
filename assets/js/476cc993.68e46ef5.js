"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[132],{3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return k}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var u=n.createContext({}),p=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(u.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,u=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),s=p(a),k=r,N=s["".concat(u,".").concat(k)]||s[k]||m[k]||l;return a?n.createElement(N,i(i({ref:e},d),{},{components:a})):n.createElement(N,i({ref:e},d))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},2360:function(t,e,a){a.d(e,{Z:function(){return i}});var n=a(7294),r=a(6010),l="tabItem_OmH5";function i(t){var e=t.children,a=t.hidden,i=t.className;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},e)}},9877:function(t,e,a){a.d(e,{Z:function(){return k}});var n=a(7462),r=a(7294),l=a(2389),i=a(7392),o=a(7094),u=a(2466),p=a(6010),d="tabList_uSqn",m="tabItem_LplD";function s(t){var e,a,l,s=t.lazy,k=t.block,N=t.defaultValue,c=t.values,g=t.groupId,f=t.className,b=r.Children.map(t.children,(function(t){if((0,r.isValidElement)(t)&&void 0!==t.props.value)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=c?c:b.map((function(t){var e=t.props;return{value:e.value,label:e.label,attributes:e.attributes}})),v=(0,i.l)(h,(function(t,e){return t.value===e.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===N?N:null!=(e=null!=N?N:null==(a=b.find((function(t){return t.props.default})))?void 0:a.props.value)?e:null==(l=b[0])?void 0:l.props.value;if(null!==y&&!h.some((function(t){return t.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.U)(),x=w.tabGroupChoices,C=w.setTabGroupChoices,F=(0,r.useState)(y),T=F[0],E=F[1],P=[],S=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var D=x[g];null!=D&&D!==T&&h.some((function(t){return t.value===D}))&&E(D)}var I=function(t){var e=t.currentTarget,a=P.indexOf(e),n=h[a].value;n!==T&&(S(e),E(n),null!=g&&C(g,n))},O=function(t){var e,a=null;switch(t.key){case"ArrowRight":var n=P.indexOf(t.currentTarget)+1;a=P[n]||P[0];break;case"ArrowLeft":var r=P.indexOf(t.currentTarget)-1;a=P[r]||P[P.length-1]}null==(e=a)||e.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":k},f)},h.map((function(t){var e=t.value,a=t.label,l=t.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===e?0:-1,"aria-selected":T===e,key:e,ref:function(t){return P.push(t)},onKeyDown:O,onFocus:I,onClick:I},l,{className:(0,p.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":T===e})}),null!=a?a:e)}))),s?(0,r.cloneElement)(b.filter((function(t){return t.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(t,e){return(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==T})}))))}function k(t){var e=(0,l.Z)();return r.createElement(s,(0,n.Z)({key:String(e)},t))}},3444:function(t,e,a){a.r(e),a.d(e,{assets:function(){return s},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return k}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(9877),o=a(2360),u=["components"],p={title:"XLSX (Excel)",id:"xlsx",description:"XLSX (Excel)",sidebar_position:10,tags:["gems","file","xlsx"]},d=void 0,m={unversionedId:"low-code-spark/gems/source-target/file/xlsx",id:"low-code-spark/gems/source-target/file/xlsx",title:"XLSX (Excel)",description:"XLSX (Excel)",source:"@site/docs/low-code-spark/gems/source-target/file/xlsx.md",sourceDirName:"low-code-spark/gems/source-target/file",slug:"/low-code-spark/gems/source-target/file/xlsx",permalink:"/low-code-spark/gems/source-target/file/xlsx",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"xlsx",permalink:"/tags/xlsx"}],version:"current",sidebarPosition:10,frontMatter:{title:"XLSX (Excel)",id:"xlsx",description:"XLSX (Excel)",sidebar_position:10,tags:["gems","file","xlsx"]},sidebar:"defaultSidebar",previous:{title:"Kafka",permalink:"/low-code-spark/gems/source-target/file/kafka"},next:{title:"Warehouse",permalink:"/low-code-spark/gems/source-target/warehouse/"}},s={},k=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Example output",id:"example-output",level:2}],N={toc:k};function c(t){var e=t.components,a=(0,r.Z)(t,u);return(0,l.kt)("wrapper",(0,n.Z)({},N,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"If you've ever done anything with numbers in your line of work odds are you've worked with Excel at one point or another. Prophecy supports the format as both a data source and data target, so if you're migrating from a legacy system or you need to produce an Excel-compatible file for a report, we've got you covered."),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If you receive an error about the ",(0,l.kt)("inlineCode",{parentName:"p"},"excel")," format not being available you must install a library on your Databricks cluster."),(0,l.kt)("ol",{parentName:"div"},(0,l.kt)("li",{parentName:"ol"},"Navigate to your cluster settings page in your Databricks workspace"),(0,l.kt)("li",{parentName:"ol"},"Click the ",(0,l.kt)("inlineCode",{parentName:"li"},"Libraries")," tab"),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Install new")),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Maven")),(0,l.kt)("li",{parentName:"ol"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"com.crealytics:spark-excel_2.12:3.2.1_0.17.1")," in the ",(0,l.kt)("inlineCode",{parentName:"li"},"Coordinates")," field"),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Install"))),(0,l.kt)("p",{parentName:"div"},"Refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.databricks.com/libraries/cluster-libraries.html#install-a-library-on-a-cluster"},"Databricks documentation")," for more information if needed."))),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,l.kt)("p",null,"The following is a list of options that are available while using XLSX as a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"Source")),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Column Name of Corrupt Record"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the column to create for corrupt records"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Column Name of Row Number"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the column to create using the original row number"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"None")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Data Address"),(0,l.kt)("td",{parentName:"tr",align:null},"Data address to read (see ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/crealytics/spark-excel#data-addresses"},"here"),") for more information"),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"A1")," (Everything)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Date Format"),(0,l.kt)("td",{parentName:"tr",align:null},"Date format to use"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Excerpt Size"),(0,l.kt)("td",{parentName:"tr",align:null},"Except Size"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,l.kt)("td",{parentName:"tr",align:null},"Input file extension"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"xlsx"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Header"),(0,l.kt)("td",{parentName:"tr",align:null},"First line in input is a header"),(0,l.kt)("td",{parentName:"tr",align:null},"True"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ignore After Header"),(0,l.kt)("td",{parentName:"tr",align:null},"Number of rows to ignore after header"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"0"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ignore Leading Whitespace"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Ignore Trailing Whitespace"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Infer Schema"),(0,l.kt)("td",{parentName:"tr",align:null},"Infer the schema of the input. ",(0,l.kt)("br",null),(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"td"},"Note:")," This setting is provided directly by the ",(0,l.kt)("inlineCode",{parentName:"td"},"spark-excel")," library and is different than the ",(0,l.kt)("inlineCode",{parentName:"td"},"Infer Schema")," button in the Prophecy UI. Both should provide the same results."),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Keep Undefined Rows"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, keeps undefined Excel rows"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Locale"),(0,l.kt)("td",{parentName:"tr",align:null},"A language tag in the IETF BCP 47 format"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"US"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NaN Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to use in the case of NaN"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"NaN"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Negative Infinity"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to use in the case of negative infinity"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"Inf"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Null Value"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to use for Null"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Parse Mode"),(0,l.kt)("td",{parentName:"tr",align:null},"Parsing mode. Supports ",(0,l.kt)("inlineCode",{parentName:"td"},"Permissive"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"Drop Malformed")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"Fail Fast")),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Permissive"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Positive Infinity"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to use in case of positive infinity"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"Inf"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Sampling Ratio"),(0,l.kt)("td",{parentName:"tr",align:null},"Defines how much of the input to sample from when inferring the schema."),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"1.0"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Timestamp Format"),(0,l.kt)("td",{parentName:"tr",align:null},"Format to parse timestamps from text cells"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Use Null for Error Cells"),(0,l.kt)("td",{parentName:"tr",align:null},"Use null value for error cells"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Workbook Password"),(0,l.kt)("td",{parentName:"tr",align:null},"Password to secure workbook"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Timezone ID"),(0,l.kt)("td",{parentName:"tr",align:null},"Timezone ID for ",(0,l.kt)("inlineCode",{parentName:"td"},"Date"),"s/",(0,l.kt)("inlineCode",{parentName:"td"},"Timestamp"),"s taken from the IANA Time Zone Database.",(0,l.kt)("br",null),(0,l.kt)("br",null)," ",(0,l.kt)("strong",{parentName:"td"},"Note:")," See ",(0,l.kt)("a",{parentName:"td",href:"https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html"},"here")," for valid values."),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"(empty)")))),(0,l.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,l.kt)("p",null,"The following is a list of options that are available while using XLSX as a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"Target")),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Data Address"),(0,l.kt)("td",{parentName:"tr",align:null},"Data address to write output to"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"A1"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,l.kt)("td",{parentName:"tr",align:null},"File extension used when writing"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"xlsx"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Header"),(0,l.kt)("td",{parentName:"tr",align:null},"Write header to file"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Locale"),(0,l.kt)("td",{parentName:"tr",align:null},"A language tag in the IETF BCP 47 format"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"US"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Date Format"),(0,l.kt)("td",{parentName:"tr",align:null},"Format to use for ",(0,l.kt)("inlineCode",{parentName:"td"},"Date")," columns"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Use Plain Number Format"),(0,l.kt)("td",{parentName:"tr",align:null},"If true, format the cells without rounding and scientific notations"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"False"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Workbook Password"),(0,l.kt)("td",{parentName:"tr",align:null},"Password to secure workbook"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Write Mode"),(0,l.kt)("td",{parentName:"tr",align:null},"Write mode, same as underlying Spark write mode"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"append"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Parition Columns"),(0,l.kt)("td",{parentName:"tr",align:null},"Columns to partition output files by"),(0,l.kt)("td",{parentName:"tr",align:null},"False"),(0,l.kt)("td",{parentName:"tr",align:null},"(empty)")))),(0,l.kt)("h2",{id:"example-output"},"Example output"),(0,l.kt)("p",null,"Below is a snippet of the optimized code that is generated when using the XLSX source."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'def Demo_XLSX_Source(spark: SparkSession) -> DataFrame:\n    if Config.fabricName == "dev":\n        return spark.read\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("inferSchema", True)\\\n            .load("dbfs:/FileStore/Users/scott/plain_number.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n')))))}c.isMDXComponent=!0}}]);