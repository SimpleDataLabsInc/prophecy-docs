"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[21079],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>u});var o=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,o,r=function(e,t){if(null==e)return{};var a,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)a=s[o],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)a=s[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=o.createContext({}),d=function(e){var t=o.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},c=function(e){var t=d(e.components);return o.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),g=r,u=p["".concat(i,".").concat(g)]||p[g]||m[g]||s;return a?o.createElement(u,n(n({ref:t},c),{},{components:a})):o.createElement(u,n({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,n=new Array(s);n[0]=g;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,n[1]=l;for(var d=2;d<s;d++)n[d]=a[d];return o.createElement.apply(null,n)}return o.createElement.apply(null,a)}g.displayName="MDXCreateElement"},21585:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=a(58168),r=(a(96540),a(15680));const s={title:"Data Sources",id:"datasources-sql",description:"access your data",tags:["SQL","sources","seeds"]},n=void 0,l={unversionedId:"SQL/gems/datasources/datasources-sql",id:"SQL/gems/datasources/datasources-sql",title:"Data Sources",description:"access your data",source:"@site/docs/SQL/gems/datasources/datasources.md",sourceDirName:"SQL/gems/datasources",slug:"/SQL/gems/datasources/",permalink:"/SQL/gems/datasources/",draft:!1,tags:[{label:"SQL",permalink:"/tags/sql"},{label:"sources",permalink:"/tags/sources"},{label:"seeds",permalink:"/tags/seeds"}],version:"current",frontMatter:{title:"Data Sources",id:"datasources-sql",description:"access your data",tags:["SQL","sources","seeds"]},sidebar:"mySidebar",previous:{title:"SQL Gems",permalink:"/SQL/gems/"},next:{title:"Upload files",permalink:"/SQL/gems/datasources/upload-files"}},i={},d=[{value:"Sources",id:"sources",level:2},{value:"Seeds",id:"seeds",level:2},{value:"Models",id:"models",level:2},{value:"Advanced model settings",id:"advanced-model-settings",level:3},{value:"What&#39;s next",id:"whats-next",level:2}],c={toc:d},p="wrapper";function m(e){let{components:t,...s}=e;return(0,r.yg)(p,(0,o.A)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"To load data into a SQL project, use ",(0,r.yg)("a",{parentName:"p",href:"#seed"},"seed"),", ",(0,r.yg)("a",{parentName:"p",href:"#source"},"source"),", or ",(0,r.yg)("a",{parentName:"p",href:"#model"},"model")," gems. These are all based on ",(0,r.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/projects"},"dbt")," concepts."),(0,r.yg)("h2",{id:"sources"},"Sources"),(0,r.yg)("p",null,"Sources are pointers to tables in the SQL warehouse(s) specified in the SQL fabric."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"You can browse available tables in the ",(0,r.yg)("strong",{parentName:"li"},"Environment")," tab of the Project Editor. Tables can be dragged onto the model canvas."),(0,r.yg)("li",{parentName:"ol"},"To upload a file to the warehouse directly from Prophecy, use the ",(0,r.yg)("a",{parentName:"li",href:"./upload-files"},"Upload File")," option.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Source1",src:a(55505).A,width:"2620",height:"1508"})),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"You can also add a source by clicking the ",(0,r.yg)("strong",{parentName:"p"},"plus")," sign next to Sources. Use this when you want to define your data model without a cluster connection or predefined table.")),(0,r.yg)("h2",{id:"seeds"},"Seeds"),(0,r.yg)("p",null,"Seeds let you load small CSV files into Prophecy. This is useful for small test datasets or lookup mappings, like a list of cities or countries. Seeds are saved as SQL files on Git when projects are committed and released. Follow the steps below to create a seed and write to the SQL warehouse defined in the fabric."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Inside the model canvas, from the project tab, select ",(0,r.yg)("strong",{parentName:"li"},"+ Add Seed")," and provide a name."),(0,r.yg)("li",{parentName:"ol"},"Open the ",(0,r.yg)("strong",{parentName:"li"},"Code view")," to view the text editor. You'll see a file for your seed."),(0,r.yg)("li",{parentName:"ol"},"Paste the data here in CSV format separated by commas."),(0,r.yg)("li",{parentName:"ol"},"The seed file should be listed in the files that will be committed to Git."),(0,r.yg)("li",{parentName:"ol"},"To make the seed usable in your project, run the seed by clicking the ",(0,r.yg)("strong",{parentName:"li"},"large play button")," in the bottom right corner.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Seed1",src:a(19965).A,width:"2880",height:"1084"})),(0,r.yg)("p",null,"To write the seed to your SQL warehouse:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Create a new model and define its location."),(0,r.yg)("li",{parentName:"ol"},"Add the seed to the model canvas."),(0,r.yg)("li",{parentName:"ol"},"Connect your seed to the ",(0,r.yg)("strong",{parentName:"li"},"Target Model")," gem."),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("strong",{parentName:"li"},"Run")," the model. This runs the Target Model gem that writes the seed to the warehouse."),(0,r.yg)("li",{parentName:"ol"},"To view the new table in your SQL warehouse, click on the ",(0,r.yg)("strong",{parentName:"li"},"Environment")," tab in the project."),(0,r.yg)("li",{parentName:"ol"},"Use the ",(0,r.yg)("strong",{parentName:"li"},"Refetch Sources")," button to resync the data."),(0,r.yg)("li",{parentName:"ol"},"Now, you should see the new table.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Seed2",src:a(95078).A,width:"2620",height:"1508"})),(0,r.yg)("h2",{id:"models"},"Models"),(0,r.yg)("p",null,"A model is similar to a pipeline, as both contain data transformation steps. Unlike a pipeline, however, each model defines a single ",(0,r.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/materializations#materializations"},"materialized view or table"),". Because models define a single materialized view or table, models can serve as inputs to other models. Each model is a single SQL file in the Code view."),(0,r.yg)("p",null,"To create a new model:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Click the ",(0,r.yg)("strong",{parentName:"li"},"plus")," sign next to Models."),(0,r.yg)("li",{parentName:"ol"},"Provide a name for the new model and define the desired storage path in Git to store the new model SQL file."),(0,r.yg)("li",{parentName:"ol"},"Click ",(0,r.yg)("strong",{parentName:"li"},"Create"),". This opens the model canvas. A ",(0,r.yg)("a",{parentName:"li",href:"/SQL/gems/target-models/"},"Target Model")," gem automatically appears on the canvas.")),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Model1",src:a(62481).A,width:"2812",height:"900"})),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"You can't use statements (such as ",(0,r.yg)("inlineCode",{parentName:"p"},"CALL")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"EXECUTE IMMEDIATE"),") directly inside of models. Instead, you must use them in pre-hooks.")),(0,r.yg)("h3",{id:"advanced-model-settings"},"Advanced model settings"),(0,r.yg)("p",null,"The advanced settings of a model let you define whether the model should be materialized as a view, table, ephemeral, incremental, or dynamic table."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Model2",src:a(64614).A,width:"2620",height:"1397"})),(0,r.yg)("h2",{id:"whats-next"},"What's next"),(0,r.yg)("p",null,"For more details on dbt concepts including ",(0,r.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/sources"},"sources"),", ",(0,r.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/seeds"},"seeds"),", and ",(0,r.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/models"},"models"),", explore the dbt documentation or check out the ",(0,r.yg)("a",{parentName:"p",href:"/getting-started/tutorials/sql-with-databricks"},"SQL with Databricks")," tutorial."))}m.isMDXComponent=!0},62481:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/Model1-ad8a22c735a0923d9986ff265a2b9796.png"},19965:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/Seed1-872bb650c42ac27ed7421742853bcf69.png"},95078:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/Seed2-65d0c283cf17ab38bb152faf4a900050.png"},55505:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/Source1-57d630ece73011c556b69fd43299c0a6.png"},64614:(e,t,a)=>{a.d(t,{A:()=>o});const o=a.p+"assets/images/model-settings-9796ceebab166117768e99c2308d44d4.png"}}]);