"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[132],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>N});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(a),k=r,N=s["".concat(p,".").concat(k)]||s[k]||u[k]||l;return a?n.createElement(N,i(i({ref:t},d),{},{components:a})):n.createElement(N,i({ref:t},d))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},72360:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l={tabItem:"tabItem_OmH5"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(83117),r=a(67294),l=a(72389),i=a(67392),o=a(7094),p=a(12466),m=a(86010);const d={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function s(e){const{lazy:t,block:a,defaultValue:l,values:s,groupId:u,className:k}=e,N=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),c=s??N.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,i.l)(c,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===l?l:l??N.find((e=>e.props.default))?.props.value??N[0]?.props.value;if(null!==f&&!c.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${c.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:h}=(0,o.U)(),[y,v]=(0,r.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=u){const e=b[u];null!=e&&e!==y&&c.some((t=>t.value===e))&&v(e)}const C=e=>{const t=e.currentTarget,a=w.indexOf(t),n=c[a].value;n!==y&&(x(t),v(n),null!=u&&h(u,n))},F=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]||w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,m.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":a},k)},c.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>w.push(e),onKeyDown:F,onFocus:C,onClick:C},l,{className:(0,m.Z)("tabs__item",d.tabItem,l?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,r.cloneElement)(N.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},N.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,l.Z)();return r.createElement(s,(0,n.Z)({key:String(t)},e))}},93444:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>N,frontMatter:()=>o,metadata:()=>m,toc:()=>s});var n=a(83117),r=(a(67294),a(3905)),l=a(9877),i=a(72360);const o={title:"XLSX (Excel)",id:"xlsx",description:"XLSX (Excel)",sidebar_position:10,tags:["gems","file","xlsx"]},p=void 0,m={unversionedId:"low-code-spark/gems/source-target/file/xlsx",id:"low-code-spark/gems/source-target/file/xlsx",title:"XLSX (Excel)",description:"XLSX (Excel)",source:"@site/docs/low-code-spark/gems/source-target/file/xlsx.md",sourceDirName:"low-code-spark/gems/source-target/file",slug:"/low-code-spark/gems/source-target/file/xlsx",permalink:"/low-code-spark/gems/source-target/file/xlsx",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"xlsx",permalink:"/tags/xlsx"}],version:"current",sidebarPosition:10,frontMatter:{title:"XLSX (Excel)",id:"xlsx",description:"XLSX (Excel)",sidebar_position:10,tags:["gems","file","xlsx"]},sidebar:"defaultSidebar",previous:{title:"Kafka",permalink:"/low-code-spark/gems/source-target/file/kafka"},next:{title:"MongoDB",permalink:"/low-code-spark/gems/source-target/warehouse/mongodb"}},d={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Example output",id:"example-output",level:2}],u={toc:s},k="wrapper";function N(e){let{components:t,...a}=e;return(0,r.kt)(k,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you've ever done anything with numbers in your line of work odds are you've worked with Excel at one point or another. Prophecy supports the format as both a data source and data target, so if you're migrating from a legacy system or you need to produce an Excel-compatible file for a report, we've got you covered."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you receive an error about the ",(0,r.kt)("inlineCode",{parentName:"p"},"excel")," format not being available you must install a library on your Databricks cluster."),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},"Navigate to your cluster settings page in your Databricks workspace"),(0,r.kt)("li",{parentName:"ol"},"Click the ",(0,r.kt)("inlineCode",{parentName:"li"},"Libraries")," tab"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Install new")),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Maven")),(0,r.kt)("li",{parentName:"ol"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"com.crealytics:spark-excel_2.12:3.2.1_0.17.1")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Coordinates")," field"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Install"))),(0,r.kt)("p",{parentName:"div"},"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.databricks.com/libraries/cluster-libraries.html#install-a-library-on-a-cluster"},"Databricks documentation")," for more information if needed."))),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,r.kt)("p",null,"The following is a list of options that are available while using XLSX as a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Source")),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Column Name of Corrupt Record"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the column to create for corrupt records"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Column Name of Row Number"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the column to create using the original row number"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"None")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Address"),(0,r.kt)("td",{parentName:"tr",align:null},"Data address to read (see ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/crealytics/spark-excel#data-addresses"},"here"),") for more information"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"A1")," (Everything)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date Format"),(0,r.kt)("td",{parentName:"tr",align:null},"Date format to use"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Excerpt Size"),(0,r.kt)("td",{parentName:"tr",align:null},"Except Size"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},"Input file extension"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xlsx"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Header"),(0,r.kt)("td",{parentName:"tr",align:null},"First line in input is a header"),(0,r.kt)("td",{parentName:"tr",align:null},"True"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ignore After Header"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of rows to ignore after header"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Leading Whitespace"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Ignore Trailing Whitespace"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Infer Schema"),(0,r.kt)("td",{parentName:"tr",align:null},"Infer the schema of the input. ",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"td"},"Note:")," This setting is provided directly by the ",(0,r.kt)("inlineCode",{parentName:"td"},"spark-excel")," library and is different than the ",(0,r.kt)("inlineCode",{parentName:"td"},"Infer Schema")," button in the Prophecy UI. Both should provide the same results."),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Keep Undefined Rows"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, keeps undefined Excel rows"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Locale"),(0,r.kt)("td",{parentName:"tr",align:null},"A language tag in the IETF BCP 47 format"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"US"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"NaN Value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value to use in the case of NaN"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"NaN"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Negative Infinity"),(0,r.kt)("td",{parentName:"tr",align:null},"Value to use in the case of negative infinity"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"Inf"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Null Value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value to use for Null"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Parse Mode"),(0,r.kt)("td",{parentName:"tr",align:null},"Parsing mode. Supports ",(0,r.kt)("inlineCode",{parentName:"td"},"Permissive"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"Drop Malformed")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"Fail Fast")),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Permissive"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Positive Infinity"),(0,r.kt)("td",{parentName:"tr",align:null},"Value to use in case of positive infinity"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"Inf"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sampling Ratio"),(0,r.kt)("td",{parentName:"tr",align:null},"Defines how much of the input to sample from when inferring the schema."),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1.0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp Format"),(0,r.kt)("td",{parentName:"tr",align:null},"Format to parse timestamps from text cells"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Use Null for Error Cells"),(0,r.kt)("td",{parentName:"tr",align:null},"Use null value for error cells"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Workbook Password"),(0,r.kt)("td",{parentName:"tr",align:null},"Password to secure workbook"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Timezone ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Timezone ID for ",(0,r.kt)("inlineCode",{parentName:"td"},"Date"),"s/",(0,r.kt)("inlineCode",{parentName:"td"},"Timestamp"),"s taken from the IANA Time Zone Database.",(0,r.kt)("br",null),(0,r.kt)("br",null)," ",(0,r.kt)("strong",{parentName:"td"},"Note:")," See ",(0,r.kt)("a",{parentName:"td",href:"https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html"},"here")," for valid values."),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"(empty)")))),(0,r.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,r.kt)("p",null,"The following is a list of options that are available while using XLSX as a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Target")),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Data Address"),(0,r.kt)("td",{parentName:"tr",align:null},"Data address to write output to"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"A1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"File Extension"),(0,r.kt)("td",{parentName:"tr",align:null},"File extension used when writing"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"xlsx"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Header"),(0,r.kt)("td",{parentName:"tr",align:null},"Write header to file"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"True"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Locale"),(0,r.kt)("td",{parentName:"tr",align:null},"A language tag in the IETF BCP 47 format"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"US"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date Format"),(0,r.kt)("td",{parentName:"tr",align:null},"Format to use for ",(0,r.kt)("inlineCode",{parentName:"td"},"Date")," columns"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"Spark default")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Use Plain Number Format"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, format the cells without rounding and scientific notations"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"False"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Workbook Password"),(0,r.kt)("td",{parentName:"tr",align:null},"Password to secure workbook"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"(empty)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Write Mode"),(0,r.kt)("td",{parentName:"tr",align:null},"Write mode, same as underlying Spark write mode"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'"append"'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Parition Columns"),(0,r.kt)("td",{parentName:"tr",align:null},"Columns to partition output files by"),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"(empty)")))),(0,r.kt)("h2",{id:"example-output"},"Example output"),(0,r.kt)("p",null,"Below is a snippet of the optimized code that is generated when using the XLSX source."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def Demo_XLSX_Source(spark: SparkSession) -> DataFrame:\n    if Config.fabricName == "dev":\n        return spark.read\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("inferSchema", True)\\\n            .load("dbfs:/FileStore/Users/scott/plain_number.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n')))))}N.isMDXComponent=!0}}]);