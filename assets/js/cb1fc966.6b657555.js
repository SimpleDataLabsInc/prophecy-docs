"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[297],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(a),m=i,u=h["".concat(s,".").concat(m)]||h[m]||d[m]||o;return a?n.createElement(u,r(r({ref:t},c),{},{components:a})):n.createElement(u,r({ref:t},c))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2255:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const o={title:"Generative AI Chatbot",id:"gen-ai-chatbot",description:"Build a generative AI application that answers questions in Slack based on relevant content from the web.",sidebar_position:9,tags:["guide","generativeai","chatbot","tutorial"]},r=void 0,l={unversionedId:"getting-started/gen-ai-chatbot",id:"getting-started/gen-ai-chatbot",title:"Generative AI Chatbot",description:"Build a generative AI application that answers questions in Slack based on relevant content from the web.",source:"@site/docs/getting-started/genaichatbot.md",sourceDirName:"getting-started",slug:"/getting-started/gen-ai-chatbot",permalink:"/getting-started/gen-ai-chatbot",draft:!1,tags:[{label:"guide",permalink:"/tags/guide"},{label:"generativeai",permalink:"/tags/generativeai"},{label:"chatbot",permalink:"/tags/chatbot"},{label:"tutorial",permalink:"/tags/tutorial"}],version:"current",sidebarPosition:9,frontMatter:{title:"Generative AI Chatbot",id:"gen-ai-chatbot",description:"Build a generative AI application that answers questions in Slack based on relevant content from the web.",sidebar_position:9,tags:["guide","generativeai","chatbot","tutorial"]},sidebar:"defaultSidebar",previous:{title:"Spark with Databricks",permalink:"/getting-started/spark-with-databricks"},next:{title:"Key Concepts",permalink:"/concepts/"}},s={},p=[{value:"Requirements",id:"requirements",level:2},{value:"External dependencies",id:"external-dependencies",level:3},{value:"Cluster library dependencies",id:"cluster-library-dependencies",level:3},{value:"Platform recommendations",id:"platform-recommendations",level:3},{value:"Step 1: Setup",id:"step-1-setup",level:2},{value:"1a. Dependencies",id:"1a-dependencies",level:3},{value:"Slack",id:"slack",level:4},{value:"OpenAI",id:"openai",level:4},{value:"Pinecone",id:"pinecone",level:4},{value:"1b. Databricks Secrets and Schemas",id:"1b-databricks-secrets-and-schemas",level:3},{value:"1c. Load the Git repository",id:"1c-load-the-git-repository",level:3},{value:"1d. Set up Databases",id:"1d-set-up-databases",level:3},{value:"1e. Explore the Low-Code Interface",id:"1e-explore-the-low-code-interface",level:3},{value:"Step 2: Build a Knowledge Warehouse",id:"step-2-build-a-knowledge-warehouse",level:2},{value:"2a. Web Ingest Pipeline",id:"2a-web-ingest-pipeline",level:3},{value:"2b. Web Vectorize Pipeline",id:"2b-web-vectorize-pipeline",level:3},{value:"2b.i Configuring the Web Vectorize Pipeline",id:"2bi-configuring-the-web-vectorize-pipeline",level:4},{value:"Step 3: Live Inference",id:"step-3-live-inference",level:2},{value:"3a. Chatbot Live Pipeline",id:"3a-chatbot-live-pipeline",level:3},{value:"3a.1 Configuring the Chatbot Live Pipeline",id:"3a1-configuring-the-chatbot-live-pipeline",level:4},{value:"Summary",id:"summary",level:2},{value:"FAQ",id:"faq",level:2}],c={toc:p},h="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(h,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{class:"wistia_responsive_padding",style:{padding:"62.5% 0 0 0",position:"relative"}},(0,i.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,i.kt)("iframe",{src:"https://fast.wistia.net/embed/iframe/mzi4es0kxn?seo=false?videoFoam=true",title:"Getting Started With SQL Video",allow:"autoplay; fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,i.kt)("script",{src:"https://fast.wistia.net/assets/external/E-v1.js",async:!0}),(0,i.kt)("p",null,"This guide showcases how easy it is to build a live chatbot application using your internal datasets on Spark. Here is a summary of the steps you'll take to set up and explore the Generative AI Chatbot Pipelines:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Setup"),": You'll configure the dependencies, define credential secrets and load the Pipelines from a Git repository."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Build a Knowledge Warehouse"),": You'll explore a set of Spark Pipelines to ",(0,i.kt)("a",{parentName:"li",href:"/getting-started/gen-ai-chatbot#2a-web-ingest-pipeline"},"(a)ingest")," unstructured data from your applications, pre-process, and ",(0,i.kt)("a",{parentName:"li",href:"/getting-started/gen-ai-chatbot#2b-web-vectorize-pipeline"},"(b)vectorize")," and store the data within your vector database of choice."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Run a Live Inference Pipeline"),": You'll run a Spark streaming ",(0,i.kt)("a",{parentName:"li",href:"/getting-started/gen-ai-chatbot#step-3-live-inference"},"Chatbot")," Pipeline that reads messages from Slack and answers them live using information from your new Knowledge Warehouse.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Architecture Diagram",src:a(3958).Z,width:"2880",height:"2144"})),(0,i.kt)("p",null,"This guide is an expanded view of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template"},"these")," succinct instructions and ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=1exLfT-b-GM&t=1090s"},"this")," Data+AI Summit session."),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("h3",{id:"external-dependencies"},"External dependencies"),(0,i.kt)("p",null,"Optional, but recommended for best results:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.pinecone.io/"},(0,i.kt)("strong",{parentName:"a"},"Pinecone"))," - allows for efficient storage and retrieval of vectors. To simplify, it's possible to use Spark-ML cosine similarity alternatively; however, since that doesn't feature KNNs for more efficient lookup, it's only recommended for small datasets."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://openai.com/"},(0,i.kt)("strong",{parentName:"a"},"OpenAI"))," - for creating text embeddings and formulating questions. Alternatively, one can use Spark's ",(0,i.kt)("a",{parentName:"li",href:"https://spark.apache.org/docs/2.2.0/mllib-feature-extraction.html#word2vec"},"word2vec")," for word embeddings and an ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-io/spark-ai/tree/main"},"alternative LLM (e.g., Dolly)")," for answer formulation based on context."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://slack.com/"},(0,i.kt)("strong",{parentName:"a"},"Slack"))," or ",(0,i.kt)("a",{parentName:"li",href:"https://teams.com/"},(0,i.kt)("strong",{parentName:"a"},"Teams"))," (support coming soon) - for the chatbot interface. An example batch Pipeline is present for fast debugging when unavailable.")),(0,i.kt)("h3",{id:"cluster-library-dependencies"},"Cluster library dependencies"),(0,i.kt)("p",null,"Required:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-io/spark-ai/tree/main"},(0,i.kt)("strong",{parentName:"a"},"Spark-AI"))," - Toolbox for building Generative AI applications on top of Apache Spark.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The cluster library dependencies are automatically included if you Fork our sample project as detailed below.")),(0,i.kt)("h3",{id:"platform-recommendations"},"Platform recommendations"),(0,i.kt)("p",null,"Below are some platform recommendations. Like all Prophecy projects the code generated by the template has no vendor lock-in so it should run wherever Spark does."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.prophecy.io/"},(0,i.kt)("strong",{parentName:"a"},"Prophecy Low-Code"))," (version 3.1 and above) - for building the data Pipelines. A free account is available."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://Databricks.com/"},(0,i.kt)("strong",{parentName:"a"},"Databricks"))," (DBR 12.2 ML and above) - for running the data Pipelines. There are some free/low-cost options available or you can use the compute that comes with Prophecy's free trial.")),(0,i.kt)("h2",{id:"step-1-setup"},"Step 1: Setup"),(0,i.kt)("p",null,"We'll start by forking our existing sample repository. This will leave you with your own copy that you can modify however you want."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/fork"},"Fork")," the repo so you have your copy at something like ",(0,i.kt)("inlineCode",{parentName:"li"},"https://github.com/<your_username>/gen-ai-chatbot-template")),(0,i.kt)("li",{parentName:"ol"},"Clone the repo onto your local machine (i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"git clone https://github.com/<your_username>/gen-ai-chatbot-template"),")")),(0,i.kt)("h3",{id:"1a-dependencies"},"1a. Dependencies"),(0,i.kt)("p",null,"Create accounts for the services you want to use for your Generative AI Chatbot. For each service create access tokens and save them within a file named ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," in your repo. See ",(0,i.kt)("inlineCode",{parentName:"p"},"sample.env")," for an example."),(0,i.kt)("p",null,"For our example, we will be using Slack, OpenAI and Pinecone."),(0,i.kt)("h4",{id:"slack"},"Slack"),(0,i.kt)("p",null,"Here are the steps to set up the Slack bot. If you prefer a video walkthrough, ",(0,i.kt)("a",{parentName:"p",href:"https://www.loom.com/share/2d7afeacd92e44809ab29b43665329dd?sid=c4e08d9d-bf86-4a6f-9e9d-fce9d7a12578"},"see here"),". Using a Slack workspace where you have Admin permissions, follow these steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://api.slack.com/reference/manifests#creating_apps"},"Set up a Slack application")," using the manifest file ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/blob/main/apps/slack/manifest.yaml"},"here"),"."),(0,i.kt)("li",{parentName:"ol"},"Install the Slack app in the workspace."),(0,i.kt)("li",{parentName:"ol"},"Create an ",(0,i.kt)("a",{parentName:"li",href:"https://api.slack.com/start/quickstart#getting-auth-token"},"App-Level Token")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"connections:write")," permission. This token is going to be used for receiving messages from Slack. Save it as ",(0,i.kt)("inlineCode",{parentName:"li"},"SLACK_APP_TOKEN")," in your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file."),(0,i.kt)("li",{parentName:"ol"},"Find the Bot User OAuth ",(0,i.kt)("a",{parentName:"li",href:"https://api.slack.com/authentication/token-types"},"Token.")," The permissions (or scopes, in Slack terminology) are defined in the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/blob/main/apps/slack/manifest.yaml"},"manifest")," file. This token is going to be used for sending messages to Slack. Save it as ",(0,i.kt)("inlineCode",{parentName:"li"},"SLACK_TOKEN")," in your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file"),(0,i.kt)("li",{parentName:"ol"},"Create a new Slack channel in this Slack workspace."),(0,i.kt)("li",{parentName:"ol"},"Invite your Slack app to the channel."),(0,i.kt)("li",{parentName:"ol"},"For more details on creating a Slack App, click ",(0,i.kt)("a",{parentName:"li",href:"https://api.slack.com/start/quickstart"},"here."))),(0,i.kt)("h4",{id:"openai"},"OpenAI"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Join your company's OpenAI Organization by asking your Admin for an email invite. Alternatively, create an account ",(0,i.kt)("a",{parentName:"li",href:"https://platform.openai.com/signup"},"here"),"."),(0,i.kt)("li",{parentName:"ol"},"Find your API key as described ",(0,i.kt)("a",{parentName:"li",href:"https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key"},"here.")," Save it as ",(0,i.kt)("inlineCode",{parentName:"li"},"OPEN_AI_API_KEY")," in your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file")),(0,i.kt)("h4",{id:"pinecone"},"Pinecone"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Join your company's Pinecone Organization by asking your Admin for an email invite. Alternatively, create an account ",(0,i.kt)("a",{parentName:"li",href:"https://app.pinecone.io"},"here"),"."),(0,i.kt)("li",{parentName:"ol"},"Open an existing Pinecone Project or create a new one."),(0,i.kt)("li",{parentName:"ol"},"Create an index. We used an index with ",(0,i.kt)("inlineCode",{parentName:"li"},"1536")," dimensions, ",(0,i.kt)("inlineCode",{parentName:"li"},"Cosine")," metric, and an ",(0,i.kt)("inlineCode",{parentName:"li"},"s1")," pod type."),(0,i.kt)("li",{parentName:"ol"},"Within the appropriate Pinecone Project, generate a Pinecone API key as mentioned ",(0,i.kt)("a",{parentName:"li",href:"https://docs.pinecone.io/docs/projects#api-keys"},"here.")," Save it as ",(0,i.kt)("inlineCode",{parentName:"li"},"PINECONE_TOKEN")," in your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file.")),(0,i.kt)("h3",{id:"1b-databricks-secrets-and-schemas"},"1b. Databricks Secrets and Schemas"),(0,i.kt)("p",null,"The Databricks CLI is a command line tool that lets you interact with your Databricks workspace. Use the Databricks CLI here to store the tokens created in ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/gen-ai-chatbot#1a-dependencies"},"Step 1a")," safely as Databricks ",(0,i.kt)("inlineCode",{parentName:"p"},"secrets"),". Also, use the Databricks CLI to create catalog tables and schemas. Follow the steps below and for more details about the Databricks CLI read ",(0,i.kt)("a",{parentName:"p",href:"https://docs.databricks.com/en/archive/dev-tools/cli/index.html"},"here.")),(0,i.kt)("p",null,"Find ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_Databricks.sh")," ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/blob/main/setup_databricks.sh"},"here"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ensure that your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file contains all the above secrets. Use the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/blob/main/sample.env"},"sample.env")," as an example, and ",(0,i.kt)("inlineCode",{parentName:"li"},"source")," your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file (i.e ",(0,i.kt)("inlineCode",{parentName:"li"},"source .env"),")"),(0,i.kt)("li",{parentName:"ol"},"Install the Databricks CLI using ",(0,i.kt)("inlineCode",{parentName:"li"},"pip install Databricks"),". Currently version 0.17.x is supported."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"databricks configure")," to set up a connection from your local machine to your Workspace."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"setup_Databricks.sh")," to create the required secrets and schemas."),(0,i.kt)("li",{parentName:"ol"},"Expected output of ",(0,i.kt)("inlineCode",{parentName:"li"},"setup_Databricks.sh"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Variable definitions\nResources created, eg catalog tables, Databricks scopes, secrets\n")),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"Verify ",(0,i.kt)("inlineCode",{parentName:"li"},"setup_Databricks.sh")," creates the needed resources using these commands described ",(0,i.kt)("a",{parentName:"li",href:"https://docs.databricks.com/en/archive/dev-tools/cli/unity-catalog-cli.html"},"here")," and ",(0,i.kt)("a",{parentName:"li",href:"https://docs.databricks.com/en/archive/dev-tools/cli/secrets-cli.html"},"here"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"databricks unity-catalog catalogs list | grep gen_ai\ndatabricks unity-catalog schemas list --catalog-name gen_ai\ndatabricks secrets list-scopes\ndatabricks secrets list --scope slack\n")),(0,i.kt)("h3",{id:"1c-load-the-git-repository"},"1c. Load the Git repository"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Login")," to ",(0,i.kt)("a",{parentName:"li",href:"https://app.prophecy.io/metadata/auth/signup"},"Prophecy")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Import")," a new Prophecy ",(0,i.kt)("a",{parentName:"li",href:"/concepts/project/#1-create-new-project"},"Project")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Load the forked Git repository")," to the Prophecy Project as shown in this 30-second ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/prophecy-samples/gen-ai-chatbot-template/assets/3248329/dcdfabaf-4870-421d-9f92-4ab028c5db5a"},"video."),", pointing to your fork at ",(0,i.kt)("inlineCode",{parentName:"li"},"https://github.com/<your_username>/gen-ai-chatbot-template")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Connect")," to your Spark cluster by creating a Fabric following ",(0,i.kt)("a",{parentName:"li",href:"https://docs.prophecy.io/concepts/fabrics/create-a-fabric/#databricks"},"these steps."))),(0,i.kt)("h3",{id:"1d-set-up-databases"},"1d. Set up Databases"),(0,i.kt)("p",null,"This project runs on Databrick's Unity Catalog by default. However, you can also reconfigure Source & Target gems to use alternative sources."),(0,i.kt)("p",null,"For Databricks Unity Catalog, the ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_Databricks.sh")," script has already created the following catalog: ",(0,i.kt)("inlineCode",{parentName:"p"},"gen_ai")," and the following databases: ",(0,i.kt)("inlineCode",{parentName:"p"},"web_bronze")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"web_silver"),". The tables are going to be created automatically on the first boot-up."),(0,i.kt)("h3",{id:"1e-explore-the-low-code-interface"},"1e. Explore the Low-Code Interface"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Explore the low-code interface",src:a(26088).Z,width:"2880",height:"1726"})),(0,i.kt)("p",null,"When you open any Prophecy Pipeline, you\u2019ll see lots of features accessible. From the Environment tab, browse available datasets and tables in the linked data catalog. See a variety of Gems available out-of-the-box by clicking for example the Transformation or Join/Split headers. The visually designed Pipeline is translated to actual Spark code written in Scala, pySpark, or SQL. Just click at the top of the canvas to switch from the visual editor to the code editor. At the very bottom notice there\u2019s a button to commit local changes to Git. Prophecy Pipelines are committed to the user\u2019s Git repository and therefore offer the best software development practices: code review, versioning, proper releases, etc."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"play")," button runs the Pipeline and offers data previews between Gems. This interactive feature is super handy to see how each Gem manipulates the data and to quickly check that the data is produced as expected. The project runs entirely on Spark and will scale for any data volume, big and small."),(0,i.kt)("p",null,"Now that we\u2019ve had a brief introduction to the Prophecy Pipeline editor, let\u2019s dig into the Pipelines specific to the Generative AI Chatbot. The Pipelines accomplish two goals: (a) build a Knowledge Warehouse full of vectorized web documentation, and (b) a streaming inference Pipeline to read messages from Slack, query an LLM to formulate answers, and send them back to Slack. Notice most of the data manipulations are standard transformations to help construct a prompt for the OpenAI model (or the model of your choice)."),(0,i.kt)("h2",{id:"step-2-build-a-knowledge-warehouse"},"Step 2: Build a Knowledge Warehouse"),(0,i.kt)("h3",{id:"2a-web-ingest-pipeline"},"2a. Web Ingest Pipeline"),(0,i.kt)("p",null,"We are ingesting unstructured data from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/"},"Prophecy Documentation"),", in particular the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.prophecy.io/sitemap.xml"},"sitemap")," which has links to all the individual web pages."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Web Ingest Pipeline",src:a(72221).Z,width:"2880",height:"1726"})),(0,i.kt)("p",null,"A new Gem is introduced in this Pipeline: the TextProcessing Gem helps scrape the URL and content from the Documentation pages."),(0,i.kt)("p",null,"The series of data transformations culminates with nicely formatted web Documentation data saved in a Unity Catalog table to end the Web Ingest Pipeline."),(0,i.kt)("h3",{id:"2b-web-vectorize-pipeline"},"2b. Web Vectorize Pipeline"),(0,i.kt)("p",null,"Continuing with the goal of ingesting and vectorizing our web content, here we have the Web Vectorize Pipeline. We want to assign each document a number sequence, or vector, to map the similarity and relationships between those documents. Here we selected OpenAI ",(0,i.kt)("a",{parentName:"p",href:"https://openai.com/blog/new-and-improved-embedding-model"},"ada-002")," model based on performance and cost. As some of the documents are very long, we split them into smaller chunks. Each chunk is sent to OpenAI\u2019s ada model. Run the Pipeline using the \u201cPlay\u201d button and data preview buttons appear between Gems. Open the data preview following the OpenAI Gem and see the schema now includes a vector (or \u201cembedding\u201d) provided by the OpenAI model for each text chunk."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Web Vectorize Pipeline",src:a(30097).Z,width:"2880",height:"1084"})),(0,i.kt)("p",null,"Once the document chunks have each been assigned a vector, these \u201cembeddings\u201d are stored in the Unity Catalog and to a ",(0,i.kt)("a",{parentName:"p",href:"https://www.pinecone.io/learn/vector-database/"},"vector database")," (eg Pinecone). We can use this Knowledge Warehouse to construct our LLM prompt in the next Pipeline."),(0,i.kt)("h4",{id:"2bi-configuring-the-web-vectorize-pipeline"},"2b.i Configuring the Web Vectorize Pipeline"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Verify the Vectorize OpenAI Gem is configured with Databricks scope ",(0,i.kt)("inlineCode",{parentName:"li"},"open_ai")," and Databricks key ",(0,i.kt)("inlineCode",{parentName:"li"},"api_key"),"."),(0,i.kt)("li",{parentName:"ol"},"Verify the vector_db Target Gem is configured with the Databricks scope ",(0,i.kt)("inlineCode",{parentName:"li"},"pinecone")," and Databricks key ",(0,i.kt)("inlineCode",{parentName:"li"},"token"),".")),(0,i.kt)("h2",{id:"step-3-live-inference"},"Step 3: Live Inference"),(0,i.kt)("h3",{id:"3a-chatbot-live-pipeline"},"3a. Chatbot Live Pipeline"),(0,i.kt)("p",null,"Finally, we get to run the most exciting Pipeline! The Chatbot Live streaming Pipeline ingests messages from Slack and sends the question and the relevant context to OpenAI which provides an answer."),(0,i.kt)("p",null,"After ingesting the Slack question message and doing some transformation steps, the Chatbot Live Pipeline queries OpenAI to create an embedding specifically for the question. Then, the Pinecone Lookup Gem identifies documents, based on their vectors, which could be relevant for the question. With the IDs and vectors in hand, we need to pull from the full document corpus the relevant documentation text. The Join Gem does exactly this: gets content for the relevant document IDs. Now we are well on our way to creating a wonderful prompt! The OpenAI Gem sends the relevant content chunks and the Slack question in a prompt to OpenAI, and the model returns an answer. Finally, the Pipeline writes the answer back to the Slack thread."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Chatbot Live Pipeline",src:a(29079).Z,width:"2880",height:"1084"})),(0,i.kt)("h4",{id:"3a1-configuring-the-chatbot-live-pipeline"},"3a.1 Configuring the Chatbot Live Pipeline"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Verify the ",(0,i.kt)("inlineCode",{parentName:"li"},"slack_chat")," Source Gem is configured with Databricks scope ",(0,i.kt)("inlineCode",{parentName:"li"},"slack")," and Databricks Key ",(0,i.kt)("inlineCode",{parentName:"li"},"app_token"),". While this token begins with ",(0,i.kt)("inlineCode",{parentName:"li"},"xapp-"),", be sure not to use the plaintext value, as using the Databricks secret is a much more secure approach."),(0,i.kt)("li",{parentName:"ol"},"Update the ",(0,i.kt)("inlineCode",{parentName:"li"},"only_user_msgs")," Filter Gem with the Slack app member ID:\n",(0,i.kt)("img",{alt:"Slack App Member ID",src:a(32924).Z,width:"2880",height:"1084"})),(0,i.kt)("li",{parentName:"ol"},"Verify the ",(0,i.kt)("inlineCode",{parentName:"li"},"bot_message")," Target Gem is configured with Databricks scope ",(0,i.kt)("inlineCode",{parentName:"li"},"slack")," and Databricks Key ",(0,i.kt)("inlineCode",{parentName:"li"},"token"),". While this bot user OAuth token begins with ",(0,i.kt)("inlineCode",{parentName:"li"},"xoxb-"),", be sure not to enter the plaintext value."),(0,i.kt)("li",{parentName:"ol"},"Run the streaming Pipeline using the big ",(0,i.kt)("inlineCode",{parentName:"li"},"play")," button rather than the individual Gem ",(0,i.kt)("inlineCode",{parentName:"li"},"play")," buttons"),(0,i.kt)("li",{parentName:"ol"},"Type a question into the Slack channel and check the Pipeline to see if the question is ingested and processed. Use the interims (as described above) to watch your message travel through the Pipeline. Error messages are visible in the data preview samples."),(0,i.kt)("li",{parentName:"ol"},"Ask lots of questions!")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"A GenerativeAI Chatbot",src:a(7814).Z,width:"960",height:"600"})),(0,i.kt)("p",null,"And that\u2019s it! Congratulations on running the Generative AI Chatbot with Prophecy on Spark! You can check out the end result in the ",(0,i.kt)("a",{parentName:"p",href:"https://www.loom.com/share/a89ee52de80e41abb9b5647c1da73e18?sid=6fcf0298-79e8-412b-8e48-f58c9d6d7f3b"},"video here")," and a longer version ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=1exLfT-b-GM&t=1090s"},"here"),". Don't forget, all of these visually developed Pipelines are converted to Spark code behind the scenes. Toggle to the code editor to see the code. This code is available in your forked GitHub repository when you commit, merge, and release your changes via the Prophecy UI. Now your Spark project can be run on any Spark cluster via the Prophecy interface or using your favorite build and deploy toolset. You may notice a Chatbot Batch Pipeline available in the Project for those who wish to explore it. We won\u2019t go into detail on Chatbot Batch because the steps are similar to those in the Chatbot Live (streaming) Pipeline."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Making a GenAI chatbot is largely an ETL problem that can be solved using a low-code interface. Most of the work is setting up the dependencies (Slack, OpenAI, and Pinecone - or your favorite replacements for these). The ETL Pipelines ingest and vectorize the web content. Then the Chatbot Pipeline constructs a prompt for OpenAI using a question in Slack and the documentation content scraped from the web. Once we have the prompt, OpenAI (or another model) can respond with an answer."),(0,i.kt)("p",null,"What kind of Generative AI applications will you create? We'd love to hear your ideas and feedback! Please send us an email (",(0,i.kt)("a",{parentName:"p",href:"mailto:contact.us@Prophecy.io"},"contact.us@Prophecy.io"),") or reach out on our Slack ",(0,i.kt)("a",{parentName:"p",href:"https://join.slack.com/t/prophecy-io-support/shared_invite/zt-moq3xzoj-~5MSJ6WPnZfz7bwsqWi8tQ"},"community.")," We are eager to share the Prophecy interface with as many low-code users as we can because we think enabling more people to build their own solutions is the best way to use the latest technologies."),(0,i.kt)("h2",{id:"faq"},"FAQ"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"What features will be coming soon?")),(0,i.kt)("p",null,"Stay tuned for support for additional models beyond those provided by OpenAI. Also, Prophecy will support private models and offer additional machine-learning Gems out of the box. ",(0,i.kt)("a",{parentName:"p",href:"https://teams.com/"},(0,i.kt)("strong",{parentName:"a"},"Teams"))," message ingestion will soon be available out of the box as well. Of course, Prophecy is entirely extensible to interface with more applications. If you'd like to see a particular application supported, don't hesitate to let us know."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Exactly which content is sent to OpenAI in the Chatbot Live Pipeline?")),(0,i.kt)("p",null,"For this to work, you\u2019re sending the scraped web data (here we use Prophecy documentation) to OpenAI for the vectorization Pipeline and again to answer the question."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do you support private instances of Open AI or other language models?")),(0,i.kt)("p",null,"Coming soon!"))}d.isMDXComponent=!0},3958:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_architecture-b0b8daeeeb91af88276514821b475e77.png"},29079:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_chatbot_live-82cb0660ef00754078e3b188b6305848.png"},7814:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_intro_video-52a8c33ad256ee5006d1f393aa33b5ab.gif"},26088:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_low_code_interface-a1b9397052683006133f2b9cf51a9fb3.png"},32924:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_memberId-d6bf5ec18aca1f946aad0f2c20317801.png"},72221:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_web_ingest-3df5f6735689223ef833deb07034ed16.png"},30097:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genai_web_vectorize-86c74a23ce1375f9599eafff04353ee8.png"}}]);