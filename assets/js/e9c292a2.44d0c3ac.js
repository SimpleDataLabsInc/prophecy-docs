"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[6633],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),u=n,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return a?r.createElement(f,l(l({ref:t},d),{},{components:a})):r.createElement(f,l({ref:t},d))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2360:function(e,t,a){a.d(t,{Z:function(){return l}});var r=a(7294),n=a(6010),o="tabItem_OmH5";function l(e){var t=e.children,a=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(o,l),hidden:a},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return u}});var r=a(7462),n=a(7294),o=a(2389),l=a(7392),i=a(7094),s=a(2466),p=a(6010),d="tabList_uSqn",m="tabItem_LplD";function c(e){var t,a,o,c=e.lazy,u=e.block,f=e.defaultValue,g=e.values,h=e.groupId,v=e.className,k=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=g?g:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,l.l)(b,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===f?f:null!=(t=null!=f?f:null==(a=k.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(o=k[0])?void 0:o.props.value;if(null!==y&&!b.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,i.U)(),T=w.tabGroupChoices,x=w.setTabGroupChoices,S=(0,n.useState)(y),_=S[0],O=S[1],E=[],F=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var P=T[h];null!=P&&P!==_&&b.some((function(e){return e.value===P}))&&O(P)}var A=function(e){var t=e.currentTarget,a=E.indexOf(t),r=b[a].value;r!==_&&(F(t),O(r),null!=h&&x(h,r))},D=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r=E.indexOf(e.currentTarget)+1;a=E[r]||E[0];break;case"ArrowLeft":var n=E.indexOf(e.currentTarget)-1;a=E[n]||E[E.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,p.Z)("tabs-container",d)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},v)},b.map((function(e){var t=e.value,a=e.label,o=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:function(e){return E.push(e)},onKeyDown:D,onFocus:A,onClick:A},o,{className:(0,p.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":_===t})}),null!=a?a:t)}))),c?(0,n.cloneElement)(k.filter((function(e){return e.props.value===_}))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},k.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==_})}))))}function u(e){var t=(0,o.Z)();return n.createElement(c,(0,r.Z)({key:String(t)},e))}},7501:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return u}});var r=a(7462),n=a(3366),o=(a(7294),a(3905)),l=a(9877),i=a(2360),s=["components"],p={title:"Avro",id:"avro",description:"Avro",sidebar_position:3,tags:["gems","file","avro"]},d=void 0,m={unversionedId:"low-code-spark/gems/source-target/file/avro",id:"low-code-spark/gems/source-target/file/avro",title:"Avro",description:"Avro",source:"@site/docs/low-code-spark/gems/source-target/file/avro.md",sourceDirName:"low-code-spark/gems/source-target/file",slug:"/low-code-spark/gems/source-target/file/avro",permalink:"/low-code-spark/gems/source-target/file/avro",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"avro",permalink:"/tags/avro"}],version:"current",sidebarPosition:3,frontMatter:{title:"Avro",id:"avro",description:"Avro",sidebar_position:3,tags:["gems","file","avro"]},sidebar:"defaultSidebar",previous:{title:"Parquet",permalink:"/low-code-spark/gems/source-target/file/parquet"},next:{title:"Text",permalink:"/low-code-spark/gems/source-target/file/text"}},c={},u=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source",level:3},{value:"Schema used in example above",id:"schema-used-in-example-above",level:4},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Example",id:"target",level:3},{value:"Generated Code",id:"target-code",level:3}],f={toc:u};function g(e){var t=e.components,p=(0,n.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},f,p,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Avro format is a row-based storage format for Hadoop, which is widely used as a serialization platform.\nAvro format stores the schema in JSON format, making it easy to read and interpret by any program.\nThe data itself is stored in a binary format making it compact and efficient in Avro files."),(0,o.kt)("p",null,"This gem allows you to read from or write to an avro file."),(0,o.kt)("h2",{id:"source"},"Source"),(0,o.kt)("p",null,"Reads data from avro files present at a path"),(0,o.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Location"),(0,o.kt)("td",{parentName:"tr",align:"left"},"File path where avro files are present"),(0,o.kt)("td",{parentName:"tr",align:"left"},"True"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Schema"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Schema to be applied on the loaded data. Can be defined/edited as json or inferred using ",(0,o.kt)("inlineCode",{parentName:"td"},"Infer Schema")," button"),(0,o.kt)("td",{parentName:"tr",align:"left"},"True"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Recursive File Lookup"),(0,o.kt)("td",{parentName:"tr",align:"left"},"This is used to recursively load files and it disables partition inferring. Its default value is false. If data source explicitly specifies the partitionSpec when recursiveFileLookup is true, exception will be thrown."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"False")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Path Global Filter"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An optional glob pattern to only include files with paths matching the pattern. The syntax follows org.apache.hadoop.fs.GlobFilter. It does not change the behavior of partition discovery."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Modified Before"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An optional timestamp to only include files with modification times occurring before the specified Time. The provided timestamp must be in the following form: YYYY-MM-DDTHH:mm:ss (e.g. 2020-06-01T13:00:00)"),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Modified After"),(0,o.kt)("td",{parentName:"tr",align:"left"},"An optional timestamp to only include files with modification times occurring after the specified Time. The provided timestamp must be in the following form: YYYY-MM-DDTHH:mm:ss (e.g. 2020-06-01T13:00:00)"),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Avro Schema"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Optional schema provided by a user in JSON format. When reading Avro, this option can be set to an evolved schema, which is compatible but different with the actual Avro schema. The deserialization schema will be consistent with the evolved schema. For example, if we set an evolved schema containing one additional column with a default value, the reading result in Spark will contain the new column too."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"ignoreExtension"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The option controls ignoring of files without .avro extensions in read. ",(0,o.kt)("br",null),"If the option is enabled, all files (with and without .avro extension) are loaded.",(0,o.kt)("br",null)," The option has been deprecated, and it will be removed in the future releases. Please use the general data source option](",(0,o.kt)("a",{parentName:"td",href:"https://spark.apache.org/docs/latest/sql-data-sources-generic-options.html#path-global-filter"},"https://spark.apache.org/docs/latest/sql-data-sources-generic-options.html#path-global-filter"),") ",(0,o.kt)("a",{parentName:"td",href:"https://spark.apache.org/docs/latest/sql-data-sources-generic-options.html#path-global-filter"},"pathGlobFilter")," for filtering file names."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,o.kt)("h3",{id:"source"},"Example"),(0,o.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,o.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,o.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/174399585-40067429-953e-4157-a5db-d80e25713d24.mp4",title:"Avro Source",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,o.kt)("h4",{id:"schema-used-in-example-above"},"Schema used in example above"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Avro schema used",src:a(2985).Z,width:"736",height:"492"})),(0,o.kt)("h3",{id:"source-code"},"Generated Code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'def read_avro(spark: SparkSession) -> DataFrame:\n    return spark.read\\\n        .format("avro")\\\n        .option("ignoreExtension", True)\\\n        .option(\n          "avroSchema",\n          "{\\"type\\":\\"record\\",\\"name\\":\\"Person\\",\\"fields\\":[{\\"name\\":\\"firstname\\",\\"type\\":\\"string\\"},{\\"name\\":\\"middlename\\",\\"type\\":\\"string\\"},{\\"name\\":\\"lastname\\",\\"type\\":\\"string\\"},{\\"name\\":\\"dob_year\\",\\"type\\":\\"int\\"},{\\"name\\":\\"dob_month\\",\\"type\\":\\"int\\"},{\\"name\\":\\"gender\\",\\"type\\":\\"string\\"},{\\"name\\":\\"salary\\",\\"type\\":\\"int\\"}]}"\n        )\\\n        .load("dbfs:/FileStore/Users/abhinav/avro/test.avro")\n\n'))),(0,o.kt)(i.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'object read_avro {\n\n  def apply(spark: SparkSession): DataFrame =\n    spark.read\n        .format("avro")\n        .option("ignoreExtension", true)\n        .option(\n          "avroSchema",\n          "{\\"type\\":\\"record\\",\\"name\\":\\"Person\\",\\"fields\\":[{\\"name\\":\\"firstname\\",\\"type\\":\\"string\\"},{\\"name\\":\\"middlename\\",\\"type\\":\\"string\\"},{\\"name\\":\\"lastname\\",\\"type\\":\\"string\\"},{\\"name\\":\\"dob_year\\",\\"type\\":\\"int\\"},{\\"name\\":\\"dob_month\\",\\"type\\":\\"int\\"},{\\"name\\":\\"gender\\",\\"type\\":\\"string\\"},{\\"name\\":\\"salary\\",\\"type\\":\\"int\\"}]}"\n        )\n        .load("dbfs:/FileStore/Users/abhinav/avro/test.avro")\n\n}\n')))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"target"},"Target"),(0,o.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,o.kt)("p",null,"Write data as avro files at the specified path."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Location"),(0,o.kt)("td",{parentName:"tr",align:"left"},"File path where avro files are present"),(0,o.kt)("td",{parentName:"tr",align:"left"},"True"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Avro Schema"),(0,o.kt)("td",{parentName:"tr",align:"left"},'Optional schema provided by a user in JSON format. When writing Avro, this option can be set if the expected output Avro schema doesn\'t match the schema converted by Spark. For example, the expected schema of one column is of "enum" type, instead of "string" type in the default converted schema.'),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Record Name"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Top level record name in write result, which is required in Avro spec."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"topLevelRecord")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Record Namespace"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Record namespace in write result."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},'""')),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Compression"),(0,o.kt)("td",{parentName:"tr",align:"left"},"The compression option allows to specify a compression codec used in write.",(0,o.kt)("br",null)," Currently supported codecs are uncompressed, snappy, deflate, bzip2, xz and zstandard.",(0,o.kt)("br",null),"If the option is not set, the configuration spark.sql.avro.compression.codec config is taken into account."),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"snappy")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Write Mode"),(0,o.kt)("td",{parentName:"tr",align:"left"},"Write mode for dataframe"),(0,o.kt)("td",{parentName:"tr",align:"left"},"True"),(0,o.kt)("td",{parentName:"tr",align:"left"},"error")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"Partition Columns"),(0,o.kt)("td",{parentName:"tr",align:"left"},"List of columns to partition the avro files by"),(0,o.kt)("td",{parentName:"tr",align:"left"},"False"),(0,o.kt)("td",{parentName:"tr",align:"left"},"None")))),(0,o.kt)("h3",{id:"target"},"Example"),(0,o.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,o.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,o.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/174399603-07080a2f-a52b-4feb-a029-733f947fad6c.mp4",title:"Avro Target",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,o.kt)("h3",{id:"target-code"},"Generated Code"),(0,o.kt)(l.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'def write_avro(spark: SparkSession, in0: DataFrame):\n    in0.write\\\n        .format("avro")\\\n        .mode("overwrite")\\\n        .partitionBy("dob_year","dob_month")\\\n        .save("dbfs:/data/test_output.avro")\n'))),(0,o.kt)(i.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'object write_avro {\n  def apply(spark: SparkSession, in: DataFrame): Unit =\n    in.write\n        .format("avro")\n        .mode("overwrite")\n        .partitionBy("dob_year","dob_month")\n        .save("dbfs:/data/test_output.avro")\n}\n')))),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To know more about tweaking avro related properties in spark config ",(0,o.kt)("a",{parentName:"p",href:"https://spark.apache.org/docs/latest/sql-data-sources-avro.html"},(0,o.kt)("strong",{parentName:"a"},"click here")),"."))))}g.isMDXComponent=!0},2985:function(e,t,a){t.Z=a.p+"assets/images/avro_schema_eg1-217e0799fe8eebba43d02a30cd1011a7.png"}}]);