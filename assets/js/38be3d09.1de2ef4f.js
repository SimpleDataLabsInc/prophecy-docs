"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[42437],{15354:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/gem-builder-ui-b0bd1d841891aeb22ddef5398815b8f0.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}},40915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"extensibility/gem-builder/gem-builder-reference","title":"Gem Builder reference for Spark","description":"Detailed explanation of custom gem code structure","source":"@site/docs/extensibility/gem-builder/gem-builder-reference.md","sourceDirName":"extensibility/gem-builder","slug":"/extensibility/gem-builder/gem-builder-reference","permalink":"/extensibility/gem-builder/gem-builder-reference","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gem builder","permalink":"/tags/gem-builder"}],"version":"current","frontMatter":{"title":"Gem Builder reference for Spark","id":"gem-builder-reference","description":"Detailed explanation of custom gem code structure","sidebar_label":"Reference for Spark","tags":["gem builder"]},"sidebar":"mySidebar","previous":{"title":"Gem Builder for Spark","permalink":"/engineers/gem-builder"},"next":{"title":"Optimization functions","permalink":"/extensibility/gem-builder/optimization-functions"}}');var r=t(74848),i=t(28453),a=t(65537),s=t(79329);const l={title:"Gem Builder reference for Spark",id:"gem-builder-reference",description:"Detailed explanation of custom gem code structure",sidebar_label:"Reference for Spark",tags:["gem builder"]},d=void 0,c={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Mode",id:"mode",level:2},{value:"Classes",id:"classes",level:2},{value:"Functions",id:"functions",level:2},{value:"Examples",id:"examples",level:2},{value:"Parent Class",id:"parent-class",level:3},{value:"Properties Classes",id:"properties-classes",level:3},{value:"Dialog (UI)",id:"dialog-ui",level:3},{value:"Validation",id:"validation",level:3},{value:"State Changes",id:"state-changes",level:3},{value:"Component Code",id:"component-code",level:3},{value:"Dataset Format example",id:"dataset-format-example",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This page provides information about how gems are written in code. Reference this page when you are building or editing custom gems."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["Some options require a specific ",(0,r.jsx)(n.strong,{children:"gemLibsVersion"}),". To update this, you must manually change the ",(0,r.jsx)(n.code,{children:"gemLibsVersion"})," value inside ",(0,r.jsx)(n.strong,{children:"pbt_project.yml"})," in your project Git repository."]}),"\n",(0,r.jsx)(n.h2,{id:"mode",children:"Mode"}),"\n",(0,r.jsx)(n.p,{children:"There are a few different types of gems that you can create. The table below describes each mode you can choose."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Mode"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Additional settings"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Transformation"}),(0,r.jsx)(n.td,{children:"Edits intermediate data in the pipeline that is in-memory."}),(0,r.jsxs)(n.td,{children:["Choose the ",(0,r.jsx)(n.strong,{children:"category"})," of the transformation gem"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Dataset Format"}),(0,r.jsx)(n.td,{children:"Reads and writes data between storage and memory."}),(0,r.jsxs)(n.td,{children:["Choose whether the type is ",(0,r.jsx)(n.strong,{children:"batch"})," or ",(0,r.jsx)(n.strong,{children:"streaming"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Custom Subgraph (",(0,r.jsx)(n.strong,{children:"Python only"}),")"]}),(0,r.jsxs)(n.td,{children:["Controls the flow of gems. Visit the ",(0,r.jsx)(n.a,{href:"/engineers/subgraph",children:"Subgraph"})," page for an example."]}),(0,r.jsx)(n.td,{children:"None"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(n.p,{children:"The following classes must be included in all Spark gems. Each class extends a base class that Prophecy has defined."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A class where you inherit the representation of the overall gem."}),"\n",(0,r.jsx)(n.li,{children:"A class that contains the properties to be made available to the user for this particular gem."}),"\n",(0,r.jsx)(n.li,{children:"A class that defines the Spark code that needs to run on your Spark cluster."}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Class"}),(0,r.jsx)(n.th,{children:"Base Class for Transformation"}),(0,r.jsx)(n.th,{children:"Base Class for Dataset Format"}),(0,r.jsx)(n.th,{children:"Base Class for Custom Subgraph"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"class CustomGem(BaseClass)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComponentSpec"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"DatasetSpec"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MetaComponentSpec"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"class YourProperties(BaseClass)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComponentProperties"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComponentProperties"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MetaComponentProperties"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"class YourCode(BaseClass)"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComponentCode"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ComponentCode"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MetaComponentCode"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.p,{children:"The following functions can be used to customize Spark gems."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Function"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Return"}),(0,r.jsx)(n.th,{children:"Gem Mode"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"optimizeCode"})}),(0,r.jsx)(n.td,{children:"Enables the Prophecy optimizer to simplify the gem code when it runs."}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"customOutputSchemaEnabled"})}),(0,r.jsxs)(n.td,{children:["Enables the ",(0,r.jsx)(n.a,{href:"/Spark/gems/#output-ports",children:"custom schema"})," option by default in the gem. Requires gemLibsVersion 1.1.47+ for Scala."]}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Transformation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"dialog"})}),(0,r.jsx)(n.td,{children:"Defines how you want the gem to look like in the visual interface."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Dialog"})," object"]}),(0,r.jsx)(n.td,{children:"Transformation and Subgraph"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sourceDialog"})}),(0,r.jsx)(n.td,{children:"Defines how you want the source gem to look like in the visual interface."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"DatasetDialog"})," object"]}),(0,r.jsx)(n.td,{children:"Dataset and Subgraph"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"targetDialog"})}),(0,r.jsx)(n.td,{children:"Defines how you want the target gem to look like in the visual interface."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"DatasetDialog"})," object"]}),(0,r.jsx)(n.td,{children:"Dataset and Subgraph"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"validate"})}),(0,r.jsx)(n.td,{children:"Defines how to detect user errors when using the gem."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Diagnostics"})," array"]}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"onChange"})}),(0,r.jsx)(n.td,{children:"Define UI state transformations."}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Properties"})," object"]}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"serializeProperty"})}),(0,r.jsxs)(n.td,{children:["(",(0,r.jsx)(n.strong,{children:"Scala only"}),") Takes a Properties object and converts it into JSON format."]}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"deserializeProperty"})}),(0,r.jsxs)(n.td,{children:["(",(0,r.jsx)(n.strong,{children:"Scala only"}),") Parses a JSON string and converts it into a Properties object."]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Properties"})," object"]}),(0,r.jsx)(n.td,{children:"All"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"apply"})}),(0,r.jsxs)(n.td,{children:["Included in the class that extends ",(0,r.jsx)(n.a,{href:"#component-code",children:"component code"})," to define Spark logic."]}),(0,r.jsx)(n.td,{children:"None, DataFrame, or list of DataFrames"}),(0,r.jsx)(n.td,{children:"Transformation and Subgraph"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sourceApply"})}),(0,r.jsxs)(n.td,{children:["Included in the class that extends ",(0,r.jsx)(n.a,{href:"#component-code",children:"component code"})," to define Spark logic."]}),(0,r.jsx)(n.td,{children:"DataFrame"}),(0,r.jsx)(n.td,{children:"Dataset"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"targetApply"})}),(0,r.jsxs)(n.td,{children:["Included in the class that extends ",(0,r.jsx)(n.a,{href:"#component-code",children:"component code"})," to define Spark logic."]}),(0,r.jsx)(n.td,{children:"None"}),(0,r.jsx)(n.td,{children:"Dataset"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.h3,{id:"parent-class",children:"Parent Class"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'class Filter(ComponentSpec):\nname: str = "Filter"\n    category: str = "Transform"\n    def optimizeCode(self) -> bool:\n        return True\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'object Filter extends ComponentSpec {\nval name: String = "Filter"\nval category: String = "Transform"\noverride def optimizeCode: Boolean = true\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"properties-classes",children:"Properties Classes"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'@dataclass(frozen=True)\n    class FilterProperties(ComponentProperties):\n        columnsSelector: List[str] = field(default_factory=list)\n        condition: SColumn = SColumn("lit(True)")\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'    case class FilterProperties(\n    @Property("Columns selector")\n    columnsSelector: List[String] = Nil,\n    @Property("Filter", "Predicate expression to filter rows of incoming dataframe")\n    condition: SColumn = SColumn("lit(true)")\n  ) extends ComponentProperties\n\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"dialog-ui",children:"Dialog (UI)"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'def dialog(self) -> Dialog:\n        return Dialog("Filter").addElement(\n            ColumnsLayout(height="100%")\n                .addColumn(PortSchemaTabs(selectedFieldsProperty=("columnsSelector")).importSchema(), "2fr")\n                .addColumn(StackLayout(height=("100%"))\n                .addElement(TitleElement("Filter Condition"))\n                .addElement(\n                Editor(height=("100%")).withSchemaSuggestions().bindProperty("condition.expression")\n            ), "5fr"))\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'def dialog: Dialog = Dialog("Filter")\n    .addElement(\n      ColumnsLayout(height = Some("100%"))\n        .addColumn(\n          PortSchemaTabs(selectedFieldsProperty = Some("columnsSelector")).importSchema(),\n          "2fr"\n        )\n        .addColumn(\n          StackLayout(height = Some("100%"))\n            .addElement(TitleElement("Filter Condition"))\n            .addElement(\n              Editor(height = Some("100%"))\n                .withSchemaSuggestions()\n                .bindProperty("condition.expression")\n            ),\n          "5fr"\n        )\n    )\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"After the Dialog object is defined, it is serialized as JSON and rendered in the UI. When you preview this visual interface of the example code above, it appears like this:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Dialog",src:t(15354).A+"",width:"1636",height:"846"})}),"\n",(0,r.jsx)(n.p,{children:"Various UI components can be added to this function such as scroll boxes, tabs, buttons, and more. You can also group these components into different panels."}),"\n",(0,r.jsxs)(n.p,{children:["Column Selector: This is a special property that you should add if you want to select the columns from UI and then highlight the used columns using the ",(0,r.jsx)(n.code,{children:"onChange"})," function."]}),"\n",(0,r.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'def validate(self, component: Component[FilterProperties]) -> List[Diagnostic]:\n        return validateSColumn(component.properties.condition, "condition", component)\n\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'def validate(component: Component)(implicit context: WorkflowContext): List[Diagnostic] = {\n    val diagnostics =\n      validateSColumn(component.properties.condition, "condition", component)\n    diagnostics.toList\n  }\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"state-changes",children:"State Changes"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"def onChange(self, oldState: Component[FilterProperties], newState: Component[FilterProperties]) -> Component[\n        FilterProperties]:\n        newProps = newState.properties\n        usedColExps = getColumnsToHighlight2([newProps.condition], newState)\n        return newState.bindProperties(replace(newProps, columnsSelector=usedColExps))\n\n"})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"def onChange(oldState: Component, newState: Component)(implicit context: WorkflowContext): Component = {\n    val newProps = newState.properties\n    val portId = newState.ports.inputs.head.id\n\n    val expressions = getColumnsToHighlight(List(newProps.condition), newState)\n\n    newState.copy(properties = newProps.copy(columnsSelector = expressions))\n  }\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"component-code",children:"Component Code"}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:"class FilterCode(ComponentCode):\ndef __init__(self, newProps):\nself.props: Filter.FilterProperties = newProps\n\n    def apply(self, spark: SparkSession, in0: DataFrame) -> DataFrame:\n            return in0.filter(self.props.condition.column())\n"})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:"class FilterCode(props: PropertiesType)(implicit context: WorkflowContext) extends ComponentCode {\n\n    def apply(spark: SparkSession, in: DataFrame): DataFrame = {\n      val out = in.filter(props.condition.column)\n      out\n    }\n\n  }\n"})})})]}),"\n",(0,r.jsx)(n.p,{children:"If you want to test your Spark code, you can modify properties in the visual preview and save the changes. Then, you can see the generated Spark code which will eventually run on your cluster."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["To keep gems generally compatible with each other, they must conform to a common interface. Therefore, as defined in the ",(0,r.jsx)(n.code,{children:"apply()"})," method, gems must accept and produce ",(0,r.jsx)(n.strong,{children:"DataFrame objects"})," at the input and output ports."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To assist the Spark Catalyst Optimizer to build scalable code, Prophecy performs some minor optimizations to the code\ngenerated by the ",(0,r.jsx)(n.code,{children:"apply()"})," method."]})}),"\n",(0,r.jsx)(n.h3,{id:"dataset-format-example",children:"Dataset Format example"}),"\n",(0,r.jsx)(n.p,{children:"The previous examples were for Transformation gems. The following example is the code for a Dataset Format gem."}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(s.A,{value:"py",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",children:'from pyspark.sql import SparkSession, DataFrame\nfrom pyspark.sql.types import StructType\n\nfrom prophecy.cb.server.base.ComponentBuilderBase import ComponentCode, Diagnostic, SeverityLevelEnum\nfrom prophecy.cb.server.base.DatasetBuilderBase import DatasetSpec, DatasetProperties, Component\nfrom prophecy.cb.ui.uispec import *\n\n\nclass ParquetFormat(DatasetSpec):\n    name: str = "parquet"\n    datasetType: str = "File"\n\n    def optimizeCode(self) -> bool:\n        return True\n\n    @dataclass(frozen=True)\n    class ParquetProperties(DatasetProperties):\n        schema: Optional[StructType] = None\n        description: Optional[str] = ""\n        useSchema: Optional[bool] = False\n        path: str = ""\n        mergeSchema: Optional[bool] = None\n        datetimeRebaseMode: Optional[str] = None\n        int96RebaseMode: Optional[str] = None\n        compression: Optional[str] = None\n        partitionColumns: Optional[List[str]] = None\n        writeMode: Optional[str] = None\n        pathGlobFilter: Optional[str] = None\n        modifiedBefore: Optional[str] = None\n        modifiedAfter: Optional[str] = None\n        recursiveFileLookup: Optional[bool] = None\n\n    def sourceDialog(self) -> DatasetDialog:\n        return DatasetDialog("parquet") \\\n            .addSection("LOCATION", TargetLocation("path")) \\\n            .addSection(\n            "PROPERTIES",\n            ColumnsLayout(gap=("1rem"), height=("100%"))\n                .addColumn(\n                ScrollBox().addElement(\n                    StackLayout(height=("100%"))\n                        .addElement(\n                        StackItem(grow=(1)).addElement(\n                            FieldPicker(height=("100%"))\n                                .addField(\n                                TextArea("Description", 2, placeholder="Dataset description..."),\n                                "description",\n                                True\n                            )\n                                .addField(Checkbox("Use user-defined schema"), "useSchema", True)\n                                .addField(Checkbox("Merge schema"), "mergeSchema")\n                                .addField(\n                                SelectBox("Datetime Rebase Mode")\n                                    .addOption("EXCEPTION", "EXCEPTION")\n                                    .addOption("CORRECTED", "CORRECTED")\n                                    .addOption("LEGACY", "LEGACY"),\n                                "datetimeRebaseMode"\n                            )\n                                .addField(\n                                SelectBox("Int96 Rebase Mode")\n                                    .addOption("EXCEPTION", "EXCEPTION")\n                                    .addOption("CORRECTED", "CORRECTED")\n                                    .addOption("LEGACY", "LEGACY"),\n                                "int96RebaseMode"\n                            )\n                                .addField(Checkbox("Recursive File Lookup"), "recursiveFileLookup")\n                                .addField(TextBox("Path Global Filter").bindPlaceholder(""), "pathGlobFilter")\n                                .addField(TextBox("Modified Before").bindPlaceholder(""), "modifiedBefore")\n                                .addField(TextBox("Modified After").bindPlaceholder(""), "modifiedAfter")\n                        )\n                    )\n                ),\n                "auto"\n            )\n                .addColumn(SchemaTable("").bindProperty("schema"), "5fr")\n        ) \\\n            .addSection(\n            "PREVIEW",\n            PreviewTable("").bindProperty("schema")\n        )\n\n    def targetDialog(self) -> DatasetDialog:\n        return DatasetDialog("parquet") \\\n            .addSection("LOCATION", TargetLocation("path")) \\\n            .addSection(\n            "PROPERTIES",\n            ColumnsLayout(gap=("1rem"), height=("100%"))\n                .addColumn(\n                ScrollBox().addElement(\n                    StackLayout(height=("100%")).addElement(\n                        StackItem(grow=(1)).addElement(\n                            FieldPicker(height=("100%"))\n                                .addField(\n                                TextArea("Description", 2, placeholder="Dataset description..."),\n                                "description",\n                                True\n                            )\n                                .addField(\n                                SelectBox("Write Mode")\n                                    .addOption("error", "error")\n                                    .addOption("overwrite", "overwrite")\n                                    .addOption("append", "append")\n                                    .addOption("ignore", "ignore"),\n                                "writeMode"\n                            )\n                                .addField(\n                                SchemaColumnsDropdown("Partition Columns")\n                                    .withMultipleSelection()\n                                    .bindSchema("schema")\n                                    .showErrorsFor("partitionColumns"),\n                                "partitionColumns"\n                            )\n                                .addField(\n                                SelectBox("Compression Codec")\n                                    .addOption("none", "none")\n                                    .addOption("uncompressed", "uncompressed")\n                                    .addOption("gzip", "gzip")\n                                    .addOption("lz4", "lz4")\n                                    .addOption("snappy", "snappy")\n                                    .addOption("lzo", "lzo")\n                                    .addOption("brotli", "brotli")\n                                    .addOption("zstd", "zstd"),\n                                "compression"\n                            )\n                        )\n                    )\n                ),\n                "auto"\n            )\n                .addColumn(SchemaTable("").isReadOnly().withoutInferSchema().bindProperty("schema"), "5fr")\n        )\n\n    def validate(self, component: Component) -> list:\n        diagnostics = super(ParquetFormat, self).validate(component)\n        if len(component.properties.path) == 0:\n            diagnostics.append(\n                Diagnostic("properties.path", "path variable cannot be empty [Location]", SeverityLevelEnum.Error))\n        return diagnostics\n\n    def onChange(self, oldState: Component, newState: Component) -> Component:\n        return newState\n\n    class ParquetFormatCode(ComponentCode):\n        def __init__(self, props):\n            self.props: ParquetFormat.ParquetProperties = props\n\n        def sourceApply(self, spark: SparkSession) -> DataFrame:\n            reader = spark.read.format("parquet")\n            if self.props.mergeSchema is not None:\n                reader = reader.option("mergeSchema", self.props.mergeSchema)\n            if self.props.datetimeRebaseMode is not None:\n                reader = reader.option("datetimeRebaseMode", self.props.datetimeRebaseMode)\n            if self.props.int96RebaseMode is not None:\n                reader = reader.option("int96RebaseMode", self.props.int96RebaseMode)\n            if self.props.modifiedBefore is not None:\n                reader = reader.option("modifiedBefore", self.props.modifiedBefore)\n            if self.props.modifiedAfter is not None:\n                reader = reader.option("modifiedAfter", self.props.modifiedAfter)\n            if self.props.recursiveFileLookup is not None:\n                reader = reader.option("recursiveFileLookup", self.props.recursiveFileLookup)\n            if self.props.pathGlobFilter is not None:\n                reader = reader.option("pathGlobFilter", self.props.pathGlobFilter)\n\n            if self.props.schema is not None and self.props.useSchema:\n                reader = reader.schema(self.props.schema)\n\n            return reader.load(self.props.path)\n\n        def targetApply(self, spark: SparkSession, in0: DataFrame):\n            writer = in0.write.format("parquet")\n            if self.props.compression is not None:\n                writer = writer.option("compression", self.props.compression)\n\n            if self.props.writeMode is not None:\n                writer = writer.mode(self.props.writeMode)\n            if self.props.partitionColumns is not None and len(self.props.partitionColumns) > 0:\n                writer = writer.partitionBy(*self.props.partitionColumns)\n\n            writer.save(self.props.path)\n\n'})})}),(0,r.jsx)(s.A,{value:"scala",label:"Scala",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-scala",children:'package io.prophecy.core.instructions.all.datasets\n\nimport io.prophecy.core.instructions.all._\nimport io.prophecy.core.instructions.spec._\nimport io.prophecy.core.program.WorkflowContext\nimport org.apache.spark.sql.{DataFrame, SparkSession}\nimport org.apache.spark.sql.types.StructType\nimport io.prophecy.libs._\n\nobject ParquetFormat extends DatasetSpec {\n\n  val name: String = "parquet"\n  val datasetType: String = "File"\n\n  type PropertiesType = ParquetProperties\n  case class ParquetProperties(\n    @Property("Schema")\n    schema: Option[StructType] = None,\n    @Property("Description")\n    description: Option[String] = Some(""),\n    @Property("useSchema")\n    useSchema: Option[Boolean] = Some(false),\n    @Property("Path")\n    path: String = "",\n    @Property(\n      "",\n      "(default is the value specified in spark.sql.parquet.mergeSchema(false)): sets whether we should merge schemas collected from all Parquet part-files. This will override spark.sql.parquet.mergeSchema."\n    )\n    mergeSchema: Option[Boolean] = None,\n    @Property(\n      "datetimeRebaseMode",\n      "The datetimeRebaseMode option allows to specify the rebasing mode for the values of the DATE, TIMESTAMP_MILLIS, TIMESTAMP_MICROS logical types from the Julian to Proleptic Gregorian calendar."\n    )\n    datetimeRebaseMode: Option[String] = None,\n    @Property(\n      "int96RebaseMode",\n      "The int96RebaseMode option allows to specify the rebasing mode for INT96 timestamps from the Julian to Proleptic Gregorian calendar."\n    )\n    int96RebaseMode: Option[String] = None,\n    @Property("compression", "(default: none) compression codec to use when saving to file.")\n    compression: Option[String] = None,\n    @Property("partitionColumns", "Partitioning column.")\n    partitionColumns: Option[List[String]] = None,\n    @Property("Write Mode", """(default: "error") Specifies the behavior when data or table already exists.""")\n    writeMode: Option[String] = None,\n    @Property(\n      "",\n      "an optional glob pattern to only include files with paths matching the pattern. The syntax follows org.apache.hadoop.fs.GlobFilter. It does not change the behavior of partition discovery."\n    )\n    pathGlobFilter: Option[String] = None,\n    @Property(\n      "",\n      "(batch only): an optional timestamp to only include files with modification times occurring before the specified Time. The provided timestamp must be in the following form: YYYY-MM-DDTHH:mm:ss (e.g. 2020-06-01T13:00:00)"\n    )\n    modifiedBefore: Option[String] = None,\n    @Property(\n      "",\n      "(batch only): an optional timestamp to only include files with modification times occurring after the specified Time. The provided timestamp must be in the following form: YYYY-MM-DDTHH:mm:ss (e.g. 2020-06-01T13:00:00)"\n    )\n    modifiedAfter: Option[String] = None,\n    @Property("", "recursively scan a directory for files. Using this option disables partition discovery")\n    recursiveFileLookup: Option[Boolean] = None\n  ) extends DatasetProperties\n\n  def sourceDialog: DatasetDialog = DatasetDialog("parquet")\n    .addSection("LOCATION", TargetLocation("path"))\n    .addSection(\n      "PROPERTIES",\n      ColumnsLayout(gap = Some("1rem"), height = Some("100%"))\n        .addColumn(\n          ScrollBox().addElement(\n            StackLayout(height = Some("100%"))\n              .addElement(\n                StackItem(grow = Some(1)).addElement(\n                  FieldPicker(height = Some("100%"))\n                    .addField(\n                      TextArea("Description", 2, placeholder = "Dataset description..."),\n                      "description",\n                      true\n                    )\n                    .addField(Checkbox("Use user-defined schema"), "useSchema", true)\n                    .addField(Checkbox("Merge schema"), "mergeSchema")\n                    .addField(\n                      SelectBox("Datetime Rebase Mode")\n                        .addOption("EXCEPTION", "EXCEPTION")\n                        .addOption("CORRECTED", "CORRECTED")\n                        .addOption("LEGACY", "LEGACY"),\n                      "datetimeRebaseMode"\n                    )\n                    .addField(\n                      SelectBox("Int96 Rebase Mode")\n                        .addOption("EXCEPTION", "EXCEPTION")\n                        .addOption("CORRECTED", "CORRECTED")\n                        .addOption("LEGACY", "LEGACY"),\n                      "int96RebaseMode"\n                    )\n                    .addField(Checkbox("Recursive File Lookup"), "recursiveFileLookup")\n                    .addField(TextBox("Path Global Filter").bindPlaceholder(""), "pathGlobFilter")\n                    .addField(TextBox("Modified Before").bindPlaceholder(""), "modifiedBefore")\n                    .addField(TextBox("Modified After").bindPlaceholder(""), "modifiedAfter")\n                )\n              )\n          ),\n          "auto"\n        )\n        .addColumn(SchemaTable("").bindProperty("schema"), "5fr")\n    )\n    .addSection(\n      "PREVIEW",\n      PreviewTable("").bindProperty("schema")\n    )\n\n  def targetDialog: DatasetDialog = DatasetDialog("parquet")\n    .addSection("LOCATION", TargetLocation("path"))\n    .addSection(\n      "PROPERTIES",\n      ColumnsLayout(gap = Some("1rem"), height = Some("100%"))\n        .addColumn(\n          ScrollBox().addElement(\n            StackLayout(height = Some("100%")).addElement(\n              StackItem(grow = Some(1)).addElement(\n                FieldPicker(height = Some("100%"))\n                  .addField(\n                    TextArea("Description", 2, placeholder = "Dataset description..."),\n                    "description",\n                    true\n                  )\n                  .addField(\n                    SelectBox("Write Mode")\n                      .addOption("error", "error")\n                      .addOption("overwrite", "overwrite")\n                      .addOption("append", "append")\n                      .addOption("ignore", "ignore"),\n                    "writeMode"\n                  )\n                  .addField(\n                    SchemaColumnsDropdown("Partition Columns")\n                      .withMultipleSelection()\n                      .bindSchema("schema")\n                      .showErrorsFor("partitionColumns"),\n                    "partitionColumns"\n                  )\n                  .addField(\n                    SelectBox("Compression Codec")\n                      .addOption("none", "none")\n                      .addOption("uncompressed", "uncompressed")\n                      .addOption("gzip", "gzip")\n                      .addOption("lz4", "lz4")\n                      .addOption("snappy", "snappy")\n                      .addOption("lzo", "lzo")\n                      .addOption("brotli", "brotli")\n                      .addOption("zstd", "zstd"),\n                    "compression"\n                  )\n              )\n            )\n          ),\n          "auto"\n        )\n        .addColumn(SchemaTable("").isReadOnly().withoutInferSchema().bindProperty("schema"), "5fr")\n    )\n\n  override def validate(component: Component)(implicit context: WorkflowContext): List[Diagnostic] = {\n    import scala.collection.mutable.ListBuffer\n    val diagnostics = ListBuffer[Diagnostic]()\n    diagnostics ++= super.validate(component)\n\n    if (component.properties.path.isEmpty) {\n      diagnostics += Diagnostic("properties.path", "path variable cannot be empty [Location]", SeverityLevel.Error)\n    }\n    if (component.properties.schema.isEmpty) {\n      // diagnostics += Diagnostic("properties.schema", "Schema cannot be empty [Properties]", SeverityLevel.Error)\n    }\n\n    diagnostics.toList\n  }\n\n  def onChange(oldState: Component, newState: Component)(implicit context: WorkflowContext): Component = newState\n\n  class ParquetFormatCode(props: ParquetProperties) extends ComponentCode {\n\n    def sourceApply(spark: SparkSession): DataFrame = {\n      var reader = spark.read\n        .format("parquet")\n        .option("mergeSchema", props.mergeSchema)\n        .option("datetimeRebaseMode", props.datetimeRebaseMode)\n        .option("int96RebaseMode", props.int96RebaseMode)\n        .option("modifiedBefore", props.modifiedBefore)\n        .option("modifiedAfter", props.modifiedAfter)\n        .option("recursiveFileLookup", props.recursiveFileLookup)\n        .option("pathGlobFilter", props.pathGlobFilter)\n\n      if (props.useSchema.isDefined && props.useSchema.get)\n        props.schema.foreach(schema \u21d2 reader = reader.schema(schema))\n\n      reader.load(props.path)\n    }\n\n    def targetApply(spark: SparkSession, in: DataFrame): Unit = {\n      var writer = in.write\n        .format("parquet")\n        .option("compression", props.compression)\n\n      props.writeMode.foreach { mode \u21d2\n        writer = writer.mode(mode)\n      }\n      props.partitionColumns.foreach(pcols \u21d2\n        writer = pcols match {\n          case Nil \u21d2 writer\n          case _ \u21d2 writer.partitionBy(pcols: _*)\n        }\n      )\n      writer.save(props.path)\n    }\n\n  }\n\n}\n\n\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},65537:(e,n,t)=>{t.d(n,{A:()=>C});var o=t(96540),r=t(18215),i=t(65627),a=t(56347),s=t(50372),l=t(30604),d=t(11861),c=t(78749);function p(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:r}}=e;return{value:n,label:t,attributes:o,default:r}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(i),(0,o.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,i=h(e),[a,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:i}))),[d,p]=u({queryString:t,groupId:r}),[f,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,i]=(0,c.Dv)(t);return[r,(0,o.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:r}),g=(()=>{const e=d??f;return m({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),x(e)}),[p,x,i]),tabValues:i}}var x=t(9136);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function j(e){let{className:n,block:t,selectedValue:o,selectValue:a,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),r=s[t].value;r!==o&&(d(n),a(r))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{l.push(e)},onKeyDown:p,onClick:c,...i,className:(0,r.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function S(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,o.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=f(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",g.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(S,{...n,...e})]})}function C(e){const n=(0,x.A)();return(0,b.jsx)(y,{...e,children:p(e.children)},String(n))}},79329:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var o=t(18215);const r={tabItem:"tabItem_Ymn6"};var i=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,o.A)(r.tabItem,a),hidden:t,children:n})}}}]);