"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[4245],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(g,r(r({ref:t},p),{},{components:a})):n.createElement(g,r({ref:t},p))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},72360:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),i=a(86010);const l={tabItem:"tabItem_OmH5"};function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(l.tabItem,r),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(83117),i=a(67294),l=a(72389),r=a(67392),o=a(7094),s=a(12466),c=a(86010);const p={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:t,block:a,defaultValue:l,values:u,groupId:d,className:m}=e,g=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=u??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),h=(0,r.l)(f,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===l?l:l??g.find((e=>e.props.default))?.props.value??g[0]?.props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,o.U)(),[y,v]=(0,i.useState)(b),x=[],{blockElementScrollPositionUntilNextRender:N}=(0,s.o5)();if(null!=d){const e=k[d];null!=e&&e!==y&&f.some((t=>t.value===e))&&v(e)}const S=e=>{const t=e.currentTarget,a=x.indexOf(t),n=f[a].value;n!==y&&(N(t),v(n),null!=d&&w(d,n))},X=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;t=x[a]||x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;t=x[a]||x[x.length-1];break}}t?.focus()};return i.createElement("div",{className:(0,c.Z)("tabs-container",p.tabList)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":a},m)},f.map((e=>{let{value:t,label:a,attributes:l}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>x.push(e),onKeyDown:X,onFocus:S,onClick:S},l,{className:(0,c.Z)("tabs__item",p.tabItem,l?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,i.cloneElement)(g.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function d(e){const t=(0,l.Z)();return i.createElement(u,(0,n.Z)({key:String(t)},e))}},17651:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var n=a(83117),i=(a(67294),a(3905)),l=a(9877),r=a(72360);const o={title:"Working with XLSX (Excel) files",id:"working-with-excel",description:"Explore the basics of working with XLSX (Excel) files with Prophecy",sidebar_position:1,tags:["gems","devops","file","tutorial","xlsx"]},s=void 0,c={unversionedId:"tutorials/low-code-spark/working-with-excel",id:"tutorials/low-code-spark/working-with-excel",title:"Working with XLSX (Excel) files",description:"Explore the basics of working with XLSX (Excel) files with Prophecy",source:"@site/docs/tutorials/low-code-spark/excel.md",sourceDirName:"tutorials/low-code-spark",slug:"/tutorials/low-code-spark/working-with-excel",permalink:"/tutorials/low-code-spark/working-with-excel",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"devops",permalink:"/tags/devops"},{label:"file",permalink:"/tags/file"},{label:"tutorial",permalink:"/tags/tutorial"},{label:"xlsx",permalink:"/tags/xlsx"}],version:"current",sidebarPosition:1,frontMatter:{title:"Working with XLSX (Excel) files",id:"working-with-excel",description:"Explore the basics of working with XLSX (Excel) files with Prophecy",sidebar_position:1,tags:["gems","devops","file","tutorial","xlsx"]},sidebar:"defaultSidebar",previous:{title:"Low-code Spark",permalink:"/category/low-code-spark"},next:{title:"Video Tutorials",permalink:"/category/video-tutorials"}},p={},u=[{value:"Reading XLSX files",id:"reading-xlsx-files",level:2},{value:"Writing XLSX files",id:"writing-xlsx-files",level:2},{value:"Writing a single output file",id:"writing-a-single-output-file",level:3}],d={toc:u},m="wrapper";function g(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"If you've worked with numbers in your day-to-day operations, odds are you've run into a need to use Excel at one point or another. This tutorial is going to cover the two most basic scenarios: Reading and Writing."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For a full list of options supported by Prophecy when interacting with Excel files ",(0,i.kt)("a",{parentName:"p",href:"/low-code-spark/gems/source-target/file/xlsx"},"see here")))),(0,i.kt)("h2",{id:"reading-xlsx-files"},"Reading XLSX files"),(0,i.kt)("p",null,"Reading an Excel file is quite easy in Prophecy! Simply follow these steps to create a new XLSX source."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select the XLSX format ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select XLSX source type",src:a(15085).Z,width:"3202",height:"2002"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Navigate to the desired XLSX source file ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Navigate to XLSX source file",src:a(20269).Z,width:"3044",height:"2000"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Customize any properties you might need and tweak the schema to your liking ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Adjust parameters and schema",src:a(63909).Z,width:"3032",height:"1998"})," ",(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Preview the file and double-check that the schema matches your intentions ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Preview the input file",src:a(11281).Z,width:"3036",height:"1998"}))),(0,i.kt)("p",null,"Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"Source")," Gem is created and validation passes you'll be able to find the code of your new ",(0,i.kt)("inlineCode",{parentName:"p"},"Source")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"graph")," directory of your Pipeline code."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def Source_0(spark: SparkSession) -> DataFrame:\n    if Config.fabricName == "demos":\n        return spark.read\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("inferSchema", True)\\\n            .load("dbfs:/FileStore/Users/scott/plain_number.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n\n')))),(0,i.kt)("h2",{id:"writing-xlsx-files"},"Writing XLSX files"),(0,i.kt)("p",null,"Writing an Excel file is just as easy, with only one small caveat to be discussed after. Let's look at an example Pipeline with an XLSX output target:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Sample Pipeline with XLSX output",src:a(3496).Z,width:"1616",height:"774"})),(0,i.kt)("p",null,"In this scenario we're building a report of spending by customer and want an XLSX file as output."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Select the XLSX format ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select the XLSX target type",src:a(15409).Z,width:"2640",height:"1386"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Navigate to the target location ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Select destination filename",src:a(57352).Z,width:"2818",height:"444"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Customize any properties needed when writing the output file ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Set output parameters",src:a(69515).Z,width:"2776",height:"1026"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Run the Pipeline!")),(0,i.kt)("p",null,"Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"Target")," Gem is created and validation passes you'll be able to find the code of your new ",(0,i.kt)("inlineCode",{parentName:"p"},"Target")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"graph")," directory of your Pipeline code."),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def ExcelTarget(spark: SparkSession, in0: DataFrame):\n    if Config.fabricName == "demos":\n        in0.write\\\n            .format("excel")\\\n            .option("header", True)\\\n            .option("dataAddress", "A1")\\\n            .option("usePlainNumberFormat", False)\\\n            .mode("overwrite")\\\n            .save("dbfs:/FileStore/Users/scott/customers.xlsx")\n    else:\n        raise Exception("No valid dataset present to read fabric")\n')))),(0,i.kt)("h3",{id:"writing-a-single-output-file"},"Writing a single output file"),(0,i.kt)("p",null,"As mentioned above, there's a caveat when working with any text-based files in Spark. Because of the distributed nature of the framework, you'll find that your output file is not just a single output file but instead a directory with multiple separately partitioned files within it."),(0,i.kt)("p",null,"For example, using ",(0,i.kt)("inlineCode",{parentName:"p"},"dbfs:/FileStore/Users/scott/customers.xlsx")," as my Target location I can see the following in DBFS after running my Pipeline:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"customers.xlsx")," is, in reality, a directory...",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Target output is a directory",src:a(84299).Z,width:"796",height:"49"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"... that contains multiple partitions within it",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Target output is partitioned",src:a(46451).Z,width:"958",height:"263"}),(0,i.kt)("br",null))),(0,i.kt)("p",null,"Each file within this directory will be a separate valid XLSX file with a segment of the overall output data. If you want to output only a single file, you'll need to change your Pipeline as such:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Add a ",(0,i.kt)("inlineCode",{parentName:"li"},"Repartition")," Gem in ",(0,i.kt)("inlineCode",{parentName:"li"},"Coalesce")," mode with the ",(0,i.kt)("inlineCode",{parentName:"li"},"Partition Count")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"1"),". ",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Coalesce using Repartition",src:a(49847).Z,width:"2870",height:"1678"}),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ol"},"Connect it between your second-to-last transformation and the ",(0,i.kt)("inlineCode",{parentName:"li"},"Target")," Gem",(0,i.kt)("br",null),(0,i.kt)("img",{alt:"Attach coalesce before desired target",src:a(7906).Z,width:"1906",height:"882"}),(0,i.kt)("br",null))),(0,i.kt)("p",null,"After running, your output will still be a directory, but this time it will only contain a single output file."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Single output after coalesce",src:a(4808).Z,width:"970",height:"120"})))}g.isMDXComponent=!0},15085:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_src_1-5313bccdece9c6a651be172d88ca7122.png"},20269:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_src_2-ef0f8a6104489d61311eeb07ee0e742a.png"},63909:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_src_3-051d6b07ccd8fa67b6f3740f0ab0461c.png"},11281:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_src_4-e283c92a4500361b25e90491c58fa4f7.png"},3496:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_0-a3c18689dca6634c76c38ecd6cd7b35a.png"},15409:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_1-3785e5869cbe8ce3b209f9bb639da7cd.png"},57352:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_2-2942acb3a7922b6739d852f441068d27.png"},69515:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_3-a28bf175888719e996d707cd3b12fed9.png"},84299:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_4-7d10b8bb4ee57b8b856ca7e92ace22a3.png"},49847:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_5.5-1f42007802b75662fd2128729bf05f6a.png"},46451:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_5-b236d1298d654ebd04ce3ed957b9d766.png"},7906:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_6-4fcf34461fd56bcf2dd36f29bb3b223a.png"},4808:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/xlsx_tgt_7-f67147547149a66b6636ee0a2933726c.png"}}]);