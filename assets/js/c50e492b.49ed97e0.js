"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[38655],{28453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>l});var n=s(96540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},43762:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/model-view-98e2d6a7d717d5d8f6c290f59bc1f208.png"},64214:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/lineage-view-0c1713925db518e6783a8b746bfb7dab.png"},64844:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"concepts/project/Model","title":"Models","description":"SQL models define a single target table or view","source":"@site/docs/concepts/project/models.md","sourceDirName":"concepts/project","slug":"/concepts/project/Model","permalink":"/concepts/project/Model","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"concepts","permalink":"/tags/concepts"},{"inline":true,"label":"Models","permalink":"/tags/models"},{"inline":true,"label":"sql","permalink":"/tags/sql"},{"inline":true,"label":"target","permalink":"/tags/target"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Models","id":"Model","description":"SQL models define a single target table or view","sidebar_position":2,"tags":["concepts","Models","sql","target"]},"sidebar":"mySidebar","previous":{"title":"Pipelines","permalink":"/concepts/project/pipeline"},"next":{"title":"Gems","permalink":"/concepts/project/gems"}}');var i=s(74848),o=s(28453);const a={title:"Models",id:"Model",description:"SQL models define a single target table or view",sidebar_position:2,tags:["concepts","Models","sql","target"]},l=void 0,r={},d=[{value:"Data modeling",id:"data-modeling",level:2},{value:"Model development",id:"model-development",level:2},{value:"Models vs pipelines",id:"models-vs-pipelines",level:2},{value:"What&#39;s next",id:"whats-next",level:2}];function c(e){const t={a:"a",admonition:"admonition",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Models are based on SQL-native code and use the ",(0,i.jsx)(t.a,{href:"https://docs.getdbt.com/docs/build/models",children:"dbt Core\u2122\ufe0f"})," build system. Models define a single dataset, typically a table or view, and are useful for transforming data directly in a data warehouse or for existing dbt users. They are best suited for data analytics and transformation needs."]}),"\n",(0,i.jsxs)(t.p,{children:["You can build models from a ",(0,i.jsx)(t.strong,{children:"visual"})," or ",(0,i.jsx)(t.strong,{children:"code"})," interface. When using the visual interface, model components are automatically compiled into SQL select statements that you can reuse and customize."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Prophecy\u2019s visual interface supports SQL models only. If you\u2019d like to define Python models you can still use them within the code interface."})}),"\n",(0,i.jsx)(t.h2,{id:"data-modeling",children:"Data modeling"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Data modeling"})," refers to shaping your data from its raw state to its transformed final state. In Prophecy and dbt, data models are SQL statements that build a single table or view and enable better management. Data models incorporate step-by-step logic, compatible with Prophecy ",(0,i.jsx)(t.a,{href:"/concepts/project/gems",children:"gems"}),". Each model is stored as a SQL file on Git as open-source code. Models can also be reused through Prophecy ",(0,i.jsx)(t.a,{href:"/extensibility/package-hub/",children:"packages"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"model-development",children:"Model development"}),"\n",(0,i.jsxs)(t.p,{children:["In the ",(0,i.jsx)(t.a,{href:"/concepts/project/#project-editor",children:"Project Editor"})," of a SQL project, Prophecy displays models using a lineage view, a visual view, and a code view. As you develop your models, you can commit and release your changes via ",(0,i.jsx)(t.a,{href:"/concepts/git/",children:"Git"}),"."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Lineage view"}),". When you open a SQL project, you first see the ",(0,i.jsx)(t.strong,{children:"lineage"})," view. The lineage provides a high-level view of the project's models with dependencies displayed from left to right."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"lineage-view",src:s(64214).A+"",width:"2880",height:"1726"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Visual view"}),". If you open a specific model, you are taken to the model visual canvas. The visual canvas shows each step needed to move from the referenced tables/seeds/models to the final model. ",(0,i.jsx)(t.a,{href:"/concepts/project/gems",children:"Gems"})," drive data transformations in Prophecy."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Code view"}),". Any changes that you make in the visual view are automatically compiled into code (and vice-versa)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"model-view",src:s(43762).A+"",width:"2880",height:"1726"})}),"\n",(0,i.jsx)(t.h2,{id:"models-vs-pipelines",children:"Models vs pipelines"}),"\n",(0,i.jsx)(t.p,{children:"If you\u2019re already familiar with Prophecy pipelines, models are very similar. The major difference is that each pipeline can create an arbitrary number of outputs, whereas a model only defines one output. Where pipelines can exist only within Spark-based projects, models can exist within SQL-based ones."}),"\n",(0,i.jsx)(t.h2,{id:"whats-next",children:"What's next"}),"\n",(0,i.jsxs)(t.p,{children:["Visit the ",(0,i.jsx)(t.a,{href:"/SQL",children:"SQL"})," documentation to learn more. You can also get started with ",(0,i.jsx)(t.a,{href:"/getting-started/tutorials/sql-with-databricks",children:"SQL on Databricks"})," or ",(0,i.jsx)(t.a,{href:"/getting-started/tutorials/sql-with-snowflake",children:"Snowflake"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);