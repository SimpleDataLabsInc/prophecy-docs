"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[24008],{15445:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"analysts/development/copilot/expression-generation","title":"Generate expressions","description":"Automatically generate expressions with natural language","source":"@site/docs/analysts/development/copilot/gem-expressions.md","sourceDirName":"analysts/development/copilot","slug":"/analysts/expression-generation","permalink":"/analysts/expression-generation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyst","permalink":"/tags/analyst"},{"inline":true,"label":"copilot","permalink":"/tags/copilot"}],"version":"current","frontMatter":{"title":"Generate expressions","id":"expression-generation","slug":"/analysts/expression-generation","description":"Automatically generate expressions with natural language","tags":["analyst","copilot"]},"sidebar":"mySidebar","previous":{"title":"Generate gems","permalink":"/analysts/gem-generation"},"next":{"title":"Gem auto-documentation","permalink":"/analysts/auto-documentation"}}');var i=s(74848),o=s(28453);const r={title:"Generate expressions",id:"expression-generation",slug:"/analysts/expression-generation",description:"Automatically generate expressions with natural language",tags:["analyst","copilot"]},a=void 0,l={},c=[{value:"Example prompts",id:"example-prompts-expressions",level:2}];function d(e){const n={code:"code",h2:"h2",img:"img",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Copilot enhances the expression-building experience within gem configurations by generating context-aware suggestions and expressions based on your input and column metadata."}),"\n",(0,i.jsx)(n.p,{children:"In many cases, Copilot pre-populates expressions based on semantic cues from your column names. For best results, use descriptive column names."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"customer_email"})," \u2192 Clear intent, likely to produce accurate suggestions."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"col1"})," \u2192 Ambiguous, may result in less reliable output."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Copilot expressions",src:s(19810).A+"",width:"2870",height:"1608"})}),"\n",(0,i.jsx)(n.p,{children:"If you want to change the expression or build one from scratch, you can ask Copilot to help you. In both the visual and code expression builder, Copilot can generate your desired logic."}),"\n",(0,i.jsx)(n.h2,{id:"example-prompts-expressions",children:"Example prompts"}),"\n",(0,i.jsx)(n.p,{children:"The following are example prompts you can use to generate expressions in gems."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Scenario"}),(0,i.jsx)(n.th,{children:"Prompt"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Basic transformation"}),(0,i.jsxs)(n.td,{children:["\u201cExtract the domain from the ",(0,i.jsx)(n.code,{children:"email"})," column.\u201d"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"String formatting"}),(0,i.jsxs)(n.td,{children:["\u201cCapitalize the first letter of each word in ",(0,i.jsx)(n.code,{children:"customer_name"}),".\u201d"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Date parsing"}),(0,i.jsxs)(n.td,{children:["\u201cConvert ",(0,i.jsx)(n.code,{children:"order_date"})," to YYYY-MM format.\u201d"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Conditional logic"}),(0,i.jsxs)(n.td,{children:["\u201cIf ",(0,i.jsx)(n.code,{children:"amount"})," > 1000, then label as \u2018high value\u2019, else \u2018standard\u2019.\u201d"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Null handling"}),(0,i.jsxs)(n.td,{children:["\u201cReplace null values in ",(0,i.jsx)(n.code,{children:"zipcode"})," with \u201800000\u2019.\u201d"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Math calculation"}),(0,i.jsxs)(n.td,{children:["\u201cCalculate discount as ",(0,i.jsx)(n.code,{children:"price"})," * ",(0,i.jsx)(n.code,{children:"discount_rate"}),".\u201d"]})]})]})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},19810:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/copilot-expressions-54d039f435397b4e9d9a1236b1d24b43.gif"},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var t=s(96540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);