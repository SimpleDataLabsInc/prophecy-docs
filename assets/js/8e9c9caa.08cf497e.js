"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[892],{15680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>m});var s=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,s,a=function(e,t){if(null==e)return{};var r,s,a={},n=Object.keys(e);for(s=0;s<n.length;s++)r=n[s],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)r=n[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=s.createContext({}),d=function(e){var t=s.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return s.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(r),f=a,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||n;return r?s.createElement(m,i(i({ref:t},l),{},{components:r})):s.createElement(m,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,i=new Array(n);i[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var d=2;d<n;d++)i[d]=r[d];return s.createElement.apply(null,i)}return s.createElement.apply(null,r)}f.displayName="MDXCreateElement"},49966:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var s=r(58168),a=(r(96540),r(15680));const n={title:"Use Databricks Secrets for Username Password fields in Gems",id:"use-dbx-secrets",description:"using Databricks secrets in UserName Passwords fields in Gems",sidebar_position:1,tags:["spark","databricks","secrets","username","passwords"]},i=void 0,o={unversionedId:"low-code-spark/best-practices/use-dbx-secrets",id:"low-code-spark/best-practices/use-dbx-secrets",title:"Use Databricks Secrets for Username Password fields in Gems",description:"using Databricks secrets in UserName Passwords fields in Gems",source:"@site/docs/low-code-spark/best-practices/use-dbx-secret.md",sourceDirName:"low-code-spark/best-practices",slug:"/low-code-spark/best-practices/use-dbx-secrets",permalink:"/low-code-spark/best-practices/use-dbx-secrets",draft:!1,tags:[{label:"spark",permalink:"/tags/spark"},{label:"databricks",permalink:"/tags/databricks"},{label:"secrets",permalink:"/tags/secrets"},{label:"username",permalink:"/tags/username"},{label:"passwords",permalink:"/tags/passwords"}],version:"current",sidebarPosition:1,frontMatter:{title:"Use Databricks Secrets for Username Password fields in Gems",id:"use-dbx-secrets",description:"using Databricks secrets in UserName Passwords fields in Gems",sidebar_position:1,tags:["spark","databricks","secrets","username","passwords"]},sidebar:"defaultSidebar",previous:{title:"Best Practices for Low-code-Spark",permalink:"/low-code-spark/best-practices/"},next:{title:"Low-code SQL",permalink:"/low-code-sql/"}},c={},d=[{value:"Step1: Create Your secrets in Databricks",id:"step1-create-your-secrets-in-databricks",level:3},{value:"Step2: Create Config in Pipeline to map to Created Databricks Secrets",id:"step2-create-config-in-pipeline-to-map-to-created-databricks-secrets",level:3},{value:"Step3: Provide value to the config created",id:"step3-provide-value-to-the-config-created",level:3},{value:"Step4: Add a Snowflake Gem to your Pipeline and refer the above created Configs in the username and password field",id:"step4-add-a-snowflake-gem-to-your-pipeline-and-refer-the-above-created-configs-in-the-username-and-password-field",level:3}],l={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,s.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Using hardcoded usernames and passwords is not recommended when working with Gems. This approach can result in unsafe code, as the credentials may be exposed in your configured Git repository for the Project."),(0,a.yg)("p",null,"For users who are not using Databricks or have private Git repositories, or for those who simply need to quickly test some Gems, plain-text username/password may be used. However, it is strongly advised to utilize the Databricks secrets option when committing the code."),(0,a.yg)("p",null,"To ensure the security of your credentials and streamline the process, we recommend following this step-by-step guide on how to create secrets in Databricks and effectively utilize them in Prophecy Gems. By doing so, you can safeguard sensitive information while maintaining the efficiency and integrity of your project."),(0,a.yg)("p",null,"In this example, we demonstrate the use of Databricks secrets to configure Snowflake credentials for establishing a connection to Snowflake within a Gem."),(0,a.yg)("h3",{id:"step1-create-your-secrets-in-databricks"},"Step1: Create Your secrets in Databricks"),(0,a.yg)("p",null,"Please follow this ",(0,a.yg)("a",{parentName:"p",href:"https://docs.databricks.com/security/secrets/index.html"},"Secrets Documentation")," from Databricks to create your secret scope and keys in Databricks. For this example, You can create one for your Snowflake Username and one for Password. Let's say we created scope ",(0,a.yg)("inlineCode",{parentName:"p"},"demo-scope")," and added two secrets with key ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake-username")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake-password"),"."),(0,a.yg)("h3",{id:"step2-create-config-in-pipeline-to-map-to-created-databricks-secrets"},"Step2: Create Config in Pipeline to map to Created Databricks Secrets"),(0,a.yg)("p",null,"Add configs of Type ",(0,a.yg)("inlineCode",{parentName:"p"},"databricks_secret")," in ",(0,a.yg)("a",{parentName:"p",href:"https://docs.prophecy.io/low-code-spark/configuration#pipeline-configuration"},"Pipeline Configs"),". Let's say we call it ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake_user")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake_pass"),"."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"img.png",src:r(53002).A,width:"1726",height:"966"})),(0,a.yg)("h3",{id:"step3-provide-value-to-the-config-created"},"Step3: Provide value to the config created"),(0,a.yg)("p",null,"Now, lets add value for the created configs ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake_user")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"snowflake_pass")," in the default config. You can also add multiple values in different configs.\nFor value, add the scope and key you created for your secret in the first step and save it. Please refer below image"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"img2.png",src:r(60913).A,width:"1726",height:"968"})),(0,a.yg)("p",null,"It's now ready to be used in your Gems."),(0,a.yg)("h3",{id:"step4-add-a-snowflake-gem-to-your-pipeline-and-refer-the-above-created-configs-in-the-username-and-password-field"},"Step4: Add a Snowflake Gem to your Pipeline and refer the above created Configs in the username and password field"),(0,a.yg)("p",null,"Now that we have a Pipeline config to refer our password stored in Databricks secrets securely, We can go ahead and add a snowflake Gem.\nUse the Config with syntax as ",(0,a.yg)("inlineCode",{parentName:"p"},"${snowflake_user}")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"${snowflake_pass}")," in the username and password field respectively and define all other required fields in the Gem as is.\nYour Gem is now ready to Used and tested."),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"img3.png",src:r(57451).A,width:"1727",height:"966"})),(0,a.yg)("p",null,"If users still use plain-text, they would also see a Warning Diagnostics in their Gems."))}u.isMDXComponent=!0},53002:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/databricks_secrets_config-d74ea437f1452c1e832ca53d6368f406.png"},60913:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/databricks_secrets_value-cc7003ed2959520832658578047c47c0.png"},57451:(e,t,r)=>{r.d(t,{A:()=>s});const s=r.p+"assets/images/snowflake_gem-e2231988f4aac1651682635c6fcae55c.png"}}]);