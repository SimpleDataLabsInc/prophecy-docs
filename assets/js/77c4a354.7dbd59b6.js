"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[35415],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var r=a.createContext({}),d=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(r.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=l,g=p["".concat(r,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[p]="string"==typeof e?e:l,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},12188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(58168),l=(n(96540),n(15680));const i={title:"Flatten Schema",id:"flattenschema",description:"Flatten nested data",sidebar_position:4,tags:["gems","schema","explode","flatten"]},o=void 0,s={unversionedId:"SQL/gems/transform/flattenschema",id:"SQL/gems/transform/flattenschema",title:"Flatten Schema",description:"Flatten nested data",source:"@site/docs/SQL/gems/transform/flattenschema.md",sourceDirName:"SQL/gems/transform",slug:"/SQL/gems/transform/flattenschema",permalink:"/SQL/gems/transform/flattenschema",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"schema",permalink:"/tags/schema"},{label:"explode",permalink:"/tags/explode"},{label:"flatten",permalink:"/tags/flatten"}],version:"current",sidebarPosition:4,frontMatter:{title:"Flatten Schema",id:"flattenschema",description:"Flatten nested data",sidebar_position:4,tags:["gems","schema","explode","flatten"]},sidebar:"defaultSidebar",previous:{title:"Deduplicate",permalink:"/SQL/gems/transform/deduplicate"},next:{title:"Join",permalink:"/SQL/gems/data-joins"}},r={},d=[{value:"The Input",id:"the-input",level:2},{value:"The Expressions",id:"the-expressions",level:2},{value:"The Output",id:"the-output",level:2},{value:"Advanced settings",id:"advanced-settings",level:2}],c={toc:d},p="wrapper";function u(e){let{components:t,...i}=e;return(0,l.yg)(p,(0,a.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h3",null,(0,l.yg)("span",{class:"badge rounded-pill text-bg-light"},"SQL Gem")),(0,l.yg)("p",null,"When processing raw data it can be useful to flatten complex data types like ",(0,l.yg)("inlineCode",{parentName:"p"},"Struct"),"s and ",(0,l.yg)("inlineCode",{parentName:"p"},"Array"),"s into simpler, flatter schemas. This allows you to preserve all schemas, and not just the first one. You can use FlattenSchema with Snowflake Models."),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"The FlattenSchema gem",src:n(52965).A,width:"290",height:"305"})),(0,l.yg)("h2",{id:"the-input"},"The Input"),(0,l.yg)("p",null,"FlattenSchema works on Snowflake sources that have nested columns that you'd like to extract into a flat schema."),(0,l.yg)("p",null,"For example, with an input schema like so:"),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Input schema",src:n(51960).A,width:"1310",height:"754"})),(0,l.yg)("p",null,"And the data looks like so:"),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Input data",src:n(64221).A,width:"2620",height:"1537"})),(0,l.yg)("p",null,"We want to extract the ",(0,l.yg)("inlineCode",{parentName:"p"},"contact"),", and all of the columns from the ",(0,l.yg)("inlineCode",{parentName:"p"},"struct"),"s in ",(0,l.yg)("inlineCode",{parentName:"p"},"content")," into a flattened schema."),(0,l.yg)("h2",{id:"the-expressions"},"The Expressions"),(0,l.yg)("p",null,"Having added a ",(0,l.yg)("inlineCode",{parentName:"p"},"FlattenSchema")," Gem to your Model, all you need to do is click the column names you wish to extract and they'll be added to the ",(0,l.yg)("inlineCode",{parentName:"p"},"Expressions")," section."),(0,l.yg)("admonition",{type:"tip"},(0,l.yg)("p",{parentName:"admonition"},"You can click to add all columns, which would make all nested leaf level values of an object visible as columns.")),(0,l.yg)("p",null,"Once added you can change the ",(0,l.yg)("inlineCode",{parentName:"p"},"Output Column")," for a given row to change the name of the Column in the output."),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Adding expressions",src:n(73533).A,width:"2620",height:"1507"})),(0,l.yg)("h2",{id:"the-output"},"The Output"),(0,l.yg)("p",null,"If we check the ",(0,l.yg)("inlineCode",{parentName:"p"},"Output")," tab in the Gem, you'll see the schema that we've created using the selected columns."),(0,l.yg)("p",null,"And here's what the output data looks like:"),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Output interim",src:n(41848).A,width:"2620",height:"1507"})),(0,l.yg)("p",null,"The nested contact information has been flatten so that you have individual rows for each content type."),(0,l.yg)("h2",{id:"advanced-settings"},"Advanced settings"),(0,l.yg)("p",null,"If you're familiar with Snowflake's ",(0,l.yg)("inlineCode",{parentName:"p"},"FLATTEN")," table function, you can use the advanced settings to customize the optional column arguments."),(0,l.yg)("p",null,"To use the advanced settings, hover over a column, and click the dropdown arrow."),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Advanced settings",src:n(12818).A,width:"2620",height:"1507"})),(0,l.yg)("p",null,"You can customize the following options:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Path to the element: The path to the element within the variant data structure that you want to flatten."),(0,l.yg)("li",{parentName:"ul"},"Flatten all elements recursively: If set to ",(0,l.yg)("inlineCode",{parentName:"li"},"false"),", only the element mentioned in the path is expanded. If set to ",(0,l.yg)("inlineCode",{parentName:"li"},"true"),", all sub-elements are expanded recursively. This is set to false by default."),(0,l.yg)("li",{parentName:"ul"},"Preserve rows with missing fields: If set to ",(0,l.yg)("inlineCode",{parentName:"li"},"false"),", rows with missing fields are omitted from the output. If set to ",(0,l.yg)("inlineCode",{parentName:"li"},"true"),", rows with missing fields are generated with ",(0,l.yg)("inlineCode",{parentName:"li"},"null")," in the key, index, and value columns. This is set to false by default."),(0,l.yg)("li",{parentName:"ul"},"Datatype that needs to be flattened: The data type that you want to flatten. You can choose ",(0,l.yg)("inlineCode",{parentName:"li"},"Object"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"Array"),", or ",(0,l.yg)("inlineCode",{parentName:"li"},"Both"),". This is set to ",(0,l.yg)("inlineCode",{parentName:"li"},"Both")," by default.")))}u.isMDXComponent=!0},73533:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_add_exp-e1b9e410e33edebaf180b873544b1152.png"},12818:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_advanced_settings-5e7381dda09858272e7d1b0c1f5c9d60.png"},52965:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_gem-088dcb90a9e1679a18b6f2497692a93b.png"},51960:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_input-6f94e353ebd52d670b50729aecc0dbb1.png"},64221:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_input_interim-32f3884d132f1fba87579a634b4bf47d.png"},41848:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/flatten_output_interim-cf9c2a3d1f4c7528791c2a7243b0aee6.png"}}]);