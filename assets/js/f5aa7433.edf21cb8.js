"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[87941],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},33319:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/set_eg_2-fe430fbd13a44d729c0c0ef00e7ca2d9.png"},42463:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/set_eg_1-46701e21c8cebc491888db3d556e8345.png"},61982:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/set_eg_3-5ad43a57037f0e1ada3b964fcf2934a7.png"},62615:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/set_add_inputs-bdf7b6691fc473ea1eee60161a5b9786.png"},91170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"SQL/gems/transform/set-operation","title":"SetOperation","description":"Union, Intersect and Difference","source":"@site/docs/SQL/gems/transform/set-operation.md","sourceDirName":"SQL/gems/transform","slug":"/SQL/gems/transform/set-operation","permalink":"/SQL/gems/transform/set-operation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"set","permalink":"/tags/set"},{"inline":true,"label":"union","permalink":"/tags/union"},{"inline":true,"label":"intersect","permalink":"/tags/intersect"},{"inline":true,"label":"difference","permalink":"/tags/difference"}],"version":"current","frontMatter":{"title":"SetOperation","id":"set-operation","description":"Union, Intersect and Difference","tags":["gems","set","union","intersect","difference"]},"sidebar":"mySidebar","previous":{"title":"Reformat","permalink":"/SQL/gems/transform/reformat"},"next":{"title":"Unpivot","permalink":"/SQL/gems/transform/unpivot"}}');var s=n(74848),r=n(28453);const o={title:"SetOperation",id:"set-operation",description:"Union, Intersect and Difference",tags:["gems","set","union","intersect","difference"]},l=void 0,a={},d=[{value:"Parameters",id:"parameters",level:3},{value:"Examples",id:"examples",level:3},{value:"Operation Type - <code>Union</code>",id:"operation-type---union",level:4},{value:"Operation Type - <code>Intersect</code>",id:"operation-type---intersect",level:4},{value:"Operation Type - <code>Except</code>",id:"operation-type---except",level:4}];function c(e){const t={admonition:"admonition",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("h3",{children:(0,s.jsx)("span",{class:"badge",children:"SQL Gem"})}),"\n",(0,s.jsx)(t.p,{children:"Use the SetOperation gem to perform addition or subtraction of rows from models with identical schemas and different data."}),"\n",(0,s.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Required"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Model 1"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"First input Source"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"True"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Model 2"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Second input Source"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"True"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Model N"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Nth input Source"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"False"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Operation type"}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Operation to perform",(0,s.jsx)("br",{}),"- ",(0,s.jsx)(t.code,{children:"Union"}),": Returns a model containing rows in any one of the input Sources, while preserving duplicates.",(0,s.jsx)("br",{}),"- ",(0,s.jsx)(t.code,{children:"Intersect"}),": Returns a model containing rows in all of the input Sources, while preserving duplicates. ",(0,s.jsx)("br",{}),"- ",(0,s.jsx)(t.code,{children:"Except"}),": Returns a model containing rows in the first Source, but not in the other Sources, while preserving duplicates."]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"True"})]})]})]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["To add more input Sources, simply click ",(0,s.jsx)(t.code,{children:"+"})," icon on the left sidebar\n",(0,s.jsx)(t.img,{alt:"Set Operation - Add input dataframe",src:n(62615).A+"",width:"556",height:"136"})]})}),"\n",(0,s.jsx)(t.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.h4,{id:"operation-type---union",children:["Operation Type - ",(0,s.jsx)(t.code,{children:"Union"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Example usage of Set Operation - Union",src:n(42463).A+"",width:"1798",height:"904"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.h4,{id:"operation-type---intersect",children:["Operation Type - ",(0,s.jsx)(t.code,{children:"Intersect"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Example usage of Set Operation - Intersect",src:n(33319).A+"",width:"1822",height:"868"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsxs)(t.h4,{id:"operation-type---except",children:["Operation Type - ",(0,s.jsx)(t.code,{children:"Except"})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Example usage of Set Operation - Except",src:n(61982).A+"",width:"1812",height:"783"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);