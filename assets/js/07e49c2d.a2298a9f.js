"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[48045],{5484:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"SQL/gems/subgraph/subgraph","title":"Subgraph","description":"Work with Subgraphs by grouping your Gems in Parent Gems","source":"@site/docs/SQL/gems/subgraph/subgraph.md","sourceDirName":"SQL/gems/subgraph","slug":"/SQL/gems/subgraph/","permalink":"/SQL/gems/subgraph/","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"subgraph","permalink":"/tags/subgraph"},{"inline":true,"label":"group","permalink":"/tags/group"},{"inline":true,"label":"SQL","permalink":"/tags/sql"}],"version":"current","frontMatter":{"title":"Subgraph","id":"subgraph","description":"Work with Subgraphs by grouping your Gems in Parent Gems","tags":["subgraph","group","SQL"]},"sidebar":"mySidebar","previous":{"title":"Join","permalink":"/SQL/gems/data-joins"},"next":{"title":"Custom","permalink":"/SQL/gems/custom/"}}');var r=s(74848),t=s(28453);const i={title:"Subgraph",id:"subgraph",description:"Work with Subgraphs by grouping your Gems in Parent Gems",tags:["subgraph","group","SQL"]},o=void 0,u={},h=[{value:"Basic Subgraph",id:"basic-subgraph",level:2},{value:"Create a Basic Subgraph",id:"create-a-basic-subgraph",level:3},{value:"Run a Basic Subgraph",id:"run-a-basic-subgraph",level:3},{value:"Add/Remove Port",id:"addremove-port",level:3},{value:"Code view",id:"code-view",level:2},{value:"Subgraph Configurations",id:"subgraph-configurations",level:2}];function c(e){const n={h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("h3",{children:(0,r.jsx)("span",{class:"badge",children:"SQL Gem"})}),"\n",(0,r.jsx)(n.p,{children:"Subgraph gems let you take multiple different gems and wrap them under a single reusable parent gem. In other words, they allow you to decompose complex logic into reusable components and simplify the visual view of your data model."}),"\n",(0,r.jsx)(n.h2,{id:"basic-subgraph",children:"Basic Subgraph"}),"\n",(0,r.jsx)(n.p,{children:"Basic Subgraphs are single-use containers that capture one or more gems within a model. They are the equivalent of a nested CTE."}),"\n",(0,r.jsx)(n.p,{children:"If you want to create a complex model with large sets of Transform and Join gems, you can use a Basic Subgraph to group them together. This organizational approach enhances the visual clarity of your model by grouping various sections together under a common parent gem. Additionally, it empowers you to break down intricate logic into modular components, thereby streamlining your data transformation processes."}),"\n",(0,r.jsx)(n.h3,{id:"create-a-basic-subgraph",children:"Create a Basic Subgraph"}),"\n",(0,r.jsx)(n.p,{children:"You can create a Basic Subgraph the same way you create other gems."}),"\n",(0,r.jsx)(n.p,{children:"To create a Basic Subgraph, follow these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Drag and drop the ",(0,r.jsx)(n.strong,{children:"Subgraph"})," gem from the Subgraph menu, and connect it to any previously created gem on your canvas."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"create_basic_subgraph",src:s(47784).A+"",width:"2620",height:"1507"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Once you've added the gem, click on it to open the subgraph canvas."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"On the subgraph canvas, add gems to your Basic Subgraph by dragging and dropping from the gems menu. You can even add a subgraph within the subgraph to create a nested subgraph."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"run-a-basic-subgraph",children:"Run a Basic Subgraph"}),"\n",(0,r.jsx)(n.p,{children:"A Basic Subgraph is functionally equivalent to the sequence of gems that it contains. You can run a Basic Subgraph to see the output."}),"\n",(0,r.jsx)(n.p,{children:"To run a Basic Subgraph, follow this step:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"On the Basic Subgraph gem, click on the play button,"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"run_basic_subgraph",src:s(98713).A+"",width:"2620",height:"1536"})}),"\n",(0,r.jsx)(n.h3,{id:"addremove-port",children:"Add/Remove Port"}),"\n",(0,r.jsx)(n.p,{children:"Gems and subgraphs are operations or transformations that takes one or more tables as inputs. Therefore, Input ports signify the number of tables that a Basic Subgraph is taking in as inputs. There is no limit to the number of Input ports you can add."}),"\n",(0,r.jsx)(n.p,{children:"While using a Subgraph, you can configure the number of Input ports as per the requirements. However, as with all SQL gems, there can only be one Output port."}),"\n",(0,r.jsx)(n.p,{children:"To add an Input port, follow these steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["On the subgraph canvas, click on the ",(0,r.jsx)(n.strong,{children:"+"})," button to add a new port."]}),"\n",(0,r.jsxs)(n.li,{children:["Optional: You can click the ",(0,r.jsx)(n.strong,{children:"Delete"})," icon next to the input port you want to remove."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"add_remove_port",src:s(18008).A+"",width:"2620",height:"1507"})}),"\n",(0,r.jsx)(n.h2,{id:"code-view",children:"Code view"}),"\n",(0,r.jsx)(n.p,{children:"Normally from the Code view, we create one gem per CTE. However, since subgraphs are represented as nested CTEs in code, one subgraph can represent multiple nested SQL statements."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"subgraph_code_view",src:s(47013).A+"",width:"2620",height:"1507"})}),"\n",(0,r.jsx)(n.p,{children:"If you'd like, you can create a subgraph from the Code view by writing multiple nested statements. Then toggle back to the Visual view to see an auto-generated Subgraph gem based on your defined transformations."}),"\n",(0,r.jsx)(n.h2,{id:"subgraph-configurations",children:"Subgraph Configurations"}),"\n",(0,r.jsx)(n.p,{children:"You can configure your subgraphs by using either:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Model-level configurations"}),"\n",(0,r.jsx)(n.li,{children:"Project-level configurations"}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},18008:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/add-remove-subgraph-port-c5ddff6e74896bc46009b676a569e5d8.png"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(96540);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}},47013:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/subgraph-code-view-76a8d39380eae1e54bad5a9aea6b58de.png"},47784:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/create-subgraph-95d23622a42f7cec13d7ec7253ef0f0b.png"},98713:(e,n,s)=>{s.d(n,{A:()=>a});const a=s.p+"assets/images/run-subgraph-44ab1c625c5fe4d7af88d34f2452f051.png"}}]);