"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[42685],{28453:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var a=t(96540);const s={},n=a.createContext(s);function i(e){const r=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(n.Provider,{value:r},e.children)}},49005:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>h,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"Spark/gems/source-target/file/parquet","title":"Parquet","description":"Parameters and properties to read from and write to Parquet files","source":"@site/docs/Spark/gems/source-target/file/parquet.md","sourceDirName":"Spark/gems/source-target/file","slug":"/engineers/parquet","permalink":"/engineers/parquet","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"file","permalink":"/tags/file"},{"inline":true,"label":"parquet","permalink":"/tags/parquet"}],"version":"current","frontMatter":{"title":"Parquet","id":"parquet","slug":"/engineers/parquet","description":"Parameters and properties to read from and write to Parquet files","tags":["gems","file","parquet"]},"sidebar":"mySidebar","previous":{"title":"ORC","permalink":"/engineers/orc"},"next":{"title":"Seed","permalink":"/engineers/seed"}}');var s=t(74848),n=t(28453),i=t(49235),o=t(65537),l=t(79329);const d={title:"Parquet",id:"parquet",slug:"/engineers/parquet",description:"Parameters and properties to read from and write to Parquet files",tags:["gems","file","parquet"]},c=void 0,h={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Supported Int96 rebase modes",id:"supported-int96-rebase-modes",level:3},{value:"Supported Datetime rebase modes",id:"supported-datetime-rebase-modes",level:3},{value:"Example",id:"source-example",level:3},{value:"Compiled code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target properties",id:"target-properties",level:3},{value:"Supported write modes",id:"supported-write-modes",level:3},{value:"Example",id:"target",level:3},{value:"Compiled code",id:"target-code",level:3}];function u(e){const r={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.2.0+"}),"\n",(0,s.jsx)(r.p,{children:"The Parquet file type:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Is an open-source columnar file format designed for efficient data storage and retrieval."}),"\n",(0,s.jsx)(r.li,{children:"Handles large volumes of data by supporting complex predicate pushdown, nested schemas, and a wide variety of column encoding types."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Parameter"}),(0,s.jsx)(r.th,{children:"Tab"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Location"}),(0,s.jsx)(r.td,{children:"Location"}),(0,s.jsx)(r.td,{children:"File path to read from or write to the Parquet file."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Schema"}),(0,s.jsx)(r.td,{children:"Properties"}),(0,s.jsxs)(r.td,{children:["Schema to apply on the loaded data.",(0,s.jsx)("br",{}),"In the Source gem, you can define or edit the schema visually or in JSON code.",(0,s.jsx)("br",{}),"In the Target gem, you can view the schema visually or as JSON code."]})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"source",children:"Source"}),"\n",(0,s.jsx)(r.p,{children:"The Source gem reads data from Parquet files and allows you to optionally specify the following additional properties."}),"\n",(0,s.jsx)(r.h3,{id:"source-properties",children:"Source properties"}),"\n",(0,s.jsxs)(r.p,{children:["| Property name           | Description                                                                                                                                                                                                                                                              | Default                                                               |\n| ----------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------- | --- |\n| Description             | Description of your dataset.                                                                                                                                                                                                                                             | None                                                                  |\n| Use user-defined schema | Whether to use the schema you define.                                                                                                                                                                                                                                    | false                                                                 |\n| Merge schema            | Whether the Target gem should merge schemas from all the Parquet part-files collected. This overrides ",(0,s.jsx)(r.code,{children:"spark.sql.parquet.mergeSchema"}),".                                                                                                                                   | (value of ",(0,s.jsx)(r.code,{children:"spark.sql."}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"parquet."}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"mergeSchema"}),")              |     |\n| Datetime Rebase Mode    | Specify the rebasing mode for the values of the DATE, TIMESTAMP_MILLIS, TIMESTAMP_MICROS logical types from the Julian to Proleptic Gregorian calendar. ",(0,s.jsx)("br",{}),"For a list of the possible values, see ",(0,s.jsx)(r.a,{href:"#supported-datetime-rebase-modes",children:"Supported Datetime rebase modes"}),". | (value of ",(0,s.jsx)(r.code,{children:"spark.sql."}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"parquet"}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:".datetimeRebaseModeInRead"}),") |\n| Int96 Rebase Mode       | Specify the rebasing mode for INT96 timestamps from the Julian to Proleptic Gregorian calendar. For a list of the possible values, see ",(0,s.jsx)(r.a,{href:"#supported-int96-rebase-modes",children:"Supported Int96 rebase modes"}),".                                                                    | (value of ",(0,s.jsx)(r.code,{children:"spark.sql."}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:"parquet"}),(0,s.jsx)("br",{}),(0,s.jsx)(r.code,{children:".int96RebaseModeInRead"}),")    |\n| Recursive File Lookup   | Whether to recursively load files and disable partition inferring. If the data source explicitly specifies the ",(0,s.jsx)(r.code,{children:"partitionSpec"})," when the",(0,s.jsx)(r.code,{children:"recursiveFileLookup"})," is ",(0,s.jsx)(r.code,{children:"true"}),", the Source gem throws an exception.                                                              | false                                                                 |\n| Path Global Filter      | Glob pattern to only include files with paths matching the pattern. The syntax follows ",(0,s.jsx)(r.a,{href:"https://hadoop.apache.org/docs/stable/api/org/apache/hadoop/fs/GlobFilter.html",children:"GlobFilter"})," and does not change the behavior of partition discovery.                             | None                                                                  |\n| Modified Before         | Timestamp to only include files with modification times occurring before the time you specify. The timestamp must be in the following form: YYYY-MM-DDTHH:mm",":ss"," (e.g. 2020-06-01T13:00:00).                                                                              | None                                                                  |\n| Modified After          | Timestamp to only include files with modification times occurring after the time you specify. The timestamp must be in the following form: YYYY-MM-DDTHH:mm",":ss"," (e.g. 2020-06-01T13:00:00).                                                                               | None                                                                  |"]}),"\n",(0,s.jsx)(r.h3,{id:"supported-int96-rebase-modes",children:"Supported Int96 rebase modes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Int96 rebase mode"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"EXCEPTION"}),(0,s.jsx)(r.td,{children:"Fails in reads of ancient INT96 timestamps that are ambiguous between two calendars."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"CORRECTED"}),(0,s.jsx)(r.td,{children:"Loads INT96 timestamps without rebasing."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"LEGACY"}),(0,s.jsx)(r.td,{children:"Rebases ancient INT96 timestamps from the Julian to Proleptic Gregorian."})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"supported-datetime-rebase-modes",children:"Supported Datetime rebase modes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Datetime rebase mode"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"EXCEPTION"}),(0,s.jsx)(r.td,{children:"Fails in reads of ancient dates and timestamps that are ambiguous between two calendars."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"CORRECTED"}),(0,s.jsx)(r.td,{children:"Loads dates and timestamps without rebasing."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"LEGACY"}),(0,s.jsx)(r.td,{children:"Rebases ancient dates and timestamps from the Julian to Proleptic Gregorian."})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"source-example",children:"Example"}),"\n",(0,s.jsx)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"},children:(0,s.jsx)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"},children:(0,s.jsx)("iframe",{src:"https://user-images.githubusercontent.com/103921419/175030738-4c53b5c9-73e7-46c7-9fdc-c49048f78572.mp4",title:"Parquet Source",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"})})}),"\n",(0,s.jsx)(r.h3,{id:"source-code",children:"Compiled code"}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsxs)(r.p,{children:["To see the compiled code of your project, ",(0,s.jsx)(r.a,{href:"/engineers/pipelines#project-editor",children:"switch to the Code view"})," in the project header."]})}),"\n","\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(l.A,{value:"py",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-py",children:'def read_parquet(spark: SparkSession) -> DataFrame:\n    return spark.read\\\n        .format("parquet")\\\n        .option("mergeSchema", True)\\\n        .load("dbfs:/FileStore/Users/parquet/test.parquet")\n'})})}),(0,s.jsx)(l.A,{value:"scala",label:"Scala",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-scala",children:'object read_parquet {\n\n  def apply(spark: SparkSession): DataFrame =\n    spark.read\n        .format("parquet")\n        .option("mergeSchema", true)\n        .load("dbfs:/FileStore/Users/parquet/test.parquet")\n\n}\n'})})})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"target",children:"Target"}),"\n",(0,s.jsx)(r.p,{children:"The Target gem writes data to Parquet files and allows you to optionally specify the following additional properties."}),"\n",(0,s.jsx)(r.h3,{id:"target-properties",children:"Target properties"}),"\n",(0,s.jsxs)(r.p,{children:["| Property name     | Description                                                                                                                                                                                                                                                | Default  |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------- | ---- |\n| Description       | Description of your dataset.                                                                                                                                                                                                                               | None     |\n| Partition Columns | List of columns to partition the Parquet file by.                                                                                                                                                                                                          |          | None |\n| Compression Codec | Compression codec when writing to the Parquet file. ",(0,s.jsx)("br",{}),"The Parquet file supports the following codecs: ",(0,s.jsx)(r.code,{children:"none"}),", ",(0,s.jsx)(r.code,{children:"uncompressed"}),", ",(0,s.jsx)(r.code,{children:"gzip"}),", ",(0,s.jsx)(r.code,{children:"lz4"}),", ",(0,s.jsx)(r.code,{children:"snappy"}),", ",(0,s.jsx)(r.code,{children:"lzo"}),", ",(0,s.jsx)(r.code,{children:"brotli"}),", and ",(0,s.jsx)(r.code,{children:"zstd"}),". This overrides the ",(0,s.jsx)(r.code,{children:"spark.sql.parquet.compression.codec"})," parameter. | ",(0,s.jsx)(r.code,{children:"snappy"})," |\n| Write Mode        | How to handle existing data. For a list of the possible values, see ",(0,s.jsx)(r.a,{href:"#supported-write-modes",children:"Supported write modes"}),".                                                                                                                                       | ",(0,s.jsx)(r.code,{children:"error"}),"  |"]}),"\n",(0,s.jsx)(r.h3,{id:"supported-write-modes",children:"Supported write modes"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Write mode"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"error"}),(0,s.jsx)(r.td,{children:"If the data already exists, throw an exception."})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"overwrite"}),(0,s.jsxs)(r.td,{children:["If the data already exists, overwrite the data with the contents of the ",(0,s.jsx)(r.code,{children:"DataFrame"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"append"}),(0,s.jsxs)(r.td,{children:["If the data already exists, append the contents of the ",(0,s.jsx)(r.code,{children:"DataFrame"}),"."]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"ignore"}),(0,s.jsxs)(r.td,{children:["If the data already exists, do nothing with the contents of the ",(0,s.jsx)(r.code,{children:"DataFrame"}),". ",(0,s.jsx)("br",{}),"This is similar to the ",(0,s.jsx)(r.code,{children:"CREATE TABLE IF NOT EXISTS"})," clause in SQL."]})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"target",children:"Example"}),"\n",(0,s.jsx)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"},children:(0,s.jsx)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"},children:(0,s.jsx)("iframe",{src:"https://user-images.githubusercontent.com/103921419/175030713-9de9d38a-c145-42e9-8411-baa44a70d0d0.mp4",title:"Parquet Target",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"})})}),"\n",(0,s.jsx)(r.h3,{id:"target-code",children:"Compiled code"}),"\n",(0,s.jsx)(r.admonition,{type:"tip",children:(0,s.jsxs)(r.p,{children:["To see the compiled code of your project, ",(0,s.jsx)(r.a,{href:"/engineers/pipelines#project-editor",children:"switch to the Code view"})," in the project header."]})}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(l.A,{value:"py",label:"Python",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-py",children:'def write_parquet(spark: SparkSession, in0: DataFrame):\n    in0.write\\\n        .format("parquet")\\\n        .mode("overwrite")\\\n        .save("dbfs:/data/test_output.parquet")\n'})})}),(0,s.jsx)(l.A,{value:"scala",label:"Scala",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-scala",children:'object write_parquet {\n  def apply(spark: SparkSession, in: DataFrame): Unit =\n    in.write\n        .format("parquet")\n        .mode("overwrite")\n        .save("dbfs:/data/test_output.parquet")\n}\n'})})})]})]})}function m(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},49235:(e,r,t)=>{t.d(r,{A:()=>s});t(96540);var a=t(74848);function s(e){return(0,a.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.python_package_name," ",e.python_package_version]})}),e.scala_package_name&&e.scala_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.scala_package_name," ",e.scala_package_version]})}),e.python_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsPython ",e.python_lib]})}),e.scala_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsScala ",e.scala_lib]})}),e.uc_single&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Dedicated Cluster ",e.uc_single]})}),e.uc_shared&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Standard Cluster ",e.uc_shared]})}),e.livy&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["Livy ",e.livy]})}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},65537:(e,r,t)=>{t.d(r,{A:()=>w});var a=t(96540),s=t(18215),n=t(65627),i=t(56347),o=t(50372),l=t(30604),d=t(11861),c=t(78749);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:t}=e;return(0,a.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:a,default:s}}=e;return{value:r,label:t,attributes:a,default:s}}))}(t);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function u(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function m(e){let{queryString:r=!1,groupId:t}=e;const s=(0,i.W6)(),n=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,l.aZ)(n),(0,a.useCallback)((e=>{if(!n)return;const r=new URLSearchParams(s.location.search);r.set(n,e),s.replace({...s.location,search:r.toString()})}),[n,s])]}function f(e){const{defaultValue:r,queryString:t=!1,groupId:s}=e,n=p(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!u({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:r,tabValues:n}))),[d,h]=m({queryString:t,groupId:s}),[f,x]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[s,n]=(0,c.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&n.set(e)}),[t,n])]}({groupId:s}),b=(()=>{const e=d??f;return u({value:e,tabValues:n})?e:null})();(0,o.A)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!u({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),x(e)}),[h,x,n]),tabValues:n}}var x=t(9136);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function g(e){let{className:r,block:t,selectedValue:a,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,n.a_)(),c=e=>{const r=e.currentTarget,t=l.indexOf(r),s=o[t].value;s!==a&&(d(r),i(s))},h=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;r=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;r=l[t]??l[l.length-1];break}}r?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},r),children:o.map((e=>{let{value:r,label:t,attributes:n}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===r?0:-1,"aria-selected":a===r,ref:e=>{l.push(e)},onKeyDown:h,onClick:c,...n,className:(0,s.A)("tabs__item",b.tabItem,n?.className,{"tabs__item--active":a===r}),children:t??r},r)}))})}function y(e){let{lazy:r,children:t,selectedValue:n}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==n})))})}function v(e){const r=f(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,j.jsx)(g,{...r,...e}),(0,j.jsx)(y,{...r,...e})]})}function w(e){const r=(0,x.A)();return(0,j.jsx)(v,{...e,children:h(e.children)},String(r))}},79329:(e,r,t)=>{t.d(r,{A:()=>i});t(96540);var a=t(18215);const s={tabItem:"tabItem_Ymn6"};var n=t(74848);function i(e){let{children:r,hidden:t,className:i}=e;return(0,n.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:t,children:r})}}}]);