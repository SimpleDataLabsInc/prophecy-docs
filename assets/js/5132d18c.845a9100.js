"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[63924],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},37244:(e,n,t)=>{t.d(n,{A:()=>T});var r=t(96540),i=t(18215),o=t(44319),s=t(56347),a=t(94280),l=t(73024),c=t(58417),d=t(44031);function h(e){return r.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,r.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function x({queryString:e=!1,groupId:n}){const t=(0,s.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(i),(0,r.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,o=u(e),[s,l]=(0,r.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o})),[c,h]=x({queryString:t,groupId:i}),[g,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,d.Dv)(n);return[t,(0,r.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),j=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,a.A)(()=>{j&&l(j)},[j]);return{selectedValue:s,selectValue:(0,r.useCallback)(e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),m(e)},[h,m,o]),tabValues:o}}var m=t(46916);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function f({className:e,block:n,selectedValue:t,selectValue:r,tabValues:s}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,i=a.indexOf(n),o=s[i].value;o!==t&&(l(n),r(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=a.indexOf(e.currentTarget)+1;n=a[t]??a[0];break}case"ArrowLeft":{const t=a.indexOf(e.currentTarget)-1;n=a[t]??a[a.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:r})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...r,className:(0,i.A)("tabs__item",j.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function y({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===t);return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function v(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,i.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function T(e){const n=(0,m.A)();return(0,b.jsx)(v,{...e,children:h(e.children)},String(n))}},46511:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"lineage/lineage-extractor","title":"Lineage extractor","description":"Prophecy lineage extractor on GitHub Actions","source":"@site/docs/lineage/lineage-extractor.md","sourceDirName":"lineage","slug":"/engineers/lineage-extractor","permalink":"/engineers/lineage-extractor","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"metadata","permalink":"/tags/metadata"},{"inline":true,"label":"lineage","permalink":"/tags/lineage"},{"inline":true,"label":"extractor","permalink":"/tags/extractor"},{"inline":true,"label":"github actions","permalink":"/tags/github-actions"}],"version":"current","frontMatter":{"title":"Lineage extractor","id":"lineage-extractor","slug":"/engineers/lineage-extractor","description":"Prophecy lineage extractor on GitHub Actions","tags":["metadata","lineage","extractor","github actions"]},"sidebar":"mySidebar","previous":{"title":"Lineage","permalink":"/engineers/lineage"},"next":{"title":"CI/CD for Spark pipelines","permalink":"/engineers/ci-cd"}}');var i=t(74848),o=t(28453),s=t(37244),a=t(56778);const l={title:"Lineage extractor",id:"lineage-extractor",slug:"/engineers/lineage-extractor",description:"Prophecy lineage extractor on GitHub Actions",tags:["metadata","lineage","extractor","github actions"]},c=void 0,d={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Command",id:"command",level:2},{value:"Integration with GitHub Actions or GitLab CI",id:"integration-with-github-actions-or-gitlab-ci",level:2},{value:"Prerequisites",id:"prerequisites-integration",level:3},{value:"Set environment variables and secrets",id:"set-environment-variables-and-secrets",level:3},{value:"Set up workflow configuration",id:"set-up-workflow-configuration",level:3},{value:"Verify lineage file creation",id:"verify-lineage-file-creation",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Prophecy lineage extractor is a Python tool that retrieves and exports lineage information from Prophecy projects and pipelines. It supports project, pipeline, and branch-level lineage extraction, with optional features like emailing reports."}),"\n",(0,i.jsx)(n.p,{children:"You can run the lineage extractor manually or integrate it into a CI workflow to automate report generation. This page covers how to run the extractor via command line and how to automate it using GitHub Actions or GitLab CI."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The lineage extractor only supports extraction from Spark pipelines and SQL pipelines. It does not support SQL models."})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsx)(n.p,{children:"To use the lineage extractor for SQL pipelines:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"knowledge-graph"})," must be enabled in your Prophecy deployment."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"command",children:"Command"}),"\n",(0,i.jsx)(n.p,{children:"Use the lineage extractor Python command to export the lineage of a specific pipeline."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Argument"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--project-id"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsxs)(n.td,{children:["Prophecy project ID. You can find it in the project URL. Example: ",(0,i.jsx)(n.code,{children:"https://app.prophecy.io/metadata/entity/projects/57040"})," where 57040 is the project ID."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--pipeline-id"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Depends"}),(0,i.jsxs)(n.td,{children:["One or more pipeline IDs in ",(0,i.jsx)(n.code,{children:"ProjectID/PipelineName"})," format, comma-separated. ",(0,i.jsx)("br",{}),"Required for the ",(0,i.jsx)(n.code,{children:"lineage"})," reader; optional for the ",(0,i.jsx)(n.code,{children:"knowledge-graph"})," reader."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--output-dir"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Directory path where the extractor writes the lineage report."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--reader"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsxs)(n.td,{children:["Reader to use. Set to ",(0,i.jsx)(n.code,{children:"lineage"})," for Spark projects or ",(0,i.jsx)(n.code,{children:"knowledge-graph"})," for SQL projects."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--fmt"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsxs)(n.td,{children:["Output format. Use ",(0,i.jsx)(n.code,{children:"excel"})," (default) or ",(0,i.jsx)(n.code,{children:"openlineage"})," (JSON in OpenLineage format)."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--branch"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsxs)(n.td,{children:["Branch to extract lineage from. Defaults to ",(0,i.jsx)(n.code,{children:"main"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--send-email"})}),(0,i.jsx)(n.td,{children:"Flag"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsxs)(n.td,{children:["Sends the report by email. Requires SMTP configuration. ",(0,i.jsx)("br",{}),"Learn more in ",(0,i.jsx)(n.a,{href:"#integration-with-github-actions-or-gitlab-ci",children:"Integration with GitHub Actions or GitLab CI"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"--run-for-all"})}),(0,i.jsx)(n.td,{children:"Flag"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Generates lineage for all pipelines in the project, rather than just one pipeline."})]})]})]}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(a.A,{value:"SQL",label:"SQL example",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"python -m prophecy_lineage_extractor \\\n  --project-id 6493 \\\n  --reader knowledge-graph \\\n  --branch test1234 \\\n  --output-dir ./test \\\n  --run-for-all \\\n  --fmt openlineage\n"})})}),(0,i.jsx)(a.A,{value:"Spark",label:"Spark example",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"python -m prophecy_lineage_extractor \\\n  --project-id 9900 \\\n  --reader lineage \\\n  --pipeline-id 9900/my_pipeline \\\n  --output-dir ./test \\\n  --branch test1234 \\\n  --send-email \\\n  --run-for-all\n"})})})]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-github-actions-or-gitlab-ci",children:"Integration with GitHub Actions or GitLab CI"}),"\n",(0,i.jsx)(n.p,{children:"This section walks you through automating the extraction of lineage reports from your Prophecy pipelines using a CI workflow in GitHub Actions or GitLab CI. You'll set up a script that pulls lineage data, generates an Excel report, and optionally sends it by email or commits it back to your repository."}),"\n",(0,i.jsx)(n.h3,{id:"prerequisites-integration",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A Prophecy project hosted in an external GitHub or GitLab repository."}),"\n",(0,i.jsx)(n.li,{children:"Access to the repository and permissions to set up CI/CD pipelines."}),"\n",(0,i.jsxs)(n.li,{children:["A Prophecy ",(0,i.jsx)(n.a,{href:"/api",children:"Personal Access Token"})," (PAT)."]}),"\n",(0,i.jsx)(n.li,{children:"(Optional) To enable email reports, you must have SMTP credentials."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"set-environment-variables-and-secrets",children:"Set environment variables and secrets"}),"\n",(0,i.jsx)(n.p,{children:"To configure lineage extraction behavior related to authentication, email delivery, and output settings, you\u2019ll need to provide several inputs. While you can hardcode these values directly into your CI workflow YAML, it's strongly recommended to store them as environment variables or secrets. This approach keeps sensitive data like access tokens and SMTP credentials secure, avoids leaking secrets into version control, and makes it easier to update values across environments without modifying the workflow file."}),"\n",(0,i.jsxs)(s.A,{groupId:"ci-tool",children:[(0,i.jsx)(a.A,{value:"github",label:"GitHub",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Go to your repository\u2019s ",(0,i.jsx)(n.strong,{children:"Settings > Secrets and variables > Actions"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Add the listed variables under ",(0,i.jsx)(n.strong,{children:"Secrets"})," and ",(0,i.jsx)(n.strong,{children:"Variables"})," tabs."]}),"\n"]})}),(0,i.jsx)(a.A,{value:"gitlab",label:"GitLab",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Go to your repository\u2019s ",(0,i.jsx)(n.strong,{children:"Settings > CI/CD > Variables"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Add each as a variable and mark secrets appropriately."}),"\n"]})})]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Variable/Secret"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PROPHECY_PAT"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"/api/#access-tokens",children:"Personal Access Token"})," used to authenticate with Prophecy."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"SMTP_USERNAME"})}),(0,i.jsx)(n.td,{children:"Username for the email account used to send reports."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"SMTP_PASSWORD"})}),(0,i.jsx)(n.td,{children:"Password needed for the email account."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"MONITOR_TIME_ENV"})}),(0,i.jsxs)(n.td,{children:["Duration of the monitoring window in minutes (default: ",(0,i.jsx)(n.code,{children:"150"}),")."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"GIT_COMMIT"})}),(0,i.jsxs)(n.td,{children:["Set to ",(0,i.jsx)(n.code,{children:"1"})," to enable committing generated output to Git."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OUTPUT_DIR"})}),(0,i.jsx)(n.td,{children:"Directory path where lineage files are stored."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OPENLINEAGE_URL"})}),(0,i.jsxs)(n.td,{children:["URL for sending OpenLineage events. If not set, and format is ",(0,i.jsx)(n.code,{children:"openlineage"}),", events are written as JSON files in ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR/<PROJECT-ID>/"}),"."]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"set-up-workflow-configuration",children:"Set up workflow configuration"}),"\n",(0,i.jsx)(n.p,{children:"To automate lineage extraction and optionally email or commit the resulting reports, you\u2019ll need to set up a CI workflow in your repository. The configuration below provides templates for both GitHub Actions and GitLab CI, which install the extractor, run it with your parameters, and optionally commit the results. These templates assume you've already configured the required environment variables and secrets. Customize them with your specific project and pipeline details before running."}),"\n",(0,i.jsxs)(s.A,{groupId:"ci-tool",children:[(0,i.jsxs)(a.A,{value:"github",label:"GitHub Actions",children:[(0,i.jsx)(n.p,{children:"In your GitHub repository:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Select ",(0,i.jsx)(n.strong,{children:"Add file > Create new file"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Name the file ",(0,i.jsx)(n.code,{children:".github/workflows/prophecy_lineage_extractor.yml"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Paste the following YAML into the file."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Run Prophecy Lineage extractor on main\n\non:\n  push:\n    branches:\n      - main\n    paths:\n      - "datasets/**"\n      - "pipelines/**"\n      - "pbt_project.yml"\n      - ".github/workflows/prophecy_lineage_extractor.yml"\n\npermissions:\n  contents: write\n\njobs:\n  extract-and-mail-prophecy-lineage:\n    runs-on: ubuntu-latest\n    env:\n      OUTPUT_DIR: "output"\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: "3.9"\n\n      - name: Install Package\n        run: |\n          pip install --no-cache-dir prophecy-lineage-extractor\n\n      - name: Extract and Send Prophecy Lineage\n        env:\n          PROPHECY_URL: "https://<custom>.prophecy.io"\n          MONITOR_TIME_ENV: ${{ vars.MONITOR_TIME_ENV }}\n          PROPHECY_PAT: ${{ secrets.PROPHECY_PAT }}\n          SMTP_HOST: "smtp.gmail.com"\n          SMTP_PORT: "587"\n          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}\n          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}\n          RECEIVER_EMAIL: "<myRecipient@company.com>"\n        run: |\n          python -m prophecy_lineage_extractor --project-id <YOUR_PROJECT_ID> --pipeline-id <YOUR_PROJECT_ID>/pipelines/<YOUR_PIPELINE_NAME> --send-email --output-dir $OUTPUT_DIR --branch main\n\n      - name: Commit file to output directory\n        env:\n          GIT_COMMIT: ${{ vars.GIT_COMMIT }}\n        run: |\n          if [[ $GIT_COMMIT == "1" ]]; then\n              git config --global user.name \'<YOUR_GIT_USERNAME>\'\n              git config --global user.email \'<YOUR_GIT_EMAIL>\'\n              git add $OUTPUT_DIR/*\n              git commit -m "[Github Action: main]: Adding Excel lineage report"\n              git push\n          else\n              echo "Committing to Git is not enabled"\n'})})]}),(0,i.jsxs)(a.A,{value:"gitlab",label:"GitLab CI",children:[(0,i.jsx)(n.p,{children:"In your GitLab repository:"}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a file named ",(0,i.jsx)(n.code,{children:".gitlab-ci.yml"})," at the root level."]}),"\n",(0,i.jsx)(n.li,{children:"Paste the following YAML."}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'stages:\n  - extract\n\nvariables:\n  GIT_COMMIT: "1"\n  OUTPUT_DIR: "output_dev"\n\nextract_and_mail:\n  stage: extract\n  image: python:3.9\n  script:\n    - pip install --no-cache-dir prophecy-lineage-extractor\n    - |\n      export PROPHECY_URL="$PROPHECY_URL"\n      export PROPHECY_PAT="$PROPHECY_PAT"\n      export SMTP_USERNAME="$SMTP_USERNAME"\n      export SMTP_PASSWORD="$SMTP_PASSWORD"\n      export SMTP_HOST="smtp.gmail.com"\n      export SMTP_PORT="587"\n      export RECEIVER_EMAIL="<myRecipient@company.com>"\n      export MONITOR_TIME_ENV="50"\n    - |\n      BRANCH="dev"\n      python -m prophecy_lineage_extractor \\\n        --project-id <YOUR_PROJECT_ID> \\\n        --pipeline-id <YOUR_PROJECT_ID>/pipelines/<YOUR_PIPELINE_NAME> \\\n        --send-email \\\n        --output-dir $OUTPUT_DIR \\\n        --branch $BRANCH\n    - |\n      if [ "$GIT_COMMIT" == "1" ]; then\n        git config --global user.name \'<YOUR_GIT_USERNAME>\'\n        git config --global user.email \'<YOUR_GIT_EMAIL>\'\n        git add $OUTPUT_DIR/*\n        git commit -m "[GitLab CI - $BRANCH] Adding Excel lineage report"\n        git remote add gitlab_origin https://oauth2:$ACCESS_TOKEN@gitlab.com/your-repo-path.git\n        git push gitlab_origin HEAD:$BRANCH -o ci.skip\n      else\n        echo "Committing to Git is not enabled"\n  only:\n    refs:\n      - dev\n'})})]})]}),"\n",(0,i.jsx)(n.p,{children:"Make sure you modify the template with your own details:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Replace ",(0,i.jsx)(n.code,{children:"PROPHECY_URL"})," with your Prophecy URL."]}),"\n",(0,i.jsx)(n.li,{children:"Update with your ProjectID and PipelineID."}),"\n",(0,i.jsx)(n.li,{children:"Modify the receiver email."}),"\n",(0,i.jsx)(n.li,{children:"Set your global Git username and email."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"verify-lineage-file-creation",children:"Verify lineage file creation"}),"\n",(0,i.jsxs)(n.p,{children:["After a successful run, you should see a directory matching ",(0,i.jsx)(n.code,{children:"OUTPUT_DIR"})," in your repo containing Excel lineage files like ",(0,i.jsx)(n.code,{children:"pipeline_name_lineage.xlsx"}),". This XLSX file will show detailed lineage information about your pipeline."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Lineage extractor output",src:t(64374).A+"",width:"2620",height:"1509"})}),"\n",(0,i.jsx)(n.h3,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.p,{children:"If your workflow doesn't run as expected:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Check for error messages in ",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/monitoring-workflows/using-workflow-run-logs",children:"GitHub workflow run logs"})," or ",(0,i.jsx)(n.a,{href:"https://docs.gitlab.com/ci/jobs/job_logs/",children:"GitLab job logs"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Verify that you have set all environment variables and secrets correctly."}),"\n",(0,i.jsx)(n.li,{children:"Ensure your Prophecy access token is valid and has the necessary permissions."}),"\n",(0,i.jsx)(n.li,{children:"Confirm that the Project ID and Pipeline ID are correct in the workflow file."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},56778:(e,n,t)=>{t.d(n,{A:()=>s});t(96540);var r=t(18215);const i={tabItem:"tabItem_Ymn6"};var o=t(74848);function s({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n,children:e})}},64374:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/prophecy-lineage-report-for-pipeline-a0d455b3d122f0d7b2e43e72f0fb537f.png"}}]);