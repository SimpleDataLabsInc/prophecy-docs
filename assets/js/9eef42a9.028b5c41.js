"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[3256],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),g=r,c=d["".concat(s,".").concat(g)]||d[g]||m[g]||o;return a?n.createElement(c,l(l({ref:t},u),{},{components:a})):n.createElement(c,l({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},72360:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(86010);const o={tabItem:"tabItem_OmH5"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(83117),r=a(67294),o=a(72389),l=a(67392),i=a(7094),s=a(12466),p=a(86010);const u={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function d(e){const{lazy:t,block:a,defaultValue:o,values:d,groupId:m,className:g}=e,c=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=d??c.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,l.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??c.find((e=>e.props.default))?.props.value??c[0]?.props.value;if(null!==b&&!k.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:h}=(0,i.U)(),[y,N]=(0,r.useState)(b),_=[],{blockElementScrollPositionUntilNextRender:w}=(0,s.o5)();if(null!=m){const e=v[m];null!=e&&e!==y&&k.some((t=>t.value===e))&&N(e)}const T=e=>{const t=e.currentTarget,a=_.indexOf(t),n=k[a].value;n!==y&&(w(t),N(n),null!=m&&h(m,n))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]||_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]||_[_.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",u.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":a},g)},k.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>_.push(e),onKeyDown:x,onFocus:T,onClick:T},o,{className:(0,p.Z)("tabs__item",u.tabItem,o?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,r.cloneElement)(c.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},c.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function m(e){const t=(0,o.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},49688:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=a(83117),r=(a(67294),a(3905)),o=a(9877),l=a(72360);const i={sidebar_position:4,title:"Aggregate",id:"aggregate",description:"Group data and apply aggregation methods or pivot operations",tags:["gems","aggregate","group by","sum","count"]},s=void 0,p={unversionedId:"low-code-spark/gems/transform/aggregate",id:"low-code-spark/gems/transform/aggregate",title:"Aggregate",description:"Group data and apply aggregation methods or pivot operations",source:"@site/docs/low-code-spark/gems/transform/aggregate.md",sourceDirName:"low-code-spark/gems/transform",slug:"/low-code-spark/gems/transform/aggregate",permalink:"/low-code-spark/gems/transform/aggregate",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"aggregate",permalink:"/tags/aggregate"},{label:"group by",permalink:"/tags/group-by"},{label:"sum",permalink:"/tags/sum"},{label:"count",permalink:"/tags/count"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Aggregate",id:"aggregate",description:"Group data and apply aggregation methods or pivot operations",tags:["gems","aggregate","group by","sum","count"]},sidebar:"defaultSidebar",previous:{title:"Order By",permalink:"/low-code-spark/gems/transform/order-by"},next:{title:"Flatten Schema",permalink:"/low-code-spark/gems/transform/flatten-schema"}},u={},d=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Aggregation without Grouping",id:"aggregation-without-grouping",level:3},{value:"Aggregation with Grouping",id:"aggregation-with-grouping",level:3},{value:"Pivot Columns",id:"pivot-columns",level:3},{value:"Propagate all input Columns",id:"propagate-all-input-columns",level:3}],m={toc:d},g="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(g,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Allows you to group the data and apply aggregation methods and pivot operation."),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DataFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Target column (Aggregate Tab)"),(0,r.kt)("td",{parentName:"tr",align:null},"Output column name of aggregated column"),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Expression (Aggregate Tab)"),(0,r.kt)("td",{parentName:"tr",align:null},"Aggregate function expression",(0,r.kt)("br",null)," Eg: ",(0,r.kt)("inlineCode",{parentName:"td"},'sum("amount")'),", ",(0,r.kt)("inlineCode",{parentName:"td"},"count(*)"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'avg("amount")')),(0,r.kt)("td",{parentName:"tr",align:null},"True")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Target column (Group By Tab)"),(0,r.kt)("td",{parentName:"tr",align:null},"Output column name of grouped column"),(0,r.kt)("td",{parentName:"tr",align:null},"Required if ",(0,r.kt)("inlineCode",{parentName:"td"},"Pivot Column")," is present")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Expression (Group By Tab)"),(0,r.kt)("td",{parentName:"tr",align:null},"Column expression to group on ",(0,r.kt)("br",null)," Eg: ",(0,r.kt)("inlineCode",{parentName:"td"},'col("id")'),", ",(0,r.kt)("inlineCode",{parentName:"td"},'month(col("order_date"))')),(0,r.kt)("td",{parentName:"tr",align:null},"Required if a ",(0,r.kt)("inlineCode",{parentName:"td"},"Target Column"),"(Group By) is present")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Pivot column"),(0,r.kt)("td",{parentName:"tr",align:null},"Column name to pivot"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Unique values"),(0,r.kt)("td",{parentName:"tr",align:null},"List of values in ",(0,r.kt)("inlineCode",{parentName:"td"},"Pivot Column")," that will be translated to columns in the output DataFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"False")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Propagate All Input Columns"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", all columns from the DataFrame would be propagated to output DataFrame. By default all columns apart from ones specified in ",(0,r.kt)("inlineCode",{parentName:"td"},"group by"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"pivot"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"aggregate")," expressions are propagated as ",(0,r.kt)("inlineCode",{parentName:"td"},"first(col_name)")," in the output DataFrame"),(0,r.kt)("td",{parentName:"tr",align:null},"False")))),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Providing ",(0,r.kt)("inlineCode",{parentName:"p"},"Unique values")," while performing pivot operation improves the performance of the operation since Spark does not have to first compute the list of distinct values of ",(0,r.kt)("inlineCode",{parentName:"p"},"Pivot Column")," internally."))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"aggregation-without-grouping"},"Aggregation without Grouping"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example usage of Aggregate - Aggregation without Grouping",src:a(31220).Z,width:"1691",height:"629"})),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def total_orders(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,r.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object total_orders {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,r.kt)("h3",{id:"aggregation-with-grouping"},"Aggregation with Grouping"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example usage of Aggregate - Aggregation with Grouping",src:a(38100).Z,width:"1851",height:"796"})),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def orders_by_date(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date")))\n                      .alias("order_month(MM/YYYY)"))\n    return df1.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,r.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object orders_by_date {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,r.kt)("h3",{id:"pivot-columns"},"Pivot Columns"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Example usage of Aggregate - Pivoting",src:a(1359).Z,width:"1920",height:"1080"})),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def orders_by_date_N_status(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date"))).alias("order_month(MM/YYYY)"))\n    df2 = df1.pivot("order_status", ["Approved", "Finished", "Pending", "Started"])\n    return df2.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,r.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object orders_by_date_N_status {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .pivot(col("order_status"),\n             List("Approved", "Finished", "Pending", "Started")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,r.kt)("h3",{id:"propagate-all-input-columns"},"Propagate all input Columns"),(0,r.kt)("p",null,"This option in used to propagate all columns from input DataFrame to output DataFrame.\nBy default ",(0,r.kt)("inlineCode",{parentName:"p"},"first(col_name)")," is used as aggregate function for columns not specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"group by"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pivot"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"aggregate")," expressions."),(0,r.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/185245719-2be22f30-c84f-4b85-8712-be626c77e4e4.mp4",title:"Aggregate Propagate columns",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'def Aggregate_1(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(col("customer_id"))\n\n    return df1.agg(\n        *[first(col("order_date")).alias("order_date")],\n        *[\n          first(col(x)).alias(x)\n          for x in in0.columns\n          if x not in ["order_date", "customer_id"]\n        ]\n    )\n'))),(0,r.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'object Aggregate {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(first(col("order_date")).as("order_date"),\n           List() ++ in.columns.toList\n             .diff(List("order_date", "customer_id"))\n             .map(x => first(col(x)).as(x)): _*\n    )\n\n}\n')))))}c.isMDXComponent=!0},31220:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/agg_eg_1-40497a04aacf57cef089dc04e8968b62.png"},38100:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/agg_eg_2-8f09b2a49e553ed7489fa41295f6f74e.png"},1359:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/agg_eg_3-60109ae121ceafd6b5b2dbf9cdb855d7.png"}}]);