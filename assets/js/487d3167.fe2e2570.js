"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[2223],{15680:(e,t,r)=>{r.d(t,{xA:()=>g,yg:()=>c});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},g=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,c=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return r?a.createElement(c,i(i({ref:t},g),{},{components:r})):a.createElement(c,i({ref:t},g))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},99505:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=r(58168),n=(r(96540),r(15680));const l={title:"Seed",id:"seed",description:"Parameters and properties to read from Seed files",tags:["gems","file","seed"]},i=void 0,o={unversionedId:"Spark/gems/source-target/file/seed",id:"Spark/gems/source-target/file/seed",title:"Seed",description:"Parameters and properties to read from Seed files",source:"@site/docs/Spark/gems/source-target/file/seed.md",sourceDirName:"Spark/gems/source-target/file",slug:"/Spark/gems/source-target/file/seed",permalink:"/Spark/gems/source-target/file/seed",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"seed",permalink:"/tags/seed"}],version:"current",frontMatter:{title:"Seed",id:"seed",description:"Parameters and properties to read from Seed files",tags:["gems","file","seed"]},sidebar:"mySidebar",previous:{title:"Parquet",permalink:"/Spark/gems/source-target/file/parquet"},next:{title:"Text",permalink:"/Spark/gems/source-target/file/text"}},p={},s=[{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Target",id:"target",level:2}],g={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.yg)(u,(0,a.A)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"The Seed file type:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Is a configuration file that provides initial data or settings for an application."),(0,n.yg)("li",{parentName:"ul"},"Allows you to manually write small CSV files into your Prophecy pipelines.")),(0,n.yg)("p",null,"You can only read data from Seed files in Prophecy."),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Tab"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Data"),(0,n.yg)("td",{parentName:"tr",align:null},"Data"),(0,n.yg)("td",{parentName:"tr",align:null},"Data you provide in the Seed format.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Properties"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema to apply on the data. You can define or edit the schema as a JSON, or infer it with the ",(0,n.yg)("inlineCode",{parentName:"td"},"Infer Schema")," button.")))),(0,n.yg)("h2",{id:"source"},"Source"),(0,n.yg)("p",null,"The Source gem reads data from Seed files and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"source-properties"},"Source properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Select an appropriate delimiter for entered data"),(0,n.yg)("td",{parentName:"tr",align:null},"Character to separate data you enter."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},","))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"First row is header"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether the first row is the table header."),(0,n.yg)("td",{parentName:"tr",align:null},"true")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Enforce specified or inferred schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether the output schema must match what you define in this tab."),(0,n.yg)("td",{parentName:"tr",align:null},"false")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Auto Infer schema from the data"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether you want to automatically enter the schema."),(0,n.yg)("td",{parentName:"tr",align:null},"false")))),(0,n.yg)("h2",{id:"target"},"Target"),(0,n.yg)("p",null,"The Target gem does not support writing to Seed files."))}d.isMDXComponent=!0}}]);