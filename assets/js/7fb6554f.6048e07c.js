"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[8678],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,h=m["".concat(i,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},87359:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(83117),r=(a(67294),a(3905));const o={sidebar_position:5,title:"Flatten Schema",id:"flatten-schema",description:"Flatten nested data",tags:["gems","schema","explode","flatten"]},s=void 0,l={unversionedId:"low-code-spark/gems/transform/flatten-schema",id:"low-code-spark/gems/transform/flatten-schema",title:"Flatten Schema",description:"Flatten nested data",source:"@site/docs/low-code-spark/gems/transform/flattenschema.md",sourceDirName:"low-code-spark/gems/transform",slug:"/low-code-spark/gems/transform/flatten-schema",permalink:"/low-code-spark/gems/transform/flatten-schema",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"schema",permalink:"/tags/schema"},{label:"explode",permalink:"/tags/explode"},{label:"flatten",permalink:"/tags/flatten"}],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Flatten Schema",id:"flatten-schema",description:"Flatten nested data",tags:["gems","schema","explode","flatten"]},sidebar:"defaultSidebar",previous:{title:"Aggregate",permalink:"/low-code-spark/gems/transform/aggregate"},next:{title:"Schema Transform",permalink:"/low-code-spark/gems/transform/schema-transform"}},i={},p=[{value:"The Input",id:"the-input",level:2},{value:"The Expressions",id:"the-expressions",level:2},{value:"The Output",id:"the-output",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(m,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When processing raw data it can be useful to flatten complex data types like ",(0,r.kt)("inlineCode",{parentName:"p"},"Struct"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"Array"),"s into simpler, flatter schemas."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"The FlattenSchema gem",src:a(68386).Z,width:"290",height:"305"})),(0,r.kt)("h2",{id:"the-input"},"The Input"),(0,r.kt)("p",null,"FlattenSchema works on DataFrames that have nested columns that you'd like to extract into a flat schema."),(0,r.kt)("p",null,"For example, with an input schema like so:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Input schema",src:a(93666).Z,width:"376",height:"434"})),(0,r.kt)("p",null,"And the data looks like so:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Input data",src:a(67555).Z,width:"2764",height:"416"})),(0,r.kt)("p",null,"We want to extract ",(0,r.kt)("inlineCode",{parentName:"p"},"count"),", and all of the columns from the ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),"s in ",(0,r.kt)("inlineCode",{parentName:"p"},"events")," into a flattened schema."),(0,r.kt)("h2",{id:"the-expressions"},"The Expressions"),(0,r.kt)("p",null,"Having added a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlattenSchema")," Gem to your Pipeline, all you need to do is click the column names you wish to extract and they'll be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Expressions")," section. Once added you can change the ",(0,r.kt)("inlineCode",{parentName:"p"},"Target Column")," for a given row to change the name of the Column in the output."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Adding Expressions",src:a(51129).Z,width:"630",height:"432"})),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Columns Delimiter")," dropdown allows you to control how the names of the new columns are derived. Currently dashes and underscores are supported."),(0,r.kt)("h2",{id:"the-output"},"The Output"),(0,r.kt)("p",null,"If we check the ",(0,r.kt)("inlineCode",{parentName:"p"},"Output")," tab in the Gem, you'll see the schema that we've created using the selected columns."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Output schema",src:a(27635).Z,width:"404",height:"531"})),(0,r.kt)("p",null,"And here's what the output data looks like:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Output interim",src:a(97793).Z,width:"2766",height:"1436"})),(0,r.kt)("p",null,"No more nested structures!"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"For more advanced use cases, the Spark ",(0,r.kt)("inlineCode",{parentName:"p"},"explode")," function is available to use in the ",(0,r.kt)("a",{parentName:"p",href:"/low-code-spark/gems/transform/reformat"},"Reformat")," Gem, ",(0,r.kt)("a",{parentName:"p",href:"/low-code-spark/gems/custom/sql-statement"},"Custom SQL")," Gem, or anywhere else that accepts Spark expressions."))))}d.isMDXComponent=!0},51129:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_add_exp-9b144921f044f3a1ad68091d823283a1.gif"},68386:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_gem-088dcb90a9e1679a18b6f2497692a93b.png"},93666:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_input-252ad05824ac1130f88196d0d1132dde.png"},67555:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_input_interim-895ec66b9df67847cfb7df93737c7236.png"},27635:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_output-2377e8e555ac97a7dcd5c9faf7a32045.png"},97793:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/flatten_output_interim-66b78f2b754bce19f56ff25afa3c2037.png"}}]);