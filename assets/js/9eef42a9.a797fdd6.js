"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[5684],{15680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>c});var r=t(96540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),u=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},g=function(e){var a=u(e.components);return r.createElement(s.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=n,c=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(c,l(l({ref:a},g),{},{components:t})):r.createElement(c,l({ref:a},g))}));function c(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},19365:(e,a,t)=>{t.d(a,{A:()=>l});var r=t(96540),n=t(20053);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:a,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.A)(o.tabItem,l),hidden:t},a)}},11470:(e,a,t)=>{t.d(a,{A:()=>_});var r=t(58168),n=t(96540),o=t(20053),l=t(23104),i=t(56347),s=t(57485),u=t(31682),g=t(89466);function p(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function d(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??p(t);return function(e){const a=(0,u.X)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function m(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function c(e){let{queryString:a=!1,groupId:t}=e;const r=(0,i.W6)(),o=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,s.aZ)(o),(0,n.useCallback)((e=>{if(!o)return;const a=new URLSearchParams(r.location.search);a.set(o,e),r.replace({...r.location,search:a.toString()})}),[o,r])]}function y(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,o=d(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:o}))),[s,u]=c({queryString:t,groupId:r}),[p,y]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,o]=(0,g.Dv)(t);return[r,(0,n.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),f=(()=>{const e=s??p;return m({value:e,tabValues:o})?e:null})();(0,n.useLayoutEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,o]),tabValues:o}}var f=t(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:a,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const g=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.a_)(),d=e=>{const a=e.currentTarget,t=g.indexOf(a),r=u[t].value;r!==i&&(p(a),s(r))},m=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=g.indexOf(e.currentTarget)+1;a=g[t]??g[0];break}case"ArrowLeft":{const t=g.indexOf(e.currentTarget)-1;a=g[t]??g[g.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},a)},u.map((e=>{let{value:a,label:t,attributes:l}=e;return n.createElement("li",(0,r.A)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>g.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.A)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":i===a})}),t??a)})))}function v(e){let{lazy:a,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=o.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},o.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function N(e){const a=y(e);return n.createElement("div",{className:(0,o.A)("tabs-container",b.tabList)},n.createElement(h,(0,r.A)({},e,a)),n.createElement(v,(0,r.A)({},e,a)))}function _(e){const a=(0,f.A)();return n.createElement(N,(0,r.A)({key:String(a)},e))}},38760:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>g,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var r=t(58168),n=(t(96540),t(15680)),o=t(11470),l=t(19365);const i={sidebar_position:4,title:"Aggregate",id:"aggregate",description:"Group data and apply aggregation methods or pivot operations",tags:["gems","aggregate","group by","sum","count"]},s=void 0,u={unversionedId:"low-code-spark/gems/transform/aggregate",id:"low-code-spark/gems/transform/aggregate",title:"Aggregate",description:"Group data and apply aggregation methods or pivot operations",source:"@site/docs/low-code-spark/gems/transform/aggregate.md",sourceDirName:"low-code-spark/gems/transform",slug:"/low-code-spark/gems/transform/aggregate",permalink:"/low-code-spark/gems/transform/aggregate",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"aggregate",permalink:"/tags/aggregate"},{label:"group by",permalink:"/tags/group-by"},{label:"sum",permalink:"/tags/sum"},{label:"count",permalink:"/tags/count"}],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Aggregate",id:"aggregate",description:"Group data and apply aggregation methods or pivot operations",tags:["gems","aggregate","group by","sum","count"]},sidebar:"defaultSidebar",previous:{title:"Order By",permalink:"/low-code-spark/gems/transform/order-by"},next:{title:"Flatten Schema",permalink:"/low-code-spark/gems/transform/flatten-schema"}},g={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Aggregation without Grouping",id:"aggregation-without-grouping",level:3},{value:"Aggregation with Grouping",id:"aggregation-with-grouping",level:3},{value:"Pivot Columns",id:"pivot-columns",level:3},{value:"Propagate all input Columns",id:"propagate-all-input-columns",level:3}],d={toc:p},m="wrapper";function c(e){let{components:a,...i}=e;return(0,n.yg)(m,(0,r.A)({},d,i,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"Allows you to group the data and apply aggregation methods and pivot operation."),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Required"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"DataFrame"),(0,n.yg)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,n.yg)("td",{parentName:"tr",align:null},"True")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Target column (Aggregate Tab)"),(0,n.yg)("td",{parentName:"tr",align:null},"Output column name of aggregated column"),(0,n.yg)("td",{parentName:"tr",align:null},"True")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Expression (Aggregate Tab)"),(0,n.yg)("td",{parentName:"tr",align:null},"Aggregate function expression",(0,n.yg)("br",null)," Eg: ",(0,n.yg)("inlineCode",{parentName:"td"},'sum("amount")'),", ",(0,n.yg)("inlineCode",{parentName:"td"},"count(*)"),", ",(0,n.yg)("inlineCode",{parentName:"td"},'avg("amount")')),(0,n.yg)("td",{parentName:"tr",align:null},"True")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Target column (Group By Tab)"),(0,n.yg)("td",{parentName:"tr",align:null},"Output column name of grouped column"),(0,n.yg)("td",{parentName:"tr",align:null},"Required if ",(0,n.yg)("inlineCode",{parentName:"td"},"Pivot Column")," is present")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Expression (Group By Tab)"),(0,n.yg)("td",{parentName:"tr",align:null},"Column expression to group on ",(0,n.yg)("br",null)," Eg: ",(0,n.yg)("inlineCode",{parentName:"td"},'col("id")'),", ",(0,n.yg)("inlineCode",{parentName:"td"},'month(col("order_date"))')),(0,n.yg)("td",{parentName:"tr",align:null},"Required if a ",(0,n.yg)("inlineCode",{parentName:"td"},"Target Column"),"(Group By) is present")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Pivot column"),(0,n.yg)("td",{parentName:"tr",align:null},"Column name to pivot"),(0,n.yg)("td",{parentName:"tr",align:null},"False")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Unique values"),(0,n.yg)("td",{parentName:"tr",align:null},"List of values in ",(0,n.yg)("inlineCode",{parentName:"td"},"Pivot Column")," that will be translated to columns in the output DataFrame"),(0,n.yg)("td",{parentName:"tr",align:null},"False")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Propagate All Input Columns"),(0,n.yg)("td",{parentName:"tr",align:null},"If ",(0,n.yg)("inlineCode",{parentName:"td"},"true"),", all columns from the DataFrame would be propagated to output DataFrame. By default all columns apart from ones specified in ",(0,n.yg)("inlineCode",{parentName:"td"},"group by"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"pivot"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"aggregate")," expressions are propagated as ",(0,n.yg)("inlineCode",{parentName:"td"},"first(col_name)")," in the output DataFrame"),(0,n.yg)("td",{parentName:"tr",align:null},"False")))),(0,n.yg)("admonition",{type:"info"},(0,n.yg)("p",{parentName:"admonition"},"Providing ",(0,n.yg)("inlineCode",{parentName:"p"},"Unique values")," while performing pivot operation improves the performance of the operation since Spark does not have to first compute the list of distinct values of ",(0,n.yg)("inlineCode",{parentName:"p"},"Pivot Column")," internally.")),(0,n.yg)("h2",{id:"examples"},"Examples"),(0,n.yg)("h3",{id:"aggregation-without-grouping"},"Aggregation without Grouping"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Aggregate - Aggregation without Grouping",src:t(59491).A,width:"1691",height:"629"})),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def total_orders(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,n.yg)(l.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object total_orders {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,n.yg)("h3",{id:"aggregation-with-grouping"},"Aggregation with Grouping"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Aggregate - Aggregation with Grouping",src:t(97512).A,width:"1851",height:"796"})),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def orders_by_date(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date")))\n                      .alias("order_month(MM/YYYY)"))\n    return df1.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,n.yg)(l.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object orders_by_date {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,n.yg)("h3",{id:"pivot-columns"},"Pivot Columns"),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Example usage of Aggregate - Pivoting",src:t(45905).A,width:"1920",height:"1080"})),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def orders_by_date_N_status(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date"))).alias("order_month(MM/YYYY)"))\n    df2 = df1.pivot("order_status", ["Approved", "Finished", "Pending", "Started"])\n    return df2.agg(count(lit(1)).alias("number_of_orders"))\n'))),(0,n.yg)(l.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object orders_by_date_N_status {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .pivot(col("order_status"),\n             List("Approved", "Finished", "Pending", "Started")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n')))),(0,n.yg)("h3",{id:"propagate-all-input-columns"},"Propagate all input Columns"),(0,n.yg)("p",null,"This option in used to propagate all columns from input DataFrame to output DataFrame.\nBy default ",(0,n.yg)("inlineCode",{parentName:"p"},"first(col_name)")," is used as aggregate function for columns not specified in ",(0,n.yg)("inlineCode",{parentName:"p"},"group by"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"pivot"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"aggregate")," expressions."),(0,n.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,n.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,n.yg)("iframe",{src:"https://user-images.githubusercontent.com/103921419/185245719-2be22f30-c84f-4b85-8712-be626c77e4e4.mp4",title:"Aggregate Propagate columns",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,n.yg)(o.A,{mdxType:"Tabs"},(0,n.yg)(l.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-py"},'def Aggregate_1(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(col("customer_id"))\n\n    return df1.agg(\n        *[first(col("order_date")).alias("order_date")],\n        *[\n          first(col(x)).alias(x)\n          for x in in0.columns\n          if x not in ["order_date", "customer_id"]\n        ]\n    )\n'))),(0,n.yg)(l.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-scala"},'object Aggregate {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(first(col("order_date")).as("order_date"),\n           List() ++ in.columns.toList\n             .diff(List("order_date", "customer_id"))\n             .map(x => first(col(x)).as(x)): _*\n    )\n\n}\n')))))}c.isMDXComponent=!0},59491:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/agg_eg_1-40497a04aacf57cef089dc04e8968b62.png"},97512:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/agg_eg_2-8f09b2a49e553ed7489fa41295f6f74e.png"},45905:(e,a,t)=>{t.d(a,{A:()=>r});const r=t.p+"assets/images/agg_eg_3-60109ae121ceafd6b5b2dbf9cdb855d7.png"}}]);