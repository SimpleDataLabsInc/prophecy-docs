"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[78649],{20305:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"analysts/development/gems/source-target/file/csv","title":"CSV","description":"Read and write CSV files","source":"@site/docs/analysts/development/gems/source-target/file/csv.md","sourceDirName":"analysts/development/gems/source-target/file","slug":"/analysts/csv","permalink":"/analysts/csv","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CSV","id":"csv","slug":"/analysts/csv","description":"Read and write CSV files","tags":[]},"sidebar":"mySidebar","previous":{"title":"Upload files","permalink":"/analysts/upload-file"},"next":{"title":"Excel","permalink":"/analysts/excel"}}');var s=r(74848),i=r(28453);const d={title:"CSV",id:"csv",slug:"/analysts/csv",description:"Read and write CSV files",tags:[]},c=void 0,l={},o=[{value:"Supported connections",id:"supported-connections",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Target properties",id:"target-properties",level:3}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{class:"badge",children:"Prophecy Automate"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"Read or write a CSV file from an external connection."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can also use the ",(0,s.jsx)(t.a,{href:"/analysts/upload-file",children:"upload file"})," feature to use CSV files. These will be stored in the SQL warehouse configured in your fabric."]})}),"\n",(0,s.jsx)(t.h2,{id:"supported-connections",children:"Supported connections"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/administration/fabrics/prophecy-fabrics/connections/s3",children:"Amazon S3"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/administration/fabrics/prophecy-fabrics/connections/databricks",children:"Databricks"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/administration/fabrics/prophecy-fabrics/connections/onedrive",children:"Microsoft OneDrive"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/administration/fabrics/prophecy-fabrics/connections/sftp",children:"SFTP"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/administration/fabrics/prophecy-fabrics/connections/sharepoint",children:"SharePoint"})}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameter"}),(0,s.jsx)(t.th,{children:"Tab"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Connection type"}),(0,s.jsx)(t.td,{children:"Type"}),(0,s.jsx)(t.td,{children:"Location you want to connect from."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Format type"}),(0,s.jsx)(t.td,{children:"Source location"}),(0,s.jsxs)(t.td,{children:["Format of the gem. In this case, ",(0,s.jsx)(t.code,{children:"csv"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Select or create connection"}),(0,s.jsx)(t.td,{children:"Source location"}),(0,s.jsx)(t.td,{children:"Whether to select an existing connection, or to create a new one."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Filepath"}),(0,s.jsx)(t.td,{children:"Source location"}),(0,s.jsx)(t.td,{children:"File path where you want to read and write files according to the connection type."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Properties"}),(0,s.jsx)(t.td,{children:"Properties"}),(0,s.jsxs)(t.td,{children:["Optional table properties to apply. ",(0,s.jsx)(t.a,{href:"#source-properties",children:"Source"})," and ",(0,s.jsx)(t.a,{href:"#target-properties",children:"target"})," properties are outlined below."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Schema"}),(0,s.jsx)(t.td,{children:"Properties"}),(0,s.jsx)(t.td,{children:"Schema definition of the table (custom or inferred)."})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"source-properties",children:"Source properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Description"}),(0,s.jsx)(t.td,{children:"Description of the table."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Separator"}),(0,s.jsx)(t.td,{children:"Character used to separate values in the CSV file."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:","})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Header"}),(0,s.jsx)(t.td,{children:"Whether the first row is the column header."}),(0,s.jsx)(t.td,{children:"True"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Null Value"}),(0,s.jsx)(t.td,{children:"String that represents a null or missing value in the CSV."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Comment Character"}),(0,s.jsx)(t.td,{children:"Character used to denote lines in the file that should be treated as comments."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Inference Data Sampling Limit"}),(0,s.jsx)(t.td,{children:"Maximum number of rows to sample for inferring the schema."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"0"})})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"target-properties",children:"Target properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Description"}),(0,s.jsx)(t.td,{children:"Description of the table."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Separator"}),(0,s.jsx)(t.td,{children:"Character used to separate values in the CSV file."}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:","})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Header"}),(0,s.jsx)(t.td,{children:"Whether to make the first row the column header."}),(0,s.jsx)(t.td,{children:"True"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Null Value"}),(0,s.jsx)(t.td,{children:"String that represents a null or missing value in the CSV."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Use CRLF as line separator"}),(0,s.jsxs)(t.td,{children:["If enabled, lines in the CSV will end with ",(0,s.jsx)(t.code,{children:"\\r\\n"})," (Windows-style newlines)."]}),(0,s.jsx)(t.td,{children:"None"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>d,x:()=>c});var n=r(96540);const s={},i=n.createContext(s);function d(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);