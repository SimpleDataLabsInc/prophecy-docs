"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[18755],{15680:(e,t,a)=>{a.d(t,{xA:()=>i,yg:()=>g});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},i=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),m=p(a),y=r,g=m["".concat(c,".").concat(y)]||m[y]||u[y]||l;return a?n.createElement(g,s(s({ref:t},i),{},{components:a})):n.createElement(g,s({ref:t},i))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=y;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},50728:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540);function r(e){return n.createElement("div",null,e.python_package_name&&e.python_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.python_package_name),n.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.scala_package_name),n.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsPython"),n.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsScala"),n.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Single Cluster"),n.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Shared"),n.createElement("span",{className:"right"},e.uc_shared))),e.livy&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Livy"),n.createElement("span",{className:"right"},e.livy))),n.createElement("br",null),n.createElement("br",null))}},653:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var n=a(58168),r=(a(96540),a(15680)),l=a(50728);const s={title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once",tags:["gems","type","columns"]},o=void 0,c={unversionedId:"Spark/gems/transform/bulk-column-expressions",id:"Spark/gems/transform/bulk-column-expressions",title:"BulkColumnExpressions",description:"Change the data type of multiple columns at once",source:"@site/docs/Spark/gems/transform/bulk-column-expressions.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/bulk-column-expressions",permalink:"/Spark/gems/transform/bulk-column-expressions",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"type",permalink:"/tags/type"},{label:"columns",permalink:"/tags/columns"}],version:"current",frontMatter:{title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once",tags:["gems","type","columns"]},sidebar:"mySidebar",previous:{title:"Aggregate",permalink:"/Spark/gems/transform/aggregate"},next:{title:"BulkColumnRename",permalink:"/Spark/gems/transform/bulk-column-rename"}},p={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2}],m={toc:i},u="wrapper";function y(e){let{components:t,...a}=e;return(0,r.yg)(u,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{python_package_name:"",python_package_version:"",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.1.9+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.0.1+",mdxType:"Requirements"}),(0,r.yg)("p",null,"The BulkColumnExpressions gem primarily lets you cast or change the data type of multiple columns at once. It provides additional functionality, including:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Adding a prefix or suffix to selected columns."),(0,r.yg)("li",{parentName:"ul"},"Applying a custom expression to selected columns.")),(0,r.yg)("h2",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Data Type of the columns to do operations on"),(0,r.yg)("td",{parentName:"tr",align:null},"The data type of columns to select.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Selected Columns"),(0,r.yg)("td",{parentName:"tr",align:null},"The columns on which to apply transformations.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Change output column name"),(0,r.yg)("td",{parentName:"tr",align:null},"An option to add a prefix or suffix to the selected column names.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Change output column type"),(0,r.yg)("td",{parentName:"tr",align:null},"The data type that the columns will be transformed into.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Output Expression"),(0,r.yg)("td",{parentName:"tr",align:null},"A Spark SQL expression that can be applied to the selected columns. This field is required. If you only want to select the column, use ",(0,r.yg)("inlineCode",{parentName:"td"},"column_value")," as the expression.")))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"Assume you have some columns in a table that represent zero-based indices and are stored as long data types. You want them to represent one-based indices and be stored as integers to optimize memory use."),(0,r.yg)("p",null,"Using the BulkColumnExpressions gem, you can:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Filter your columns by long data types."),(0,r.yg)("li",{parentName:"ul"},"Select the columns you wish to transform."),(0,r.yg)("li",{parentName:"ul"},"Cast the output column(s) to be integers."),(0,r.yg)("li",{parentName:"ul"},"Include ",(0,r.yg)("inlineCode",{parentName:"li"},"column_value + 1")," in the expression field to shift the indices.")))}y.isMDXComponent=!0}}]);