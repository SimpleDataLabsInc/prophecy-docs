"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[98826],{22440:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/while-iterator-c24d4ded9e74aa33b6756ca790b44829.png"},23755:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>h,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Spark/gems/subgraph/while-iterator","title":"WhileIterator","description":"Recursively processes rows","source":"@site/docs/Spark/gems/subgraph/while-iterator.md","sourceDirName":"Spark/gems/subgraph","slug":"/engineers/while-iterator","permalink":"/engineers/while-iterator","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"subgraph","permalink":"/tags/subgraph"}],"version":"current","frontMatter":{"title":"WhileIterator","id":"while-iterator","slug":"/engineers/while-iterator","description":"Recursively processes rows","tags":["gems","subgraph"]},"sidebar":"mySidebar","previous":{"title":"TableIterator","permalink":"/engineers/table-iterator"},"next":{"title":"Machine Learning","permalink":"/engineers/machine-learning"}}');var r=i(74848),s=i(28453),a=i(49235);const l={title:"WhileIterator",id:"while-iterator",slug:"/engineers/while-iterator",description:"Recursively processes rows",tags:["gems","subgraph"]},h=void 0,d={},c=[{value:"Input",id:"input",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Subgraph",id:"subgraph",level:2},{value:"Break condition",id:"break-condition",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2},{value:"Add Reformat gem",id:"add-reformat-gem",level:3},{value:"Terminate loop",id:"terminate-loop",level:3},{value:"View output data",id:"view-output-data",level:3}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.A,{python_package_name:"",python_package_version:"",scala_package_name:"",scala_package_version:"",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"Not Supported"}),"\n",(0,r.jsx)(t.p,{children:"The WhileIterator allows you to group a set of gems together, and then run them one after another repeatedly in a loop."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"WhileIterator",src:i(22440).A+"",width:"2620",height:"1508"})}),"\n",(0,r.jsx)(t.h2,{id:"input",children:"Input"}),"\n",(0,r.jsxs)(t.p,{children:["The input of the WhileIterator can be any dataset. Importantly, the output schema of the WhileIterator ",(0,r.jsx)(t.strong,{children:"must"})," match or be a subset of the input schema. This is because the output feeds back into the input as the subgraph is iterating (looping)."]}),"\n",(0,r.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Before setting the WhileIterator configuration, make sure you are familiar with ",(0,r.jsx)(t.a,{href:"/engineers/configurations",children:"pipeline configurations"}),"."]})}),"\n",(0,r.jsxs)(t.p,{children:["Once you have a WhileIterator subgraph on your canvas, set configurations by opening the subgraph and clicking on ",(0,r.jsx)(t.strong,{children:"Configuration"}),". The following table describes the parameters you need to set."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Parameter"}),(0,r.jsx)(t.th,{children:"Tab"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Max iterations"}),(0,r.jsx)(t.td,{children:"Settings"}),(0,r.jsx)(t.td,{children:"The maximum number of loops that will be performed."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Populate iteration number in config variable"}),(0,r.jsx)(t.td,{children:"Settings"}),(0,r.jsx)(t.td,{children:"A checkbox to enable if you want to keep track of iteration numbers in a variable."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Select config variable name to populate iteration number"}),(0,r.jsx)(t.td,{children:"Settings"}),(0,r.jsx)(t.td,{children:"The name of the config variable that will store the iteration number."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Schema"}),(0,r.jsx)(t.td,{children:"Configuration"}),(0,r.jsxs)(t.td,{children:["A table where you define configuration variables. You can ",(0,r.jsx)(t.strong,{children:"Copy Pipeline Configs"})," to inherit these from your pipeline. If you want to populate the iteration number in a config variable, make sure to include that variable here."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Config"}),(0,r.jsx)(t.td,{children:"Configuration"}),(0,r.jsx)(t.td,{children:"An area where you can define default values for variables in one or more configurations."})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"subgraph",children:"Subgraph"}),"\n",(0,r.jsx)(t.p,{children:"Within the WhileIterator, you can design a flow with multiple gems to create your desired output."}),"\n",(0,r.jsx)(t.p,{children:"Importantly, you also need to understand the two inputs of the WhileIterator_Output. The order of your inputs is important:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"in0"})," dataset contains the DataFrame for the ",(0,r.jsx)(t.strong,{children:"following"})," iteration. If this dataset becomes empty, the loop is terminated."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"in1"})," dataset passes on an individual iteration. You'll see the entire list of iterations as the output of the WhileIterator gem."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"break-condition",children:"Break condition"}),"\n",(0,r.jsx)(t.p,{children:"There are two scenarios in which the WhileIterator will break:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"in0"})," dataset of the WhileIterator_Output becomes empty."]}),"\n",(0,r.jsx)(t.li,{children:"The maximum number of iterations is reached."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"output",children:"Output"}),"\n",(0,r.jsx)(t.p,{children:"There are two outputs of the WhileIterator:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"out0"})," dataset that contains the output of the ",(0,r.jsx)(t.strong,{children:"last iteration"})," of the WhileIterator."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.strong,{children:"out1"})," dataset that contains the whole list of iterations produced by the WhileIterator. This is produced by performing a union on all output iterations."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Imagine you are simulating an investment that earns a fixed percentage of interest per year. You want to keep compounding the interest until your investment reaches a desired amount. You can use the WhileIterator gem to produce a dataset demonstrating this yearly growth."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"WhileIterator",src:i(75624).A+"",width:"2620",height:"1508"})}),"\n",(0,r.jsx)(t.p,{children:"For this example, the input of the WhileIterator will be a simple table that describes your starting investment and the fixed interest rate."}),"\n",(0,r.jsx)("div",{class:"table-example",children:(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"year"}),(0,r.jsx)(t.th,{children:"principal"}),(0,r.jsx)(t.th,{children:"interest_rate"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"0"}),(0,r.jsx)(t.td,{children:"1000"}),(0,r.jsx)(t.td,{children:"0.05"})]})})]})}),"\n",(0,r.jsx)(t.h3,{id:"add-reformat-gem",children:"Add Reformat gem"}),"\n",(0,r.jsxs)(t.p,{children:["Now, let's use a Reformat gem in the WhileIterator subgraph to update the ",(0,r.jsx)(t.strong,{children:"Year"})," and ",(0,r.jsx)(t.strong,{children:"Principal"})," each iteration."]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Add the Reformat gem inside the WhileIterator."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Connect WhileIterator_Input to the Reformat gem."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Connect the Reformat gem to the WhileIterator_Output."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Configure the ",(0,r.jsx)(t.strong,{children:"Expressions"})," table as it is shown below."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Target Column"}),(0,r.jsx)(t.th,{children:"Expression"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"year"}),(0,r.jsx)(t.td,{children:"year + 1"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"principal"}),(0,r.jsx)(t.td,{children:"principal + principal * interest_rate"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"interest_rate"}),(0,r.jsx)(t.td,{children:"interest_rate"})]})]})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"terminate-loop",children:"Terminate loop"}),"\n",(0,r.jsxs)(t.p,{children:["The while loop will stop if the ",(0,r.jsx)(t.strong,{children:"in0"})," dataset becomes empty. How can the ",(0,r.jsx)(t.strong,{children:"in0"})," dataset become empty? In this example:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Add a Filter gem with the condition ",(0,r.jsx)(t.code,{children:"principal < 2000"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Connect the Reformat gem output to the input of the Filter gem."}),"\n",(0,r.jsx)(t.li,{children:"Connect the Filter gem output to the input of WhileIterator_Output."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This way, the Filter gem will return data as-is until the principal reaches 2000. After that, the record is filtered out, and the loop will terminate."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"WhileIterator",src:i(22440).A+"",width:"2620",height:"1508"})}),"\n",(0,r.jsx)(t.h3,{id:"view-output-data",children:"View output data"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"out0"})," dataset should be empty because we used a Filter gem to return an empty set when the ",(0,r.jsx)(t.code,{children:"principal > 2000"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Below is an example ",(0,r.jsx)(t.strong,{children:"out1"})," dataset. This lets you project how your principal will grow over the years."]}),"\n",(0,r.jsx)("div",{class:"table-example",children:(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"year"}),(0,r.jsx)(t.th,{children:"principal"}),(0,r.jsx)(t.th,{children:"interest_rate"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"1"}),(0,r.jsx)(t.td,{children:"1050"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"2"}),(0,r.jsx)(t.td,{children:"1102.5"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"3"}),(0,r.jsx)(t.td,{children:"1157.625"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"4"}),(0,r.jsx)(t.td,{children:"1215.50625"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"5"}),(0,r.jsx)(t.td,{children:"1276.2815625"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"6"}),(0,r.jsx)(t.td,{children:"1340.095640625"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"7"}),(0,r.jsx)(t.td,{children:"1407.100422656"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"8"}),(0,r.jsx)(t.td,{children:"1477.455443789"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"9"}),(0,r.jsx)(t.td,{children:"1551.328215978"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"10"}),(0,r.jsx)(t.td,{children:"1628.894626777"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"11"}),(0,r.jsx)(t.td,{children:"1710.339358116"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"12"}),(0,r.jsx)(t.td,{children:"1795.856326022"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"13"}),(0,r.jsx)(t.td,{children:"1885.649142323"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"14"}),(0,r.jsx)(t.td,{children:"1979.931599439"}),(0,r.jsx)(t.td,{children:"0.05"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"15"}),(0,r.jsx)(t.td,{children:"2078.928179411"}),(0,r.jsx)(t.td,{children:"0.05"})]})]})]})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(96540);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}},49235:(e,t,i)=>{i.d(t,{A:()=>r});i(96540);var n=i(74848);function r(e){return(0,n.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,n.jsxs)("span",{className:"badge-dependency",children:[(0,n.jsx)("span",{className:"left",children:e.python_package_name}),(0,n.jsx)("span",{className:"right",children:e.python_package_version})]})}),e.scala_package_name&&e.scala_package_version&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,n.jsxs)("span",{className:"badge-dependency",children:[(0,n.jsx)("span",{className:"left",children:e.scala_package_name}),(0,n.jsx)("span",{className:"right",children:e.scala_package_version})]})}),e.python_lib&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,n.jsxs)("span",{className:"badge-dependency",children:[(0,n.jsx)("span",{className:"left",children:"ProphecyLibsPython"}),(0,n.jsx)("span",{className:"right",children:e.python_lib})]})}),e.scala_lib&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,n.jsxs)("span",{className:"badge-dependency",children:[(0,n.jsx)("span",{className:"left",children:"ProphecyLibsScala"}),(0,n.jsx)("span",{className:"right",children:e.scala_lib})]})}),e.uc_single&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/",children:(0,n.jsxs)("span",{className:"badge-spark",children:[(0,n.jsx)("span",{className:"left",children:"Databricks UC Single Cluster"}),(0,n.jsx)("span",{className:"right",children:e.uc_single})]})}),e.uc_shared&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,n.jsxs)("span",{className:"badge-spark",children:[(0,n.jsx)("span",{className:"left",children:"Databricks UC Standard"}),(0,n.jsx)("span",{className:"right",children:e.uc_shared})]})}),e.livy&&(0,n.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,n.jsxs)("span",{className:"badge-spark",children:[(0,n.jsx)("span",{className:"left",children:"Livy"}),(0,n.jsx)("span",{className:"right",children:e.livy})]})}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{})]})}},75624:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/while-iterator-output-d0132f5fbde88c759aa54e8b17be2441.png"}}]);