"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[97083],{15680:(e,n,i)=>{i.d(n,{xA:()=>c,yg:()=>f});var a=i(96540);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,a,t=function(e,n){if(null==e)return{};var i,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var s=a.createContext({}),g=function(e){var n=a.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},c=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var i=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=g(i),d=t,f=p["".concat(s,".").concat(d)]||p[d]||u[d]||r;return i?a.createElement(f,o(o({ref:n},c),{},{components:i})):a.createElement(f,o({ref:n},c))}));function f(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=i.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:t,o[1]=l;for(var g=2;g<r;g++)o[g]=i[g];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}d.displayName="MDXCreateElement"},3514:(e,n,i)=>{i.d(n,{A:()=>y});var a=i(96540),t=i(20053),r=i(84142),o=i(75489),l=i(16654),s=i(21312);const g={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};function c(e){let{href:n,children:i}=e;return a.createElement(o.A,{href:n,className:(0,t.A)("card padding--lg",g.cardContainer)},i)}function p(e){let{href:n,icon:i,title:r,description:o}=e;return a.createElement(c,{href:n},a.createElement("h2",{className:(0,t.A)("text--truncate",g.cardTitle),title:r},i," ",r),o&&a.createElement("p",{className:(0,t.A)("text--truncate",g.cardDescription),title:o},o))}function u(e){let{item:n}=e;const i=(0,r._o)(n);return i?a.createElement(p,{href:i,icon:"\ud83d\uddc3\ufe0f",title:n.label,description:n.description??(0,s.T)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:n.items.length})}):null}function d(e){let{item:n}=e;const i=(0,l.A)(n.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",t=(0,r.cC)(n.docId??void 0);return a.createElement(p,{href:n.href,icon:i,title:n.label,description:n.description??t?.description})}function f(e){let{item:n}=e;switch(n.type){case"link":return a.createElement(d,{item:n});case"category":return a.createElement(u,{item:n});default:throw new Error(`unknown item type ${JSON.stringify(n)}`)}}function m(e){let{className:n}=e;const i=(0,r.$S)();return a.createElement(y,{items:i.items,className:n})}function y(e){const{items:n,className:i}=e;if(!n)return a.createElement(m,e);const o=(0,r.d1)(n);return a.createElement("section",{className:(0,t.A)("row",i)},o.map(((e,n)=>a.createElement("article",{key:n,className:"col col--6 margin-bottom--lg"},a.createElement(f,{item:e})))))}},19365:(e,n,i)=>{i.d(n,{A:()=>o});var a=i(96540),t=i(20053);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:i,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,o),hidden:i},n)}},11470:(e,n,i)=>{i.d(n,{A:()=>w});var a=i(58168),t=i(96540),r=i(20053),o=i(23104),l=i(56347),s=i(57485),g=i(31682),c=i(89466);function p(e){return function(e){return t.Children.map(e,(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:i,attributes:a,default:t}}=e;return{value:n,label:i,attributes:a,default:t}}))}function u(e){const{values:n,children:i}=e;return(0,t.useMemo)((()=>{const e=n??p(i);return function(e){const n=(0,g.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function d(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:i}=e;const a=(0,l.W6)(),r=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,s.aZ)(r),(0,t.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function m(e){const{defaultValue:n,queryString:i=!1,groupId:a}=e,r=u(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=i.find((e=>e.default))??i[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[s,g]=f({queryString:i,groupId:a}),[p,m]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,c.Dv)(i);return[a,(0,t.useCallback)((e=>{i&&r.set(e)}),[i,r])]}({groupId:a}),y=(()=>{const e=s??p;return d({value:e,tabValues:r})?e:null})();(0,t.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),g(e),m(e)}),[g,m,r]),tabValues:r}}var y=i(92303);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:i,selectedValue:l,selectValue:s,tabValues:g}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.a_)(),u=e=>{const n=e.currentTarget,i=c.indexOf(n),a=g[i].value;a!==l&&(p(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const i=c.indexOf(e.currentTarget)+1;n=c[i]??c[0];break}case"ArrowLeft":{const i=c.indexOf(e.currentTarget)-1;n=c[i]??c[c.length-1];break}}n?.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":i},n)},g.map((e=>{let{value:n,label:i,attributes:o}=e;return t.createElement("li",(0,a.A)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:u},o,{className:(0,r.A)("tabs__item",h.tabItem,o?.className,{"tabs__item--active":l===n})}),i??n)})))}function v(e){let{lazy:n,children:i,selectedValue:a}=e;const r=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function C(e){const n=m(e);return t.createElement("div",{className:(0,r.A)("tabs-container",h.tabList)},t.createElement(b,(0,a.A)({},e,n)),t.createElement(v,(0,a.A)({},e,n)))}function w(e){const n=(0,y.A)();return t.createElement(C,(0,a.A)({key:String(n)},e))}},98447:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>y,frontMatter:()=>g,metadata:()=>p,toc:()=>d});var a=i(58168),t=(i(96540),i(15680)),r=i(11470),o=i(19365),l=i(3514),s=i(84142);const g={title:"Configuration",id:"configuration",description:"Configuring Prophecy's interface for Spark",sidebar_position:2,tags:["spark","development","config"]},c=void 0,p={unversionedId:"Spark/configuration/configuration",id:"Spark/configuration/configuration",title:"Configuration",description:"Configuring Prophecy's interface for Spark",source:"@site/docs/Spark/configuration/configuration.md",sourceDirName:"Spark/configuration",slug:"/Spark/configuration/",permalink:"/Spark/configuration/",draft:!1,tags:[{label:"spark",permalink:"/tags/spark"},{label:"development",permalink:"/tags/development"},{label:"config",permalink:"/tags/config"}],version:"current",sidebarPosition:2,frontMatter:{title:"Configuration",id:"configuration",description:"Configuring Prophecy's interface for Spark",sidebar_position:2,tags:["spark","development","config"]},sidebar:"mySidebar",previous:{title:"Diagnostics",permalink:"/Spark/fabrics/fabric-diagnostics"},next:{title:"Conditional Execution in Spark",permalink:"/Spark/configuration/conditional-execution"}},u={},d=[{value:"Spark Configuration",id:"spark-configuration",level:2},{value:"Hadoop Configuration",id:"hadoop-configuration",level:2},{value:"Pipeline Configuration",id:"pipeline-configuration",level:2},{value:"Syntax for using configuration inside Gems",id:"syntax-for-using-configuration-inside-gems",level:3},{value:"Language-specific Config syntax",id:"language-specific-config-syntax",level:4},{value:"Jinja Config syntax",id:"jinja-config-syntax",level:4},{value:"Examples for Pipeline level configurations",id:"examples-for-pipeline-level-configurations",level:2},{value:"Using Config in limit Gem",id:"using-config-in-limit-gem",level:3},{value:"SQL Visual Language",id:"sql-visual-language",level:4},{value:"Scala/Python Visual Language",id:"scalapython-visual-language",level:4},{value:"Jinja Config",id:"jinja-config",level:4},{value:"Using Spark-expression Config type in Gem",id:"using-spark-expression-config-type-in-gem",level:3},{value:"SQL Visual Language",id:"Spark-expression",level:4},{value:"Scala/Python Visual Language",id:"Spark-expression",level:4},{value:"Jinja Config",id:"Spark-expression",level:4},{value:"Using config in paths for Source/Target Gems",id:"using-config-in-paths-for-sourcetarget-gems",level:3},{value:"Edit Pipeline Name",id:"edit-pipeline-name",level:3},{value:"Pipeline Configuration instances",id:"pipeline-configuration-instances",level:2},{value:"Using a particular configuration instance for interactive runs",id:"using-a-particular-configuration-instance-for-interactive-runs",level:3},{value:"Using configuration instances in Jobs",id:"using-configuration-instances-in-jobs",level:3},{value:"Overriding configuration values in Jobs",id:"overriding-configuration-values-in-jobs",level:3},{value:"Code",id:"code",level:2},{value:"Scala Config code",id:"scala-config-code",level:3},{value:"Python Config code",id:"python-config-code",level:3},{value:"Component code",id:"component-code",level:3}],f={toc:d},m="wrapper";function y(e){let{components:n,...g}=e;return(0,t.yg)(m,(0,a.A)({},f,g,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"Allows you to define configurations to control various aspects of your Pipeline."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Option",src:i(54907).A,width:"2640",height:"369"})),(0,t.yg)("p",null,"Prophecy IDE allows you to define three kinds of configurations:"),(0,t.yg)("h2",{id:"spark-configuration"},"Spark Configuration"),(0,t.yg)("p",null,"Set runtime Spark configurations as name-value pairs. The name-value pairs will be set inside the Spark runtime configurations as ",(0,t.yg)("inlineCode",{parentName:"p"},"spark.conf.set(name, value)")),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Configurations - Spark",src:i(75492).A,width:"3048",height:"406"})),(0,t.yg)("h2",{id:"hadoop-configuration"},"Hadoop Configuration"),(0,t.yg)("p",null,"Hadoop configurations as name-value pairs. The name-value pairs will be set inside the Hadoop configuration as ",(0,t.yg)("inlineCode",{parentName:"p"},"spark.sparkContext.hadoopConfiguration.set(name, value)")),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Configurations - Spark",src:i(27192).A,width:"2987",height:"381"})),(0,t.yg)("h2",{id:"pipeline-configuration"},"Pipeline Configuration"),(0,t.yg)("p",null,"Config values which can be set at Pipeline level and then be accessed inside any component in the Pipeline. ",(0,t.yg)("a",{parentName:"p",href:"#pipeline-configuration-instances"},"Multiple instances"),"\nof configuration can be created per Pipeline."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Configurations - Common",src:i(98416).A,width:"2640",height:"1517"})),(0,t.yg)("h3",{id:"syntax-for-using-configuration-inside-gems"},"Syntax for using configuration inside Gems"),(0,t.yg)("p",null,"We support language-specific config syntaxes for different data types and coding languages for configurations inside of your Spark Gems. We also support a common Jinja config syntax. You can use either syntax or a combination of them."),(0,t.yg)("h4",{id:"language-specific-config-syntax"},"Language-specific Config syntax"),(0,t.yg)("p",null,"See the following language-specific config syntax for SQL, Scala, and Python in Spark."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Visual Language Selection",src:i(83106).A,width:"2640",height:"1517"})),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For visual language SQL: ",(0,t.yg)("inlineCode",{parentName:"p"},"'$config_name'"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For visual language Scala/Python: ",(0,t.yg)("inlineCode",{parentName:"p"},"Config.config_name"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For using Spark expression with visual language SQL: ",(0,t.yg)("inlineCode",{parentName:"p"},"expr('$config_name')"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For using Spark expression with visual language Scala/Python: ",(0,t.yg)("inlineCode",{parentName:"p"},"expr(Config.config_name)")))),(0,t.yg)("h4",{id:"jinja-config-syntax"},"Jinja Config syntax"),(0,t.yg)("p",null,"You can choose to use a common Jinja config syntax for configurations inside of your Spark Gems."),(0,t.yg)("p",null,"You must enable it by navigating to ",(0,t.yg)("strong",{parentName:"p"},"...")," > ",(0,t.yg)("strong",{parentName:"p"},"Pipeline Settings"),"."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Pipeline Settings",src:i(56033).A,width:"2640",height:"1517"})),(0,t.yg)("p",null,"Under the ",(0,t.yg)("strong",{parentName:"p"},"Code")," section, click to enable Jinja config syntax. This setting is toggled on by default for new Pipelines."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Enable Jinja Config syntax",src:i(18740).A,width:"2640",height:"1072"})),(0,t.yg)("p",null,"See the following syntax for Jinja in Spark."),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For Jinja: ",(0,t.yg)("inlineCode",{parentName:"p"},"{{config_name}}"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"For using Spark expression with Jinja: ",(0,t.yg)("inlineCode",{parentName:"p"},"expr('{{config_name}}')")))),(0,t.yg)("p",null,"So for example, instead of using ",(0,t.yg)("inlineCode",{parentName:"p"},"'$read_env'")," for SQL or ",(0,t.yg)("inlineCode",{parentName:"p"},"Config.read_env")," for Scala/Python, you can use ",(0,t.yg)("inlineCode",{parentName:"p"},"{{read_env}}"),"."),(0,t.yg)("p",null,"Jinja config syntax supports the following functionalities:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Integer/String data type")," - You can use a data type as it is, such as an integer field as an integer by using ",(0,t.yg)("inlineCode",{parentName:"p"},"{{ integer_field }}"),". For strings, use ",(0,t.yg)("inlineCode",{parentName:"p"},"<some_character>{{ integer_field }}<some_character>"),".")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Concatenation")," - You can define multiple Jinja syntaxes in the same string, and the generated code will be a formatted string. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"'{{c_string}}___{{ c_int }}'"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"SQL Statement queries")," - You can use Jinja syntax in SQL Statement Gem queries. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"select {{col1}} from {{table}} where {{condition}}"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("strong",{parentName:"p"},"Nested ",(0,t.yg)("inlineCode",{parentName:"strong"},"call_func"))," - You can use Jinja syntax inside of ",(0,t.yg)("inlineCode",{parentName:"p"},"call_func")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"call_function"),", including those that are nested within other functions."),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre"},"LEAST((LEAST(product.SAS, COALESCE(product.SAS, call_func('data_{{read_env}}.business_rules.datum', DTM, '123456789')))) + 1, cast('9999-12-31' as DATE))\n")))),(0,t.yg)("h2",{id:"examples-for-pipeline-level-configurations"},"Examples for Pipeline level configurations"),(0,t.yg)("p",null,"Now let's use the ",(0,t.yg)("a",{parentName:"p",href:"#pipeline-configuration"},"above defined configurations")," in the below Pipeline.\n",(0,t.yg)("img",{alt:"Pipeline view",src:i(89789).A,width:"3450",height:"1846"})),(0,t.yg)("h3",{id:"using-config-in-limit-gem"},"Using Config in limit Gem"),(0,t.yg)("h4",{id:"sql-visual-language"},"SQL Visual Language"),(0,t.yg)("p",null,"In the below image ",(0,t.yg)("inlineCode",{parentName:"p"},"'$num_top_customers'")," is fetching the integer value defined in configurations."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Limit Example",src:i(95819).A,width:"3456",height:"1850"})),(0,t.yg)("h4",{id:"scalapython-visual-language"},"Scala/Python Visual Language"),(0,t.yg)("p",null,"In the below image ",(0,t.yg)("inlineCode",{parentName:"p"},"Config.num_top_customers")," is fetching the integer value defined in configurations."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Limit Example",src:i(91991).A,width:"3448",height:"1842"})),(0,t.yg)("h4",{id:"jinja-config"},"Jinja Config"),(0,t.yg)("p",null,"In the below image ",(0,t.yg)("inlineCode",{parentName:"p"},"{{num_top_customers}}")," is fetching the integer value defined in configurations."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Limit Example",src:i(76816).A,width:"2640",height:"1517"})),(0,t.yg)("p",null,"Also see the following syntax examples for specific Gem property field data types:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"SColumnExpression: ",(0,t.yg)("inlineCode",{parentName:"li"},'lit("{{a.b.c}}")')),(0,t.yg)("li",{parentName:"ul"},"SString: ",(0,t.yg)("inlineCode",{parentName:"li"},"{{ a.b.c }}")),(0,t.yg)("li",{parentName:"ul"},"String: ",(0,t.yg)("inlineCode",{parentName:"li"},"{{ a.b.c }}"))),(0,t.yg)("p",null,"You can use the following syntax examples for accessing elements of array and record fields:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"For array: ",(0,t.yg)("inlineCode",{parentName:"li"},"{{ config1.array_config[23] }}")),(0,t.yg)("li",{parentName:"ul"},"For record: ",(0,t.yg)("inlineCode",{parentName:"li"},"{{ record1.record2.field1 }}"))),(0,t.yg)("h3",{id:"using-spark-expression-config-type-in-gem"},"Using Spark-expression Config type in Gem"),(0,t.yg)("p",null,"Here we have used Spark expression directly from our config value to populate a column."),(0,t.yg)("h4",{id:"Spark-expression"},"SQL Visual Language"),(0,t.yg)("p",null,"In the below image:",(0,t.yg)("br",null)),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"(1)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"amounts")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"expr('$test_expression')")," is coming from configuration type defined as ",(0,t.yg)("inlineCode",{parentName:"p"},"Spark-expression")," ",(0,t.yg)("br",null),"\n",(0,t.yg)("strong",{parentName:"p"},"(2)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"report_name")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"'$report_name'")," is coming configuration type defined as string"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Reformat example",src:i(52590).A,width:"3456",height:"1850"})),(0,t.yg)("h4",{id:"Spark-expression"},"Scala/Python Visual Language"),(0,t.yg)("p",null,"In the below image: ",(0,t.yg)("br",null)),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"(1)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"amounts")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"expr(Config.test_expression)")," is coming from configuration type defined as ",(0,t.yg)("inlineCode",{parentName:"p"},"Spark-expression")," ",(0,t.yg)("br",null),"\n",(0,t.yg)("strong",{parentName:"p"},"(2)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"report_name")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"Config.report_name")," is coming configuration type defined as string"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Reformat example",src:i(85128).A,width:"3452",height:"1848"})),(0,t.yg)("admonition",{type:"note"},(0,t.yg)("p",{parentName:"admonition"},"Similarly configurations defined as type ",(0,t.yg)("inlineCode",{parentName:"p"},"Spark-expression")," can be used directly in filter, join, reformat etc Gems directly.")),(0,t.yg)("h4",{id:"Spark-expression"},"Jinja Config"),(0,t.yg)("p",null,"In the below image: ",(0,t.yg)("br",null)),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"(1)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"amounts")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"expr('{{test_expression}}')")," is coming from configuration type defined as ",(0,t.yg)("inlineCode",{parentName:"p"},"Spark-expression")," ",(0,t.yg)("br",null),"\n",(0,t.yg)("strong",{parentName:"p"},"(2)")," ",(0,t.yg)("inlineCode",{parentName:"p"},"report_name")," -> ",(0,t.yg)("inlineCode",{parentName:"p"},"{{report_name}}")," is coming configuration type defined as string"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config Reformat example",src:i(96809).A,width:"2640",height:"1517"})),(0,t.yg)("h3",{id:"using-config-in-paths-for-sourcetarget-gems"},"Using config in paths for Source/Target Gems"),(0,t.yg)("p",null,"Config can also be used to refer to paths. This type of configuration comes in handy in situation where you have DEV, QA, and PROD data, and you want to configure Dataset (or in general the Job runs) based on which environment you are running it in."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config path example",src:i(28907).A,width:"3456",height:"1842"})),(0,t.yg)("p",null,"When using Jinja config for the previous example, you would use ",(0,t.yg)("inlineCode",{parentName:"p"},"dbfs:/Prophecy/{{path_helper}}/CustomersOrders.csv"),"."),(0,t.yg)("h3",{id:"edit-pipeline-name"},"Edit Pipeline Name"),(0,t.yg)("p",null,"To change the Pipeline name itself, go to Prophecy's metadata page. Locate the Pipeline within a Project, and click the pencil icon."),(0,t.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,t.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,t.yg)("iframe",{src:"https://fast.wistia.net/embed/iframe/7t778aurgk?seo=false?videoFoam=true",title:"Getting Started With SQL Video",allow:"autoplay; fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),"                                                                                   ",(0,t.yg)("script",{src:"https://fast.wistia.net/assets/external/E-v1.js",async:!0}),(0,t.yg)("h2",{id:"pipeline-configuration-instances"},"Pipeline Configuration instances"),(0,t.yg)("p",null,"Different configuration instances can be defined as per requirement. This comes in handy when Pipeline needs to run with different\nconfigurations in different environments or different users."),(0,t.yg)("p",null,"New instances can be configured to override default values as shown in image below:"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Create config instance",src:i(57434).A,width:"3456",height:"1142"})),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Create pipeline override",src:i(58657).A,width:"3446",height:"1852"})),(0,t.yg)("h3",{id:"using-a-particular-configuration-instance-for-interactive-runs"},"Using a particular configuration instance for interactive runs"),(0,t.yg)("p",null,"For interactive runs, configuration can be selected as shown in image below.\n",(0,t.yg)("img",{alt:"Config interactive run",src:i(52454).A,width:"3450",height:"1846"})),(0,t.yg)("h3",{id:"using-configuration-instances-in-jobs"},"Using configuration instances in Jobs"),(0,t.yg)("p",null,"Particular instances can also be configured in Databricks Jobs."),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config inside job",src:i(7774).A,width:"3444",height:"1846"})),(0,t.yg)("h3",{id:"overriding-configuration-values-in-jobs"},"Overriding configuration values in Jobs"),(0,t.yg)("p",null,"Specific values from configuration instance can be overridden as shown in images below:"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config job override",src:i(52566).A,width:"3452",height:"1840"})),(0,t.yg)("h2",{id:"code"},"Code"),(0,t.yg)("p",null,"All configuration instances and values are automatically converted to code as well. Default configurations are stored as code and\nspecific instance overrides are stored as JSON files as shown in image below."),(0,t.yg)("h3",{id:"scala-config-code"},"Scala Config code"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config scala code",src:i(89944).A,width:"3452",height:"1842"})),(0,t.yg)("h3",{id:"python-config-code"},"Python Config code"),(0,t.yg)("p",null,(0,t.yg)("img",{alt:"Config python code",src:i(59182).A,width:"3450",height:"1838"})),(0,t.yg)("h3",{id:"component-code"},"Component code"),(0,t.yg)(r.A,{mdxType:"Tabs"},(0,t.yg)(o.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-py"},'def Reformat(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.select(\n        col("customer_id"),\n        col("orders"),\n        col("account_length_days"),\n        expr(Config.test_expression).as("amounts"),\n        lit(Config.report_name).as("report_name")\n    )\n'))),(0,t.yg)(o.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-scala"},'object Reformat {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.select(col("customer_id"),\n              col("orders"),\n              col("account_length_days"),\n              expr(Config.test_expression).as("amounts"),\n              lit(Config.report_name).as("report_name")\n    )\n\n}\n\n')))),(0,t.yg)(l.A,{items:(0,s.$S)().items,mdxType:"DocCardList"}))}y.isMDXComponent=!0},7774:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-inside-job-da462a1b4cb3c14c0a01176ecff0a26b.png"},52454:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-instance-interactive-run-2d81aa4b6687a2937704666f5ef0432d.png"},52566:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-job-override-d17adca511bb853b7974d79eb7ce0f87.png"},57434:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-new-instance-d1ab8ec7e33a045ca32ee5531ed6ffc1.png"},54907:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-option-bf5586161b0f998df0a1669fcb6843bc.png"},98416:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-eg1-352dd2a9b417edfa551b4c295d327da2.png"},76816:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-limit-eg-jinja-b8205e762ee4c6f0cb4f0f789a9f7033.png"},91991:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-limit-eg-scala-python-75bb5df32fd0626272b6804efba49823.png"},95819:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-limit-eg-0d39b48978c3e7f1fa34e4055cf98b71.png"},58657:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-override-2b1087f68db48de0b9db16d3790b6cfa.png"},28907:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-path-eg-69dd68fd535736a6a3489cfebde729d6.png"},96809:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-reformat-eg-jinja-322bbbb7e055dca254e9ef88cb48946a.png"},85128:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-reformat-eg-scala-python-17e496a27d1b42aec0f5cada46e80650.png"},52590:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-reformat-eg-710011eb69b4d8d12273872c90746ed0.png"},89789:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-view-eg-d0b83c8f00fba2b5ad9ec668a823808b.png"},83106:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-pipeline-visual-language-a50a44d05453717f82c4fec46c5cc92a.png"},59182:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-python-code-0c98aac73937d55179c6d5b2fda2b85d.png"},89944:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/config-scala-code-c0c5c02a564e24afabb80d15caf27dae.png"},27192:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/configs_hadoop-c4da78b7ebf4205d9867c8f0f99aac8e.png"},75492:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/configs_spark-4dc24fb44c969bbb974db83384e72f2a.png"},18740:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/enable-jinja-config-syntax-de2f7f9ab9c952ad2609ff4ce4ecfd63.png"},56033:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/navigate-pipeline-settings-b6265f9c9a938a15bf1e48e610805372.png"}}]);