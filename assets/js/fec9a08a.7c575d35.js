"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[31902],{5130:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/set_eg_2-fe430fbd13a44d729c0c0ef00e7ca2d9.png"},28453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var t=n(96540);const r={},s=t.createContext(r);function i(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:a},e.children)}},35158:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/set_add_inputs-bdf7b6691fc473ea1eee60161a5b9786.png"},37244:(e,a,n)=>{n.d(a,{A:()=>k});var t=n(96540),r=n(18215),s=n(44319),i=n(56347),l=n(94280),c=n(73024),o=n(58417),d=n(44031);function p(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:a,children:n}=e;return(0,t.useMemo)(()=>{const e=a??function(e){return p(e).map(({props:{value:e,label:a,attributes:n,default:t}})=>({value:e,label:a,attributes:n,default:t}))}(n);return function(e){const a=(0,o.XI)(e,(e,a)=>e.value===a.value);if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[a,n])}function h({value:e,tabValues:a}){return a.some(a=>a.value===e)}function m({queryString:e=!1,groupId:a}){const n=(0,i.W6)(),r=function({queryString:e=!1,groupId:a}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:e,groupId:a});return[(0,c.aZ)(r),(0,t.useCallback)(e=>{if(!r)return;const a=new URLSearchParams(n.location.search);a.set(r,e),n.replace({...n.location,search:a.toString()})},[r,n])]}function f(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,s=u(e),[i,c]=(0,t.useState)(()=>function({defaultValue:e,tabValues:a}){if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${a.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=a.find(e=>e.default)??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:s})),[o,p]=m({queryString:n,groupId:r}),[f,g]=function({groupId:e}){const a=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,d.Dv)(a);return[n,(0,t.useCallback)(e=>{a&&r.set(e)},[a,r])]}({groupId:r}),b=(()=>{const e=o??f;return h({value:e,tabValues:s})?e:null})();(0,l.A)(()=>{b&&c(b)},[b]);return{selectedValue:i,selectValue:(0,t.useCallback)(e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),g(e)},[p,g,s]),tabValues:s}}var g=n(46916);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(74848);function y({className:e,block:a,selectedValue:n,selectValue:t,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),o=e=>{const a=e.currentTarget,r=l.indexOf(a),s=i[r].value;s!==n&&(c(a),t(s))},d=e=>{let a=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;a=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;a=l[n]??l[l.length-1];break}}a?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":a},e),children:i.map(({value:e,label:a,attributes:t})=>(0,x.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:o,...t,className:(0,r.A)("tabs__item",b.tabItem,t?.className,{"tabs__item--active":n===e}),children:a??e},e))})}function j({lazy:e,children:a,selectedValue:n}){const s=(Array.isArray(a)?a:[a]).filter(Boolean);if(e){const e=s.find(e=>e.props.value===n);return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:s.map((e,a)=>(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==n}))})}function v(e){const a=f(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,x.jsx)(y,{...a,...e}),(0,x.jsx)(j,{...a,...e})]})}function k(e){const a=(0,g.A)();return(0,x.jsx)(v,{...e,children:p(e.children)},String(a))}},54113:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/set_eg_1-46701e21c8cebc491888db3d556e8345.png"},55891:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/set_eg_3-5ad43a57037f0e1ada3b964fcf2934a7.png"},56778:(e,a,n)=>{n.d(a,{A:()=>i});n(96540);var t=n(18215);const r={tabItem:"tabItem_Ymn6"};var s=n(74848);function i({children:e,hidden:a,className:n}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,n),hidden:a,children:e})}},68092:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Spark/gems/transform/set-operation","title":"SetOperation gem","description":"Union, Intersect and Difference","source":"@site/docs/Spark/gems/transform/set-operation.md","sourceDirName":"Spark/gems/transform","slug":"/engineers/set-operation","permalink":"/engineers/set-operation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"set","permalink":"/tags/set"},{"inline":true,"label":"union","permalink":"/tags/union"},{"inline":true,"label":"intersect","permalink":"/tags/intersect"},{"inline":true,"label":"difference","permalink":"/tags/difference"}],"version":"current","frontMatter":{"title":"SetOperation gem","sidebar_label":"SetOperation","id":"set-operation","slug":"/engineers/set-operation","description":"Union, Intersect and Difference","tags":["gems","set","union","intersect","difference"]},"sidebar":"platformSidebar","previous":{"title":"SchemaTransform","permalink":"/engineers/schema-transform"},"next":{"title":"Unpivot","permalink":"/engineers/unpivot"}}');var r=n(74848),s=n(28453),i=n(97071),l=n(37244),c=n(56778);const o={title:"SetOperation gem",sidebar_label:"SetOperation",id:"set-operation",slug:"/engineers/set-operation",description:"Union, Intersect and Difference",tags:["gems","set","union","intersect","difference"]},d=void 0,p={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Operation Type: <code>Union</code>",id:"operation-type-union",level:3},{value:"Operation Type: <code>Intersect All</code>",id:"operation-type-intersect-all",level:3},{value:"Operation Type: <code>Except All</code>",id:"operation-type-except-all",level:3}];function h(e){const a={code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.0.1+"}),"\n",(0,r.jsx)(a.p,{children:"Use the SetOperation gem to perform addition or subtraction of rows from DataFrames with identical schemas and different data."}),"\n",(0,r.jsx)(a.h2,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(a.table,{children:[(0,r.jsx)(a.thead,{children:(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.th,{style:{textAlign:"left"},children:"Parameter"}),(0,r.jsx)(a.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(a.tbody,{children:[(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"DataFrame 1"}),(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"First input DataFrame"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"DataFrame 2"}),(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"Second input DataFrame"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"DataFrame N"}),(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"Nth input DataFrame"})]}),(0,r.jsxs)(a.tr,{children:[(0,r.jsx)(a.td,{style:{textAlign:"left"},children:"Operation type"}),(0,r.jsx)(a.td,{style:{textAlign:"left"},children:(0,r.jsxs)("ul",{style:{margin:0,padding:"0 1rem"},children:[(0,r.jsx)("li",{children:" Union: Returns a DataFrame containing rows in any one of the input DataFrames, while preserving duplicates."}),(0,r.jsx)("li",{children:"Intersect All: Returns a DataFrame containing rows in all of the input DataFrames, while preserving duplicates."}),(0,r.jsx)("li",{children:"Except All: Returns a DataFrames containing rows in the first DataFrame, but not in the other DataFrames, while preserving duplicates."})]})})]})]})]}),"\n",(0,r.jsxs)(a.p,{children:["To add more input DataFrames, you can click the ",(0,r.jsx)(a.code,{children:"+"})," icon on the left sidebar."]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Set Operation - Add input dataframe",src:n(35158).A+"",width:"556",height:"136"})}),"\n",(0,r.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(a.h3,{id:"operation-type-union",children:["Operation Type: ",(0,r.jsx)(a.code,{children:"Union"})]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Example usage of Set Operation - Union",src:n(54113).A+"",width:"1798",height:"904"})}),"\n","\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(c.A,{value:"py",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-py",children:"def union(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:\n    return in0.unionAll(in1)\n"})})}),(0,r.jsx)(c.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:"object union {\n  def apply(spark: SparkSession, in0: DataFrame, in1: DataFrame): DataFrame =\n    in0.unionAll(in1)\n}\n"})})})]}),"\n",(0,r.jsxs)(a.h3,{id:"operation-type-intersect-all",children:["Operation Type: ",(0,r.jsx)(a.code,{children:"Intersect All"})]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Example usage of Set Operation - Intersect All",src:n(5130).A+"",width:"1822",height:"868"})}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(c.A,{value:"py",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-py",children:"def intersectAll(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:\n    return in0.intersectAll(in1)\n"})})}),(0,r.jsx)(c.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:"object intersectAll {\n  def apply(spark: SparkSession, in0: DataFrame, in1: DataFrame): DataFrame =\n    in0.intersectAll(in1)\n}\n"})})})]}),"\n",(0,r.jsxs)(a.h3,{id:"operation-type-except-all",children:["Operation Type: ",(0,r.jsx)(a.code,{children:"Except All"})]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Example usage of Set Operation - Except All",src:n(55891).A+"",width:"1812",height:"783"})}),"\n",(0,r.jsxs)(l.A,{children:[(0,r.jsx)(c.A,{value:"py",label:"Python",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-py",children:"def exceptAll(spark: SparkSession, in0: DataFrame, in1: DataFrame, ) -> DataFrame:\n    return in0.exceptAll(in1)\n"})})}),(0,r.jsx)(c.A,{value:"scala",label:"Scala",children:(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-scala",children:"object exceptAll {\n  def apply(spark: SparkSession, in0: DataFrame, in1: DataFrame): DataFrame =\n    in0.exceptAll(in1)\n}\n"})})})]})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},97071:(e,a,n)=>{n.d(a,{A:()=>r});n(96540);var t=n(74848);function r(e){return(0,t.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,t.jsxs)("span",{className:"badge badge-dependency",children:[e.python_package_name," ",e.python_package_version]})}),e.scala_package_name&&e.scala_package_version&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,t.jsxs)("span",{className:"badge badge-dependency",children:[e.scala_package_name," ",e.scala_package_version]})}),e.python_lib&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,t.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsPython ",e.python_lib]})}),e.scala_lib&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,t.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsScala ",e.scala_lib]})}),e.uc_single&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,t.jsxs)("span",{className:"badge badge-spark",children:["UC Dedicated Cluster ",e.uc_single]})}),e.uc_shared&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,t.jsxs)("span",{className:"badge badge-spark",children:["UC Standard Cluster ",e.uc_shared]})}),e.livy&&(0,t.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,t.jsxs)("span",{className:"badge badge-spark",children:["Livy ",e.livy]})}),(0,t.jsx)("br",{}),(0,t.jsx)("br",{})]})}}}]);