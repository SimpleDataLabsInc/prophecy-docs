"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[34910],{15680:(e,a,t)=>{t.d(a,{xA:()=>s,yg:()=>y});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),m=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},s=function(e){var a=m(e.components);return n.createElement(p.Provider,{value:a},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=m(t),c=r,y=g["".concat(p,".").concat(c)]||g[c]||u[c]||l;return t?n.createElement(y,i(i({ref:a},s),{},{components:t})):n.createElement(y,i({ref:a},s))}));function y(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[g]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=t[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},46434:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var n=t(58168),r=(t(96540),t(15680));const l={title:"DynamicReplace",id:"dynamic-replace",description:"Dynamically generate values depending on certain conditions",tags:["gems","transform"]},i=void 0,o={unversionedId:"Spark/gems/transform/dynamic-replace",id:"Spark/gems/transform/dynamic-replace",title:"DynamicReplace",description:"Dynamically generate values depending on certain conditions",source:"@site/docs/Spark/gems/transform/dynamic-replace.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/dynamic-replace",permalink:"/Spark/gems/transform/dynamic-replace",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"transform",permalink:"/tags/transform"}],version:"current",frontMatter:{title:"DynamicReplace",id:"dynamic-replace",description:"Dynamically generate values depending on certain conditions",tags:["gems","transform"]},sidebar:"mySidebar",previous:{title:"Deduplicate",permalink:"/Spark/gems/transform/deduplicate"},next:{title:"DynamicSelect",permalink:"/Spark/gems/transform/dynamic-select"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Define datasets",id:"define-datasets",level:3},{value:"Configure the gem",id:"configure-the-gem",level:3}],s={toc:m},g="wrapper";function u(e){let{components:a,...t}=e;return(0,r.yg)(g,(0,n.A)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h3",null,(0,r.yg)("span",{class:"badge"},"Spark Gem")),(0,r.yg)("p",null,"Use the DynamicReplace gem to replace a set of values with dynamically generated values depending on certain conditions."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"If you want to create new columns based on a set of conditions (rather than perform in-place replacement), you can use ",(0,r.yg)("a",{parentName:"p",href:"/Spark/functions/business-rules-engine/"},"business rules"),".")),(0,r.yg)("h2",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Field Name Field"),(0,r.yg)("td",{parentName:"tr",align:null},"Column from ",(0,r.yg)("strong",{parentName:"td"},"in1")," that contains field names from ",(0,r.yg)("strong",{parentName:"td"},"in0"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Boolean Expression Field"),(0,r.yg)("td",{parentName:"tr",align:null},"Column from ",(0,r.yg)("strong",{parentName:"td"},"in1")," that contains an expression that is used to evaluate the data from ",(0,r.yg)("strong",{parentName:"td"},"in0"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Output Value Field"),(0,r.yg)("td",{parentName:"tr",align:null},"Column from ",(0,r.yg)("strong",{parentName:"td"},"in1")," that contains replacement data. It can contain static values or expressions that act on the data from ",(0,r.yg)("strong",{parentName:"td"},"in0"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Values are Expressions"),(0,r.yg)("td",{parentName:"tr",align:null},"Checkbox to enable if the Output Value column contains expressions to define the replacement value.")))),(0,r.yg)("p",null,"If a value does not meet a condition, then it will be replaced with a ",(0,r.yg)("strong",{parentName:"p"},"null")," value."),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"Expressions must be in Spark SQL format.")),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"If you have a dataset with a numeric column and need to apply an upper limit to its values dynamically, you can use the DynamicReplace gem. In this example, any value in a certain column over 200,000 (like 250,000) will be replaced with the value 200,000."),(0,r.yg)("h3",{id:"define-datasets"},"Define datasets"),(0,r.yg)("p",null,"The DynamicReplace gem requires two inputs. These are:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"original dataset"),". This contains the target column(s) for replacement and is the ",(0,r.yg)("strong",{parentName:"li"},"in0")," of the DynamicReplace gem."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"parameters dataset"),". This contains the dynamic replacement parameters and is the ",(0,r.yg)("strong",{parentName:"li"},"in1")," of the DynamicReplace gem.")),(0,r.yg)("p",null,"The parameters dataset must follow a specific format to define how values should be replaced. Below is an example parameters table:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"original_column"),(0,r.yg)("th",{parentName:"tr",align:null},"condition"),(0,r.yg)("th",{parentName:"tr",align:null},"output_value"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sales"),(0,r.yg)("td",{parentName:"tr",align:null},"sales > 200000"),(0,r.yg)("td",{parentName:"tr",align:null},"200000")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sales"),(0,r.yg)("td",{parentName:"tr",align:null},"sales <= 200000"),(0,r.yg)("td",{parentName:"tr",align:null},"sales")))),(0,r.yg)("p",null,"Each row represents a condition that will be applied to a certain column. In this case, these conditions are:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"If the value of a sale is more than 200,000, it is replaced with 200,000."),(0,r.yg)("li",{parentName:"ul"},"If the value of a sale is less than or equal to 200,000, it remains unchanged.")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You can also add conditions for multiple columns in this parameters dataset if required by your use case.")),(0,r.yg)("h3",{id:"configure-the-gem"},"Configure the gem"),(0,r.yg)("p",null,"Once you have both datasets in your pipeline:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Add a DynamicReplace gem to the pipeline canvas."),(0,r.yg)("li",{parentName:"ol"},"Connect the inputs to the DynamicReplace gem."),(0,r.yg)("li",{parentName:"ol"},"Configure the DynamicReplace gem.")),(0,r.yg)("p",null,"For this example, you would configure the gem using the following values:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Value"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Field Name Field"),(0,r.yg)("td",{parentName:"tr",align:null},"original_column")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Boolean Expression Field"),(0,r.yg)("td",{parentName:"tr",align:null},"condition")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Output Value Field"),(0,r.yg)("td",{parentName:"tr",align:null},"output_value")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Values are Expressions"),(0,r.yg)("td",{parentName:"tr",align:null},"enabled")))))}u.isMDXComponent=!0}}]);