"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[38655],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>u});var n=a(96540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),g=o,u=d["".concat(l,".").concat(g)]||d[g]||m[g]||r;return a?n.createElement(u,i(i({ref:t},c),{},{components:a})):n.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},61756:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(58168),o=(a(96540),a(15680));const r={title:"Models",id:"Model",description:"SQL models define a single target table or view",sidebar_position:2,tags:["concepts","Models","sql","target"]},i=void 0,s={unversionedId:"concepts/project/Model",id:"concepts/project/Model",title:"Models",description:"SQL models define a single target table or view",source:"@site/docs/concepts/project/models.md",sourceDirName:"concepts/project",slug:"/concepts/project/Model",permalink:"/concepts/project/Model",draft:!1,tags:[{label:"concepts",permalink:"/tags/concepts"},{label:"Models",permalink:"/tags/models"},{label:"sql",permalink:"/tags/sql"},{label:"target",permalink:"/tags/target"}],version:"current",sidebarPosition:2,frontMatter:{title:"Models",id:"Model",description:"SQL models define a single target table or view",sidebar_position:2,tags:["concepts","Models","sql","target"]},sidebar:"mySidebar",previous:{title:"Pipelines",permalink:"/concepts/project/pipeline"},next:{title:"Gems",permalink:"/concepts/project/gems"}},l={},p=[{value:"Data modeling",id:"data-modeling",level:2},{value:"Model development",id:"model-development",level:2},{value:"Models vs pipelines",id:"models-vs-pipelines",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...r}=e;return(0,o.yg)(d,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Models are based on SQL-native code and use the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.getdbt.com/docs/build/models"},"dbt Core\u2122\ufe0f")," build system. Models define a single dataset, typically a table or view, and are useful for transforming data directly in a data warehouse or for existing dbt users. They are best suited for data analytics and transformation needs."),(0,o.yg)("p",null,"You can build models from a ",(0,o.yg)("strong",{parentName:"p"},"visual")," or ",(0,o.yg)("strong",{parentName:"p"},"code")," interface. When using the visual interface, model components are automatically compiled into SQL select statements that you can reuse and customize."),(0,o.yg)("admonition",{type:"note"},(0,o.yg)("p",{parentName:"admonition"},"Prophecy\u2019s visual interface supports SQL models only. If you\u2019d like to define Python models you can still use them within the code interface.")),(0,o.yg)("h2",{id:"data-modeling"},"Data modeling"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Data modeling")," refers to shaping your data from its raw state to its transformed final state. In Prophecy and dbt, data models are SQL statements that build a single table or view and enable better management. Data models incorporate step-by-step logic, compatible with Prophecy ",(0,o.yg)("a",{parentName:"p",href:"/concepts/project/gems"},"gems"),". Each model is stored as a SQL file on Git as open-source code. Models can also be reused through Prophecy ",(0,o.yg)("a",{parentName:"p",href:"/extensibility/package-hub/"},"packages"),"."),(0,o.yg)("h2",{id:"model-development"},"Model development"),(0,o.yg)("p",null,"In the ",(0,o.yg)("a",{parentName:"p",href:"/concepts/project/#project-editor"},"Project Editor")," of a SQL project, Prophecy displays models using a lineage view, a visual view, and a code view. As you develop your models, you can commit and release your changes via ",(0,o.yg)("a",{parentName:"p",href:"/concepts/git/"},"Git"),"."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Lineage view"),". When you open a SQL project, you first see the ",(0,o.yg)("strong",{parentName:"li"},"lineage")," view. The lineage provides a high-level view of the project's models with dependencies displayed from left to right.")),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"lineage-view",src:a(64214).A,width:"2880",height:"1726"})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Visual view"),". If you open a specific model, you are taken to the model visual canvas. The visual canvas shows each step needed to move from the referenced tables/seeds/models to the final model. ",(0,o.yg)("a",{parentName:"p",href:"/concepts/project/gems"},"Gems")," drive data transformations in Prophecy.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("strong",{parentName:"p"},"Code view"),". Any changes that you make in the visual view are automatically compiled into code (and vice-versa)."))),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"model-view",src:a(43762).A,width:"2880",height:"1726"})),(0,o.yg)("h2",{id:"models-vs-pipelines"},"Models vs pipelines"),(0,o.yg)("p",null,"If you\u2019re already familiar with Prophecy pipelines, models are very similar. The major difference is that each pipeline can create an arbitrary number of outputs, whereas a model only defines one output. Where pipelines can exist only within Spark-based projects, models can exist within SQL-based ones."),(0,o.yg)("h2",{id:"whats-next"},"What's next"),(0,o.yg)("p",null,"Visit the ",(0,o.yg)("a",{parentName:"p",href:"/SQL"},"SQL")," documentation to learn more. You can also get started with ",(0,o.yg)("a",{parentName:"p",href:"/getting-started/tutorials/sql-with-databricks"},"SQL on Databricks")," or ",(0,o.yg)("a",{parentName:"p",href:"/getting-started/tutorials/sql-with-snowflake"},"Snowflake"),"."))}m.isMDXComponent=!0},64214:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/lineage-view-0c1713925db518e6783a8b746bfb7dab.png"},43762:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/model-view-98e2d6a7d717d5d8f6c290f59bc1f208.png"}}]);