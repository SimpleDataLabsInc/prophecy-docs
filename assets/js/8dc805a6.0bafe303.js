"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[59486],{15680:(e,r,t)=>{t.d(r,{xA:()=>m,yg:()=>y});var a=t(96540);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=a.createContext({}),i=function(e){var r=a.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},m=function(e){var r=i(e.components);return a.createElement(p.Provider,{value:r},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},g=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=i(t),g=n,y=u["".concat(p,".").concat(g)]||u[g]||c[g]||o;return t?a.createElement(y,l(l({ref:r},m),{},{components:t})):a.createElement(y,l({ref:r},m))}));function y(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=g;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var i=2;i<o;i++)l[i]=t[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},38680:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=t(58168),n=(t(96540),t(15680));const o={title:"ColumnParser",id:"column-parser",description:"Parse XML or JSON inside a table",tags:["gems","transform","parse"]},l=void 0,s={unversionedId:"Spark/gems/transform/column-parser",id:"Spark/gems/transform/column-parser",title:"ColumnParser",description:"Parse XML or JSON inside a table",source:"@site/docs/Spark/gems/transform/column-parser.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/column-parser",permalink:"/Spark/gems/transform/column-parser",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"transform",permalink:"/tags/transform"},{label:"parse",permalink:"/tags/parse"}],version:"current",frontMatter:{title:"ColumnParser",id:"column-parser",description:"Parse XML or JSON inside a table",tags:["gems","transform","parse"]},sidebar:"mySidebar",previous:{title:"DynamicReplace",permalink:"/Spark/gems/transform/dynamic-replace"},next:{title:"BulkColumnExpressions",permalink:"/Spark/gems/transform/bulk-column-expressions"}},p={},i=[{value:"Parameters",id:"parameters",level:2},{value:"Output",id:"output",level:2}],m={toc:i},u="wrapper";function c(e){let{components:r,...o}=e;return(0,n.yg)(u,(0,a.A)({},m,o,{components:r,mdxType:"MDXLayout"}),(0,n.yg)("h3",null,(0,n.yg)("span",{class:"badge"},"Spark Gem")),(0,n.yg)("p",null,"The ColumnParser lets you parse XML or JSON that is included in a column of your table."),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Source Column Name"),(0,n.yg)("td",{parentName:"tr",align:null},"The name of the column that contains the XML or JSON records.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Parser Type"),(0,n.yg)("td",{parentName:"tr",align:null},"The format that you want to be parsed (XML or JSON).")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Parsing Method"),(0,n.yg)("td",{parentName:"tr",align:null},"The method that Prophecy will use to generate the schema of the output.")))),(0,n.yg)("p",null,"When you select a parsing method, you have three options:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse automatically.")," Prophecy infers the schema by reading the first 40 records."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse from sample record.")," Prophecy uses the schema that you provide in the sample record."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"Parse from schema.")," Prophecy uses the schema that you provide in the form of a schema struct.")),(0,n.yg)("h2",{id:"output"},"Output"),(0,n.yg)("p",null,"The schema of the ColumnParser gem output includes the parsed content as a ",(0,n.yg)("strong",{parentName:"p"},"struct")," data type, in addition to all of the input columns."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"New output struct",src:t(30348).A,width:"2620",height:"1508"})))}c.isMDXComponent=!0},30348:(e,r,t)=>{t.d(r,{A:()=>a});const a=t.p+"assets/images/new-output-struct-3ce5e9c0d51e7c9aa09b4c45cb8bf45c.png"}}]);