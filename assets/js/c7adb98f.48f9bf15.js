"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[23055],{15680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>s});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var g=r.createContext({}),p=function(e){var t=r.useContext(g),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(g.Provider,{value:t},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,g=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),u=n,s=m["".concat(g,".").concat(u)]||m[u]||y[u]||l;return a?r.createElement(s,i(i({ref:t},d),{},{components:a})):r.createElement(s,i({ref:t},d))}));function s(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var g in t)hasOwnProperty.call(t,g)&&(o[g]=t[g]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},29143:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=a(58168),n=(a(96540),a(15680));const l={title:"XML",id:"xml",description:"Parameters and properties to read from and write to XML files",tags:["gems","file","xml"]},i=void 0,o={unversionedId:"Spark/gems/source-target/file/xml",id:"Spark/gems/source-target/file/xml",title:"XML",description:"Parameters and properties to read from and write to XML files",source:"@site/docs/Spark/gems/source-target/file/xml.md",sourceDirName:"Spark/gems/source-target/file",slug:"/Spark/gems/source-target/file/xml",permalink:"/Spark/gems/source-target/file/xml",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"file",permalink:"/tags/file"},{label:"xml",permalink:"/tags/xml"}],version:"current",frontMatter:{title:"XML",id:"xml",description:"Parameters and properties to read from and write to XML files",tags:["gems","file","xml"]},sidebar:"mySidebar",previous:{title:"XLSX (Excel)",permalink:"/Spark/gems/source-target/file/xlsx"},next:{title:"BigQuery",permalink:"/Spark/gems/source-target/warehouse/bigquery"}},g={},p=[{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Supported parser modes",id:"supported-parser-modes",level:3},{value:"Target",id:"target",level:2},{value:"Target properties",id:"target-properties",level:3},{value:"Supported write modes",id:"supported-write-modes",level:3}],d={toc:p},m="wrapper";function y(e){let{components:t,...a}=e;return(0,n.yg)(m,(0,r.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"The XML (Extensible Markup Language) file type:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Transfers data between two systems that store the same data in different formats."),(0,n.yg)("li",{parentName:"ul"},"Supports structured data with nested elements.")),(0,n.yg)("h2",{id:"parameters"},"Parameters"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,n.yg)("th",{parentName:"tr",align:null},"Tab"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"Location"),(0,n.yg)("td",{parentName:"tr",align:null},"File path to read from or write to the XML file.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Properties"),(0,n.yg)("td",{parentName:"tr",align:null},"Schema to apply on the loaded data.",(0,n.yg)("br",null),"In the Source gem, you can define or edit the schema visually or in JSON code.",(0,n.yg)("br",null),"In the Target gem, you can view the schema visually or as JSON code.")))),(0,n.yg)("h2",{id:"source"},"Source"),(0,n.yg)("p",null,"The Source gem reads data from XML files and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"source-properties"},"Source properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Enforce Schema"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to use the schema you define."),(0,n.yg)("td",{parentName:"tr",align:null},"true")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Row Tag"),(0,n.yg)("td",{parentName:"tr",align:null},"Row tag of your XML file to treat as a row."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"_"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Exclude Attributes"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to exclude attributes in elements."),(0,n.yg)("td",{parentName:"tr",align:null},"false")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Null Value"),(0,n.yg)("td",{parentName:"tr",align:null},"Sets the string representation of a null value."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"null"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Parser Mode"),(0,n.yg)("td",{parentName:"tr",align:null},"How to handle corrupt data. ",(0,n.yg)("br",null),"For a list of the possible values, see ",(0,n.yg)("a",{parentName:"td",href:"#supported-parser-modes"},"Supported parser modes"),"."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"Permissive"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Attribute Prefix"),(0,n.yg)("td",{parentName:"tr",align:null},"Prefix for attributes to differentiate them from elements."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Value Tag"),(0,n.yg)("td",{parentName:"tr",align:null},"Tag to use for the value when there are attributes in the element with no child."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"_VALUE"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Ignore Surrounding Spaces"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to skip surrounding whitespaces."),(0,n.yg)("td",{parentName:"tr",align:null},"false")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Ignore Namespace"),(0,n.yg)("td",{parentName:"tr",align:null},"Whether to skip namespace prefixes on XML elements and attributes."),(0,n.yg)("td",{parentName:"tr",align:null},"false")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Timestamp Format"),(0,n.yg)("td",{parentName:"tr",align:null},"Sets the string that indicates a timestamp format."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"yyyy-MM-dd'T'HH:mm:ss[.SSS][XXX]"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Date Format"),(0,n.yg)("td",{parentName:"tr",align:null},"String that indicates a date format."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"yyyy-MM-dd"))))),(0,n.yg)("h3",{id:"supported-parser-modes"},"Supported parser modes"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Mode"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Permissive"),(0,n.yg)("td",{parentName:"tr",align:null},"Put the malformed string into the corrupt records column, and set the malformed fields to null.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Drop Malformed"),(0,n.yg)("td",{parentName:"tr",align:null},"Ignore the entire corrupted record. This mode is not supported in the CSV built-in functions.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Fail Fast"),(0,n.yg)("td",{parentName:"tr",align:null},"Throw an exception when it meets a corrupted record.")))),(0,n.yg)("h2",{id:"target"},"Target"),(0,n.yg)("p",null,"The Target gem writes data to XML files and allows you to optionally specify the following additional properties."),(0,n.yg)("h3",{id:"target-properties"},"Target properties"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Property name"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"),(0,n.yg)("th",{parentName:"tr",align:null},"Default"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Row Tag"),(0,n.yg)("td",{parentName:"tr",align:null},"Row tag of your XML file to treat as a row."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"_"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Root Tag"),(0,n.yg)("td",{parentName:"tr",align:null},"Root tag of your XML file."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"ROWS"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Null Value"),(0,n.yg)("td",{parentName:"tr",align:null},"Sets the string representation of a null value."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"null"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Attribute Prefix"),(0,n.yg)("td",{parentName:"tr",align:null},"Prefix for attributes to differentiate them from elements."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Value Tag"),(0,n.yg)("td",{parentName:"tr",align:null},"Tag to use for the value when there are attributes in the element with no child."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"_VALUE"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Timestamp Format"),(0,n.yg)("td",{parentName:"tr",align:null},"Sets the string that indicates a timestamp format."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"yyyy-MM-dd'T'HH:mm:ss[.SSS][XXX]"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Date Format"),(0,n.yg)("td",{parentName:"tr",align:null},"String that indicates a date format."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},"yyyy-MM-dd"))),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Write Mode"),(0,n.yg)("td",{parentName:"tr",align:null},"How to handle existing data. ",(0,n.yg)("br",null),"For a list of the possible values, see ",(0,n.yg)("a",{parentName:"td",href:"#supported-write-modes"},"Supported write modes"),"."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Partition Column"),(0,n.yg)("td",{parentName:"tr",align:null},"List of columns to partition the XML file by."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"Compression Codec"),(0,n.yg)("td",{parentName:"tr",align:null},"Compression codec when writing to the XML file. ",(0,n.yg)("br",null),"The XML file supports the following codecs: ",(0,n.yg)("inlineCode",{parentName:"td"},"none"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"bzip2"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"gzip"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"lz4"),", ",(0,n.yg)("inlineCode",{parentName:"td"},"snappy")," and ",(0,n.yg)("inlineCode",{parentName:"td"},"deflate"),"."),(0,n.yg)("td",{parentName:"tr",align:null},"None")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"XML Declaration"),(0,n.yg)("td",{parentName:"tr",align:null},"XML declaration content to write at the beginning of the XML file, before the root tag."),(0,n.yg)("td",{parentName:"tr",align:null},(0,n.yg)("inlineCode",{parentName:"td"},'version="1.0" encoding="UTF-8" standalone="yes"'))))),(0,n.yg)("h3",{id:"supported-write-modes"},"Supported write modes"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"Write mode"),(0,n.yg)("th",{parentName:"tr",align:null},"Description"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"error"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, throw an exception.")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"overwrite"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, overwrite the data with the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),".")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"append"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, append the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),".")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"ignore"),(0,n.yg)("td",{parentName:"tr",align:null},"If the data already exists, do nothing with the contents of the ",(0,n.yg)("inlineCode",{parentName:"td"},"DataFrame"),". ",(0,n.yg)("br",null),"This is similar to the ",(0,n.yg)("inlineCode",{parentName:"td"},"CREATE TABLE IF NOT EXISTS")," clause in SQL.")))))}y.isMDXComponent=!0}}]);