"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[4614],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>k});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(a),c=n,k=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return a?r.createElement(k,l(l({ref:t},m),{},{components:a})):r.createElement(k,l({ref:t},m))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},72360:(e,t,a)=>{a.d(t,{Z:()=>l});var r=a(67294),n=a(86010);const i={tabItem:"tabItem_OmH5"};function l(e){let{children:t,hidden:a,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(i.tabItem,l),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>u});var r=a(83117),n=a(67294),i=a(72389),l=a(67392),o=a(7094),p=a(12466),s=a(86010);const m={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function d(e){const{lazy:t,block:a,defaultValue:i,values:d,groupId:u,className:c}=e,k=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??k.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),b=(0,l.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===i?i:i??k.find((e=>e.props.default))?.props.value??k[0]?.props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:v}=(0,o.U)(),[y,N]=(0,n.useState)(f),w=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=u){const e=h[u];null!=e&&e!==y&&g.some((t=>t.value===e))&&N(e)}const D=e=>{const t=e.currentTarget,a=w.indexOf(t),r=g[a].value;r!==y&&(T(t),N(r),null!=u&&v(u,r))},R=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]||w[w.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,s.Z)("tabs-container",m.tabList)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},c)},g.map((e=>{let{value:t,label:a,attributes:i}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>w.push(e),onKeyDown:R,onFocus:D,onClick:D},i,{className:(0,s.Z)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,n.cloneElement)(k.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,i.Z)();return n.createElement(d,(0,r.Z)({key:String(t)},e))}},2013:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=a(83117),n=(a(67294),a(3905)),i=a(9877),l=a(72360);const o={title:"Repartition",id:"Repartition",description:"Repartition or coalesce a DataFrame",sidebar_position:2,tags:["gems","join-split","partition","repartition","coalesce"]},p=void 0,s={unversionedId:"low-code-spark/gems/join-split/Repartition",id:"low-code-spark/gems/join-split/Repartition",title:"Repartition",description:"Repartition or coalesce a DataFrame",source:"@site/docs/low-code-spark/gems/join-split/repartition.md",sourceDirName:"low-code-spark/gems/join-split",slug:"/low-code-spark/gems/join-split/Repartition",permalink:"/low-code-spark/gems/join-split/Repartition",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"join-split",permalink:"/tags/join-split"},{label:"partition",permalink:"/tags/partition"},{label:"repartition",permalink:"/tags/repartition"},{label:"coalesce",permalink:"/tags/coalesce"}],version:"current",sidebarPosition:2,frontMatter:{title:"Repartition",id:"Repartition",description:"Repartition or coalesce a DataFrame",sidebar_position:2,tags:["gems","join-split","partition","repartition","coalesce"]},sidebar:"defaultSidebar",previous:{title:"Join",permalink:"/low-code-spark/gems/join-split/join"},next:{title:"Row Distributor",permalink:"/low-code-spark/gems/join-split/row-distributor"}},m={},d=[{value:"Hash Repartitoning",id:"hash-repartitoning",level:2},{value:"Parameters",id:"hash-repartitoning",level:3},{value:"Generated Code",id:"hash-repartitoning",level:3},{value:"Random Repartitioning",id:"random-repartitioning",level:2},{value:"Parameters",id:"random-repartitioning",level:3},{value:"Generated Code",id:"random-repartitioning",level:3},{value:"Range Repartitoning",id:"range-repartitoning",level:2},{value:"Parameters",id:"range-repartitoning",level:3},{value:"Generated Code",id:"range-repartitoning",level:3},{value:"Coalesce",id:"coalesce",level:2},{value:"Parameters",id:"coalesce",level:3},{value:"Generated Code",id:"coalesce",level:3},{value:"Video demo",id:"video-demo",level:2}],u={toc:d},c="wrapper";function k(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This will repartition or coalesce the input DataFrame based on the specified configuration. There are four different repartitioning options:"),(0,n.kt)("h2",{id:"hash-repartitoning"},"Hash Repartitoning"),(0,n.kt)("p",null,"Repartitions the data evenly across various partitions based on the hash value of the specified key."),(0,n.kt)("h3",{id:"hash-repartitoning"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DataFrame"),(0,n.kt)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,n.kt)("td",{parentName:"tr",align:null},"True")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Overwrite default partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag to overwrite default partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"False")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Number of partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"Integer value specifying number of partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"False")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Repartition expression(s)"),(0,n.kt)("td",{parentName:"tr",align:null},"List of expressions to repartition by"),(0,n.kt)("td",{parentName:"tr",align:null},"True")))),(0,n.kt)("h3",{id:"hash-repartitoning"},"Generated Code"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'def hashRepartition(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartition(5, col("customer_id"))\n'))),(0,n.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'object hashRepartition {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartition(5, col("customer_id"))\n\n}\n')))),(0,n.kt)("h2",{id:"random-repartitioning"},"Random Repartitioning"),(0,n.kt)("p",null,"Repartitions without data distribution defined."),(0,n.kt)("h3",{id:"random-repartitioning"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"DataFrame"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Input DataFrame"),(0,n.kt)("td",{parentName:"tr",align:"left"},"True")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of partitions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Integer value specifying number of partitions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,n.kt)("h3",{id:"random-repartitioning"},"Generated Code"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"def randomRepartition(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartition(5)\n"))),(0,n.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"object randomRepartition {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartition(5)\n\n}\n")))),(0,n.kt)("h2",{id:"range-repartitoning"},"Range Repartitoning"),(0,n.kt)("p",null,"Repartitions the data with tuples having keys within the same range on the same worker."),(0,n.kt)("h3",{id:"range-repartitoning"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Required"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"DataFrame"),(0,n.kt)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,n.kt)("td",{parentName:"tr",align:null},"True")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Overwrite default partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"Flag to overwrite default partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"False")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Number of partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"Integer value specifying number of partitions"),(0,n.kt)("td",{parentName:"tr",align:null},"False")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Repartition expression(s) with sorting"),(0,n.kt)("td",{parentName:"tr",align:null},"List of expressions to repartition by with corresponding sorting order"),(0,n.kt)("td",{parentName:"tr",align:null},"True")))),(0,n.kt)("h3",{id:"range-repartitoning"},"Generated Code"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'def RepartitionByRange(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartitionByRange(5, col("customer_id").asc())\n'))),(0,n.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'object RepartitionByRange {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartitionByRange(5, col("customer_id").asc())\n\n}\n')))),(0,n.kt)("h2",{id:"coalesce"},"Coalesce"),(0,n.kt)("p",null,"Reduces the number of partitions without shuffling the dataset."),(0,n.kt)("h3",{id:"coalesce"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"DataFrame"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Input DataFrame"),(0,n.kt)("td",{parentName:"tr",align:"left"},"True")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Number of partitions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"Integer value specifying number of partitions"),(0,n.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,n.kt)("h3",{id:"coalesce"},"Generated Code"),(0,n.kt)(i.Z,{mdxType:"Tabs"},(0,n.kt)(l.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},"def Coalesce(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.coalesce(5)\n"))),(0,n.kt)(l.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"object Coalesce {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.coalesce(5)\n\n}\n")))),(0,n.kt)("h2",{id:"video-demo"},"Video demo"),(0,n.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,n.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,n.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/174014498-277e1037-8634-4752-a4f1-e0e1aae66659.mp4",title:"Repartition",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))))}k.isMDXComponent=!0}}]);