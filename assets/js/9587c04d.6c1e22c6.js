"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[4614],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(a),c=n,g=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return a?r.createElement(g,l(l({ref:t},u),{},{components:a})):r.createElement(g,l({ref:t},u))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2360:function(e,t,a){a.d(t,{Z:function(){return l}});var r=a(7294),n=a(6010),i="tabItem_OmH5";function l(e){var t=e.children,a=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(i,l),hidden:a},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return c}});var r=a(7462),n=a(7294),i=a(2389),l=a(7392),o=a(7094),p=a(2466),s=a(6010),u="tabList_uSqn",d="tabItem_LplD";function m(e){var t,a,i,m=e.lazy,c=e.block,g=e.defaultValue,k=e.values,f=e.groupId,b=e.className,v=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:v.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,l.l)(h,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===g?g:null!=(t=null!=g?g:null==(a=v.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(i=v[0])?void 0:i.props.value;if(null!==N&&!h.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.U)(),T=w.tabGroupChoices,D=w.setTabGroupChoices,R=(0,n.useState)(N),F=R[0],j=R[1],O=[],x=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var P=T[f];null!=P&&P!==F&&h.some((function(e){return e.value===P}))&&j(P)}var S=function(e){var t=e.currentTarget,a=O.indexOf(t),r=h[a].value;r!==F&&(x(t),j(r),null!=f&&D(f,r))},I=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r=O.indexOf(e.currentTarget)+1;a=O[r]||O[0];break;case"ArrowLeft":var n=O.indexOf(e.currentTarget)-1;a=O[n]||O[O.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,s.Z)("tabs-container",u)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":c},b)},h.map((function(e){var t=e.value,a=e.label,i=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:F===t?0:-1,"aria-selected":F===t,key:t,ref:function(e){return O.push(e)},onKeyDown:I,onFocus:S,onClick:S},i,{className:(0,s.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":F===t})}),null!=a?a:t)}))),m?(0,n.cloneElement)(v.filter((function(e){return e.props.value===F}))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},v.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==F})}))))}function c(e){var t=(0,i.Z)();return n.createElement(m,(0,r.Z)({key:String(t)},e))}},2013:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),l=a(9877),o=a(2360),p=["components"],s={title:"Repartition",id:"Repartition",description:"Repartition or coalesce a DataFrame",sidebar_position:2,tags:["gems","join-split","partition","repartition","coalesce"]},u=void 0,d={unversionedId:"low-code-spark/gems/join-split/Repartition",id:"low-code-spark/gems/join-split/Repartition",title:"Repartition",description:"Repartition or coalesce a DataFrame",source:"@site/docs/low-code-spark/gems/join-split/repartition.md",sourceDirName:"low-code-spark/gems/join-split",slug:"/low-code-spark/gems/join-split/Repartition",permalink:"/low-code-spark/gems/join-split/Repartition",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"join-split",permalink:"/tags/join-split"},{label:"partition",permalink:"/tags/partition"},{label:"repartition",permalink:"/tags/repartition"},{label:"coalesce",permalink:"/tags/coalesce"}],version:"current",sidebarPosition:2,frontMatter:{title:"Repartition",id:"Repartition",description:"Repartition or coalesce a DataFrame",sidebar_position:2,tags:["gems","join-split","partition","repartition","coalesce"]},sidebar:"defaultSidebar",previous:{title:"Join",permalink:"/low-code-spark/gems/join-split/join"},next:{title:"Row Distributor",permalink:"/low-code-spark/gems/join-split/row-distributor"}},m={},c=[{value:"Hash Repartitoning",id:"hash-repartitoning",level:2},{value:"Parameters",id:"hash-repartitoning",level:3},{value:"Generated Code",id:"hash-repartitoning",level:3},{value:"Random Repartitioning",id:"random-repartitioning",level:2},{value:"Parameters",id:"random-repartitioning",level:3},{value:"Generated Code",id:"random-repartitioning",level:3},{value:"Range Repartitoning",id:"range-repartitoning",level:2},{value:"Parameters",id:"range-repartitoning",level:3},{value:"Generated Code",id:"range-repartitoning",level:3},{value:"Coalesce",id:"coalesce",level:2},{value:"Parameters",id:"coalesce",level:3},{value:"Generated Code",id:"coalesce",level:3},{value:"Video demo",id:"video-demo",level:2}],g={toc:c};function k(e){var t=e.components,a=(0,n.Z)(e,p);return(0,i.kt)("wrapper",(0,r.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This will repartition or coalesce the input DataFrame based on the specified configuration. There are four different repartitioning options:"),(0,i.kt)("h2",{id:"hash-repartitoning"},"Hash Repartitoning"),(0,i.kt)("p",null,"Repartitions the data evenly across various partitions based on the hash value of the specified key."),(0,i.kt)("h3",{id:"hash-repartitoning"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DataFrame"),(0,i.kt)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,i.kt)("td",{parentName:"tr",align:null},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Overwrite default partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"Flag to overwrite default partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"Integer value specifying number of partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Repartition expression(s)"),(0,i.kt)("td",{parentName:"tr",align:null},"List of expressions to repartition by"),(0,i.kt)("td",{parentName:"tr",align:null},"True")))),(0,i.kt)("h3",{id:"hash-repartitoning"},"Generated Code"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def hashRepartition(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartition(5, col("customer_id"))\n'))),(0,i.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object hashRepartition {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartition(5, col("customer_id"))\n\n}\n')))),(0,i.kt)("h2",{id:"random-repartitioning"},"Random Repartitioning"),(0,i.kt)("p",null,"Repartitions without data distribution defined."),(0,i.kt)("h3",{id:"random-repartitioning"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"DataFrame"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Input DataFrame"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Number of partitions"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Integer value specifying number of partitions"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,i.kt)("h3",{id:"random-repartitioning"},"Generated Code"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def randomRepartition(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartition(5)\n"))),(0,i.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object randomRepartition {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartition(5)\n\n}\n")))),(0,i.kt)("h2",{id:"range-repartitoning"},"Range Repartitoning"),(0,i.kt)("p",null,"Repartitions the data with tuples having keys within the same range on the same worker."),(0,i.kt)("h3",{id:"range-repartitoning"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DataFrame"),(0,i.kt)("td",{parentName:"tr",align:null},"Input DataFrame"),(0,i.kt)("td",{parentName:"tr",align:null},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Overwrite default partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"Flag to overwrite default partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"Integer value specifying number of partitions"),(0,i.kt)("td",{parentName:"tr",align:null},"False")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Repartition expression(s) with sorting"),(0,i.kt)("td",{parentName:"tr",align:null},"List of expressions to repartition by with corresponding sorting order"),(0,i.kt)("td",{parentName:"tr",align:null},"True")))),(0,i.kt)("h3",{id:"range-repartitoning"},"Generated Code"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'def RepartitionByRange(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.repartitionByRange(5, col("customer_id").asc())\n'))),(0,i.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object RepartitionByRange {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.repartitionByRange(5, col("customer_id").asc())\n\n}\n')))),(0,i.kt)("h2",{id:"coalesce"},"Coalesce"),(0,i.kt)("p",null,"Reduces the number of partitions without shuffling the dataset."),(0,i.kt)("h3",{id:"coalesce"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"DataFrame"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Input DataFrame"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"Number of partitions"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Integer value specifying number of partitions"),(0,i.kt)("td",{parentName:"tr",align:"left"},"True")))),(0,i.kt)("h3",{id:"coalesce"},"Generated Code"),(0,i.kt)(l.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"def Coalesce(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.coalesce(5)\n"))),(0,i.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Coalesce {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.coalesce(5)\n\n}\n")))),(0,i.kt)("h2",{id:"video-demo"},"Video demo"),(0,i.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,i.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,i.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/174014498-277e1037-8634-4752-a4f1-e0e1aae66659.mp4",title:"Repartition",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))))}k.isMDXComponent=!0}}]);