"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[426],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},53777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:1,id:"December_2023",description:"Release notes for December",title:"December 2023",tags:["release notes","changelog"]},o=void 0,s={unversionedId:"release_notes/2023/December_2023",id:"release_notes/2023/December_2023",title:"December 2023",description:"Release notes for December",source:"@site/docs/release_notes/2023/dec2023.md",sourceDirName:"release_notes/2023",slug:"/release_notes/2023/December_2023",permalink:"/release_notes/2023/December_2023",draft:!1,tags:[{label:"release notes",permalink:"/tags/release-notes"},{label:"changelog",permalink:"/tags/changelog"}],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"December_2023",description:"Release notes for December",title:"December 2023",tags:["release notes","changelog"]},sidebar:"defaultSidebar",previous:{title:"January 2024",permalink:"/release_notes/2024/Jan_2024"},next:{title:"November 2023",permalink:"/release_notes/2023/November_2023"}},l={},c=[{value:"3.2.7 (December 26, 2023)",id:"327-december-26-2023",level:2},{value:"Features",id:"FeaturesRelease327",level:3},{value:"3.2.6 (December 18, 2023)",id:"326-december-18-2023",level:2},{value:"Features",id:"FeaturesRelease326",level:3},{value:"Gem Dependencies",id:"gem-dependencies",level:4},{value:"Build Template configurable by Admin",id:"build-template-configurable-by-admin",level:4},{value:"Minor Improvements",id:"minor-improvements",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"327-december-26-2023"},"3.2.7 (December 26, 2023)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Prophecy Python libs version: 1.7.3"),(0,i.kt)("li",{parentName:"ul"},"Prophecy Scala libs version: 7.1.46")),(0,i.kt)("h3",{id:"FeaturesRelease327"},"Features"),(0,i.kt)("h4",{id:""}),(0,i.kt)("h2",{id:"326-december-18-2023"},"3.2.6 (December 18, 2023)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Prophecy Python libs version: 1.7.3"),(0,i.kt)("li",{parentName:"ul"},"Prophecy Scala libs version: 7.1.46")),(0,i.kt)("h3",{id:"FeaturesRelease326"},"Features"),(0,i.kt)("h4",{id:"gem-dependencies"},"Gem Dependencies"),(0,i.kt)("p",null,"In our latest 3.2 Release, we've empowered users with the ability to build their own Gems. This allows you to incorporate custom logic essential for your specific needs directly into the Gem.\nFrequently, this involves utilizing custom dependencies within the Gems for tasks such as validations and transformations.\nWith this release, we've introduced a feature that enables you to seamlessly integrate any custom Pypi or Maven dependency into a Gem during the build process.\nThis dependency is also automatically added into the Pipeline using the Gem whenever needed. Stay tuned for more comprehensive documentation on this enhancement."),(0,i.kt)("h4",{id:"build-template-configurable-by-admin"},"Build Template configurable by Admin"),(0,i.kt)("p",null,"Cluster administrators now have the capability to modify the build template for their organization by navigating to the Admin settings. By accessing the 'Build System' tab under the 'Admin' section, administrators can update the template, ensuring that any newly created projects will adopt the latest template. Additionally, existing projects will transition to the updated template, provided the template hasn't been customized."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"build_templates",src:n(96112).Z,width:"2880",height:"1726"})),(0,i.kt)("h4",{id:"minor-improvements"},"Minor Improvements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Task Group Support in Airflow"),": We have added support for Taskgroup in Low code Airflow. Airflow task groups are a tool to organize tasks into groups within your DAGs. This is useful to organize complicated DAGs by visually grouping tasks that belong together. This is also useful when you have to apply some ",(0,i.kt)("inlineCode",{parentName:"li"},"default_args")," to sets of tasks, instead of at the DAG level."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"AutoLayout Improvement"),": In this release, we've introduced support for a layer-based auto-layout algorithm to enhance the representation of pipelines, especially those with intricate logic involving numerous cross connections within the gems. Users now have the flexibility to choose between two auto-layout options: ",(0,i.kt)("inlineCode",{parentName:"li"},"Simple DAG Layout")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"layer-based Layout"),". This allows for customization based on individual preferences and specific requirements when arranging and visualizing complex structures."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pipeline Config Names in Job IDE"),": Users can now utilize the Alt key to reveal the name of the config instance for a Pipeline Gem within a Job. This enhancement simplifies the process of identifying which pipelines are associated with specific configurations, providing a more straightforward way to view this information in the Job interface."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Remove Default Project Dependencies"),": Initially, Prophecy includes default project dependencies to support common Spark transformations and integration with popular Data Warehouses. In this release, users now have the ability to delete these default dependencies, giving them greater control over the selection of Gems available to all users by default in a project.")))}d.isMDXComponent=!0},96112:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/3.2.6_build_template-ccde5d03d3e8c1e1736d56e88cf3d87d.png"}}]);