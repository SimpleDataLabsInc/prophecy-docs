"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[18755],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>y});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=i(a),d=r,y=p["".concat(c,".").concat(d)]||p[d]||m[d]||l;return a?n.createElement(y,s(s({ref:t},u),{},{components:a})):n.createElement(y,s({ref:t},u))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var i=2;i<l;i++)s[i]=a[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>s});var n=a(96540),r=a(20053);const l={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,s),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>E});var n=a(58168),r=a(96540),l=a(20053),s=a(23104),o=a(56347),c=a(57485),i=a(31682),u=a(89466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,i.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,c.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[s,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[c,i]=y({queryString:a,groupId:n}),[p,g]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,u.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),b=(()=>{const e=c??p;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&o(b)}),[b]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),i(e),g(e)}),[i,g,l]),tabValues:l}}var b=a(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:a,selectedValue:o,selectValue:c,tabValues:i}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.a_)(),m=e=>{const t=e.currentTarget,a=u.indexOf(t),n=i[a].value;n!==o&&(p(t),c(n))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},i.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},s,{className:(0,l.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":o===t})}),a??t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=g(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(h,(0,n.A)({},e,t)),r.createElement(v,(0,n.A)({},e,t)))}function E(e){const t=(0,b.A)();return r.createElement(k,(0,n.A)({key:String(t)},e))}},50728:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540);function r(e){return n.createElement("div",null,e.python_package_name&&e.python_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.python_package_name),n.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.scala_package_name),n.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsPython"),n.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsScala"),n.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Single Cluster"),n.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Shared"),n.createElement("span",{className:"right"},e.uc_shared))),e.livy&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Livy"),n.createElement("span",{className:"right"},e.livy))),n.createElement("br",null),n.createElement("br",null))}},653:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>c,metadata:()=>u,toc:()=>m});var n=a(58168),r=(a(96540),a(15680)),l=a(50728),s=a(11470),o=a(19365);const c={title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once",tags:["gems","type","columns"]},i=void 0,u={unversionedId:"Spark/gems/transform/bulk-column-expressions",id:"Spark/gems/transform/bulk-column-expressions",title:"BulkColumnExpressions",description:"Change the data type of multiple columns at once",source:"@site/docs/Spark/gems/transform/bulk-column-expressions.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/bulk-column-expressions",permalink:"/Spark/gems/transform/bulk-column-expressions",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"type",permalink:"/tags/type"},{label:"columns",permalink:"/tags/columns"}],version:"current",frontMatter:{title:"BulkColumnExpressions",id:"bulk-column-expressions",description:"Change the data type of multiple columns at once",tags:["gems","type","columns"]},sidebar:"mySidebar",previous:{title:"Aggregate",permalink:"/Spark/gems/transform/aggregate"},next:{title:"BulkColumnRename",permalink:"/Spark/gems/transform/bulk-column-rename"}},p={},m=[{value:"Parameters",id:"parameters",level:2},{value:"Example",id:"example",level:2},{value:"Example code",id:"example-code",level:2}],d={toc:m},y="wrapper";function g(e){let{components:t,...a}=e;return(0,r.yg)(y,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{python_package_name:"",python_package_version:"",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.1.9+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.0.1+",mdxType:"Requirements"}),(0,r.yg)("p",null,"The BulkColumnExpressions gem primarily lets you cast or change the data type of multiple columns at once. It provides additional functionality, including:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Adding a prefix or suffix to selected columns."),(0,r.yg)("li",{parentName:"ul"},"Applying a custom expression to selected columns.")),(0,r.yg)("h2",{id:"parameters"},"Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Data Type of the columns to do operations on"),(0,r.yg)("td",{parentName:"tr",align:null},"The data type of columns to select.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Selected Columns"),(0,r.yg)("td",{parentName:"tr",align:null},"The columns on which to apply transformations.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Change output column name"),(0,r.yg)("td",{parentName:"tr",align:null},"An option to add a prefix or suffix to the selected column names.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Change output column type"),(0,r.yg)("td",{parentName:"tr",align:null},"The data type that the columns will be transformed into.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Output Expression"),(0,r.yg)("td",{parentName:"tr",align:null},"A Spark SQL expression that can be applied to the selected columns. This field is required. If you only want to select the column, use ",(0,r.yg)("inlineCode",{parentName:"td"},"column_value")," as the expression.")))),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"Assume you have some columns in a table that represent zero-based indices and are stored as long data types. You want them to represent one-based indices and be stored as integers to optimize memory use."),(0,r.yg)("p",null,"Using the BulkColumnExpressions gem, you can:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Filter your columns by long data types."),(0,r.yg)("li",{parentName:"ul"},"Select the columns you wish to transform."),(0,r.yg)("li",{parentName:"ul"},"Cast the output column(s) to be integers."),(0,r.yg)("li",{parentName:"ul"},"Include ",(0,r.yg)("inlineCode",{parentName:"li"},"column_value + 1")," in the expression field to shift the indices.")),(0,r.yg)("h2",{id:"example-code"},"Example code"),(0,r.yg)(s.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def bulk_column_casting(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.select(\n        *(\n          [expr("`customer_id`").alias("str_customer_id").cast(StringType())]\n          + [col("`" + colName + "`") for colName in sorted(set(in0.columns) - {"customer_id"})]\n          + []\n        )\n    )\n'))),(0,r.yg)(o.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'object bulk_column_expressions {\n  def apply(context: Context, in: DataFrame): DataFrame = {\n    var allExpressions = List(\n      expr(\n        "column_value"\n          .replace("column_value", "`status`")\n          .replace("column_name",  "\'status\'")\n      ).as("status").cast(StringType)\n    ) ++ (in.columns.toSet -- List("status").toSet).map(columnName =>\n      col("`" + columnName + "`")\n    )\n    in.select(allExpressions: _*)\n  }\n}\n')))))}g.isMDXComponent=!0}}]);