"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[51275],{28453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>l});var a=r(96540);const s={},n=a.createContext(s);function i(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(n.Provider,{value:t},e.children)}},37244:(e,t,r)=>{r.d(t,{A:()=>w});var a=r(96540),s=r(18215),n=r(44319),i=r(56347),l=r(94280),d=r(73024),o=r(58417),c=r(44031);function h(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:t,children:r}=e;return(0,a.useMemo)(()=>{const e=t??function(e){return h(e).map(({props:{value:e,label:t,attributes:r,default:a}})=>({value:e,label:t,attributes:r,default:a}))}(r);return function(e){const t=(0,o.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,r])}function u({value:e,tabValues:t}){return t.some(t=>t.value===e)}function x({queryString:e=!1,groupId:t}){const r=(0,i.W6)(),s=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,d.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const t=new URLSearchParams(r.location.search);t.set(s,e),r.replace({...r.location,search:t.toString()})},[s,r])]}function j(e){const{defaultValue:t,queryString:r=!1,groupId:s}=e,n=p(e),[i,d]=(0,a.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=t.find(e=>e.default)??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:n})),[o,h]=x({queryString:r,groupId:s}),[j,m]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,s]=(0,c.Dv)(t);return[r,(0,a.useCallback)(e=>{t&&s.set(e)},[t,s])]}({groupId:s}),b=(()=>{const e=o??j;return u({value:e,tabValues:n})?e:null})();(0,l.A)(()=>{b&&d(b)},[b]);return{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!u({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),m(e)},[h,m,n]),tabValues:n}}var m=r(46916);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(74848);function f({className:e,block:t,selectedValue:r,selectValue:a,tabValues:i}){const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,n.a_)(),o=e=>{const t=e.currentTarget,s=l.indexOf(t),n=i[s].value;n!==r&&(d(t),a(n))},c=e=>{let t=null;switch(e.key){case"Enter":o(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;t=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;t=l[r]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{l.push(e)},onKeyDown:c,onClick:o,...a,className:(0,s.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":r===e}),children:t??e},e))})}function v({lazy:e,children:t,selectedValue:r}){const n=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=n.find(e=>e.props.value===r);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:n.map((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))})}function y(e){const t=j(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",b.tabList),children:[(0,g.jsx)(f,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function w(e){const t=(0,m.A)();return(0,g.jsx)(y,{...e,children:h(e.children)},String(t))}},44714:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>x,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"Spark/gems/source-target/catalog-table/delta","title":"Delta Table","description":"Read from or write to tables managed by a Delta table metastore","source":"@site/docs/Spark/gems/source-target/catalog-table/delta.md","sourceDirName":"Spark/gems/source-target/catalog-table","slug":"/engineers/delta-table","permalink":"/engineers/delta-table","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"catalog","permalink":"/tags/catalog"},{"inline":true,"label":"delta","permalink":"/tags/delta"}],"version":"current","frontMatter":{"title":"Delta Table","id":"delta","slug":"/engineers/delta-table","description":"Read from or write to tables managed by a Delta table metastore","tags":["gems","catalog","delta"]},"sidebar":"mySidebar","previous":{"title":"XML","permalink":"/engineers/xml"},"next":{"title":"Hive Table","permalink":"/engineers/hive-table"}}');var s=r(74848),n=r(28453),i=r(97071),l=r(37244),d=r(56778);const o={title:"Delta Table",id:"delta",slug:"/engineers/delta-table",description:"Read from or write to tables managed by a Delta table metastore",tags:["gems","catalog","delta"]},c=void 0,h={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Source",id:"source",level:2},{value:"Source properties",id:"source-properties",level:3},{value:"Source example",id:"source-example",level:3},{value:"Compiled code",id:"source-code",level:3},{value:"Without filter predicate",id:"without-filter-predicate",level:4},{value:"With filter predicate",id:"with-filter-predicate",level:4},{value:"Target",id:"target",level:2},{value:"Target properties",id:"target-properties",level:3},{value:"Supported write modes",id:"supported-write-modes",level:3},{value:"Target example",id:"target-example",level:3},{value:"Compiled code",id:"target-code",level:3}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"Not Supported"}),"\n",(0,s.jsx)(t.p,{children:"Reads from and writes to Delta tables that your execution environment's Metadata catalog manages."}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(t.p,{children:"Before you specify parameters and properties, select the Delta table type:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Open the Source or Target gem configuration."}),"\n",(0,s.jsxs)(t.li,{children:["On the ",(0,s.jsx)(t.strong,{children:"Type & Format"})," page, select ",(0,s.jsx)(t.strong,{children:"Catalog Table"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["On the ",(0,s.jsx)(t.strong,{children:"Properties"})," page, set the ",(0,s.jsx)(t.strong,{children:"provider"})," property to ",(0,s.jsx)(t.code,{children:"delta"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameter"}),(0,s.jsx)(t.th,{children:"Tab"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Use Unity Catalog"}),(0,s.jsx)(t.td,{children:"Location"}),(0,s.jsx)(t.td,{children:"Whether to use a Unity catalog."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Catalog"}),(0,s.jsx)(t.td,{children:"Location"}),(0,s.jsx)(t.td,{children:"If you use a unity catalog, specify which catalog to use."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Database"}),(0,s.jsx)(t.td,{children:"Location"}),(0,s.jsx)(t.td,{children:"Name of the database to connect to."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Table"}),(0,s.jsx)(t.td,{children:"Location"}),(0,s.jsx)(t.td,{children:"Name of the table to connect to."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Use file path"}),(0,s.jsx)(t.td,{children:"Location"}),(0,s.jsx)(t.td,{children:"Whether to use a custom file path to store underlying files in the Target gem."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Schema"}),(0,s.jsx)(t.td,{children:"Properties"}),(0,s.jsxs)(t.td,{children:["Schema to apply on the loaded data.",(0,s.jsx)("br",{}),"In the Source gem, you can define or edit the schema visually or in JSON code.",(0,s.jsx)("br",{}),"In the Target gem, you can view the schema visually or as JSON code."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"source",children:"Source"}),"\n",(0,s.jsx)(t.p,{children:"The Source gem reads data from Delta tables and allows you to optionally specify the following additional properties."}),"\n",(0,s.jsx)(t.h3,{id:"source-properties",children:"Source properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Properties"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Description"}),(0,s.jsx)(t.td,{children:"Description of your dataset."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Provider"}),(0,s.jsxs)(t.td,{children:["Provider to use. ",(0,s.jsxs)(t.strong,{children:["You must set this to ",(0,s.jsx)(t.code,{children:"delta"}),"."]})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"delta"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Filter Predicate"}),(0,s.jsx)(t.td,{children:"Where clause to filter the table by."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Read timestamp"}),(0,s.jsxs)(t.td,{children:["Time travel in milliseconds to a specific timestamp. ",(0,s.jsx)("br",{}),"This value should be between the first commit timestamp and the latest commit timestamp in the table."]}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Read version"}),(0,s.jsx)(t.td,{children:"Time travel to a specific version of the table."}),(0,s.jsx)(t.td,{children:"None"})]})]})]}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["You can only select ",(0,s.jsx)(t.code,{children:"Read Timestamp"})," or ",(0,s.jsx)(t.code,{children:"Read Version"}),", not both."]}),(0,s.jsx)(t.p,{children:"If you don't use a time travel option, the Source gem fetches the most recent version of each row by default."})]}),"\n",(0,s.jsxs)(t.p,{children:["To learn more about Delta time travel and its use cases, see ",(0,s.jsx)(t.a,{href:"https://databricks.com/blog/2019/02/04/introducing-delta-time-travel-for-large-scale-data-lakes.html",children:"Introducing Delta Time Travel for Large Scale Data Lakes"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"source-example",children:"Source example"}),"\n",(0,s.jsx)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"},children:(0,s.jsx)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"},children:(0,s.jsx)("iframe",{src:"https://user-images.githubusercontent.com/103921419/173573367-057f47b0-c56c-4ffd-9ceb-27bc34444b41.mp4",title:"Catalog delta source",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"})})}),"\n",(0,s.jsx)(t.h3,{id:"source-code",children:"Compiled code"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["To see the compiled code of your project, ",(0,s.jsx)(t.a,{href:"/engineers/pipelines#project-editor",children:"switch to the Code view"})," in the project header."]})}),"\n",(0,s.jsx)(t.h4,{id:"without-filter-predicate",children:"Without filter predicate"}),"\n","\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(d.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'def Source(spark: SparkSession) -> DataFrame:\n    return spark.read.table(f"test_db.test_table")\n'})})}),(0,s.jsx)(d.A,{value:"scala",label:"Scala",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'object Source {\n\n  def apply(spark: SparkSession): DataFrame = {\n    spark.read.table("test_db.test_table")\n  }\n\n}\n'})})})]}),"\n",(0,s.jsx)(t.h4,{id:"with-filter-predicate",children:"With filter predicate"}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(d.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'def Source(spark: SparkSession) -> DataFrame:\n    return spark.sql("SELECT * FROM test_db.test_table WHERE col > 10")\n'})})}),(0,s.jsx)(d.A,{value:"scala",label:"Scala",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'object Source {\n\n  def apply(spark: SparkSession): DataFrame =\n    spark.sql("SELECT * FROM test_db.test_table WHERE col > 10")\n\n}\n'})})})]}),"\n",(0,s.jsx)(t.h2,{id:"target",children:"Target"}),"\n",(0,s.jsx)(t.p,{children:"The Target gem writes data to Delta tables and allows you to optionally specify the following additional properties."}),"\n",(0,s.jsx)(t.h3,{id:"target-properties",children:"Target properties"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"}),(0,s.jsx)(t.th,{children:"Default"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Description"}),(0,s.jsx)(t.td,{children:"Description of your dataset."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Provider"}),(0,s.jsxs)(t.td,{children:["Provider to use. ",(0,s.jsxs)(t.strong,{children:["You must set this to ",(0,s.jsx)(t.code,{children:"delta"}),"."]})]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"delta"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Write Mode"}),(0,s.jsxs)(t.td,{children:["How to handle existing data. For a list of the possible values, see ",(0,s.jsx)(t.a,{href:"#supported-write-modes",children:"Supported write modes"}),"."]}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"error"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Use insert into"}),(0,s.jsxs)(t.td,{children:["Whether to use the ",(0,s.jsx)(t.code,{children:"insertInto()"})," method to write instead of the ",(0,s.jsx)(t.code,{children:"save()"})," method."]}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Overwrite table schema"}),(0,s.jsx)(t.td,{children:"Whether to overwrite the schema of the Delta table."}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Merge DataFrame schema into table schema"}),(0,s.jsxs)(t.td,{children:["Whether to automatically add columns that are present in the ",(0,s.jsx)(t.code,{children:"DataFrame"})," but not in the Target table to the end of the schema as part of a write transaction."]}),(0,s.jsx)(t.td,{children:"false"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Partition Columns"}),(0,s.jsx)(t.td,{children:"List of columns to partition the Delta table table by."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Overwrite partition predicate"}),(0,s.jsx)(t.td,{children:"Selectively overwrite only the data that satisfies the given where clause expression."}),(0,s.jsx)(t.td,{children:"None"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Optimize write"}),(0,s.jsx)(t.td,{children:"Whether to optimize Spark partition sizes based on the actual data."}),(0,s.jsx)(t.td,{children:"false"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"supported-write-modes",children:"Supported write modes"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Write mode"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"overwrite"}),(0,s.jsxs)(t.td,{children:["If the data already exists, overwrite the data with the contents of the ",(0,s.jsx)(t.code,{children:"DataFrame"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"error"}),(0,s.jsx)(t.td,{children:"If the data already exists, throw an exception."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"append"}),(0,s.jsxs)(t.td,{children:["If the data already exists, append the contents of the ",(0,s.jsx)(t.code,{children:"DataFrame"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"ignore"}),(0,s.jsxs)(t.td,{children:["If the data already exists, do nothing with the contents of the ",(0,s.jsx)(t.code,{children:"DataFrame"}),". ",(0,s.jsx)("br",{}),"This is similar to the ",(0,s.jsx)(t.code,{children:"CREATE TABLE IF NOT EXISTS"})," clause in SQL."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"merge"}),(0,s.jsxs)(t.td,{children:["Use the Delta ",(0,s.jsx)(t.code,{children:"merge"})," command to insert, delete and update data. For more information, see ",(0,s.jsx)(t.a,{href:"/engineers/delta/#delta-merge",children:"Delta MERGE"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"scd2 merge"}),(0,s.jsxs)(t.td,{children:["Store and manage the current and historical data over time. For more information, see ",(0,s.jsx)(t.a,{href:"/engineers/delta/#delta-merge",children:"Delta MERGE"}),"."]})]})]})]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["These ",(0,s.jsx)(t.code,{children:"overwrite"}),", ",(0,s.jsx)(t.code,{children:"append"}),", ",(0,s.jsx)(t.code,{children:"ignore"}),", and ",(0,s.jsx)(t.code,{children:"error"})," write modes operate the same way as with other native Spark-supported formats such as Parquet."]})}),"\n",(0,s.jsx)(t.h3,{id:"target-example",children:"Target example"}),"\n",(0,s.jsx)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"},children:(0,s.jsx)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"},children:(0,s.jsx)("iframe",{src:"https://user-images.githubusercontent.com/103921419/173573390-2295b399-f6af-49f1-b398-dfd66072d1b3.mp4",title:"Catalog Delta target",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"})})}),"\n",(0,s.jsx)(t.h3,{id:"target-code",children:"Compiled code"}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["To see the compiled code of your project, ",(0,s.jsx)(t.a,{href:"/engineers/pipelines#project-editor",children:"switch to the Code view"})," in the project header."]})}),"\n",(0,s.jsxs)(l.A,{children:[(0,s.jsx)(d.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'def Target(spark: SparkSession, in0: DataFrame):\n    in0.write\\\n        .format("delta")\\\n        .mode("overwrite")\\\n        .saveAsTable("test_db.test_table")\n'})})}),(0,s.jsx)(d.A,{value:"scala",label:"Scala",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:'object Target {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame = {\n    in.write\n      .format("delta")\n      .mode("overwrite")\n      .saveAsTable("test_db.test_table")\n  }\n\n}\n'})})})]})]})}function x(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},56778:(e,t,r)=>{r.d(t,{A:()=>i});r(96540);var a=r(18215);const s={tabItem:"tabItem_Ymn6"};var n=r(74848);function i({children:e,hidden:t,className:r}){return(0,n.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,r),hidden:t,children:e})}},97071:(e,t,r)=>{r.d(t,{A:()=>s});r(96540);var a=r(74848);function s(e){return(0,a.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.python_package_name," ",e.python_package_version]})}),e.scala_package_name&&e.scala_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.scala_package_name," ",e.scala_package_version]})}),e.python_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsPython ",e.python_lib]})}),e.scala_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsScala ",e.scala_lib]})}),e.uc_single&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Dedicated Cluster ",e.uc_single]})}),e.uc_shared&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Standard Cluster ",e.uc_shared]})}),e.livy&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["Livy ",e.livy]})}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}}}]);