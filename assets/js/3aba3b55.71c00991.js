"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[15697],{15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>g});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(a),d=r,g=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return a?n.createElement(g,i(i({ref:t},c),{},{components:a})):n.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},19365:(e,t,a)=>{a.d(t,{A:()=>i});var n=a(96540),r=a(20053);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,i),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>k});var n=a(58168),r=a(96540),l=a(20053),i=a(23104),o=a(56347),s=a(57485),u=a(31682),c=a(89466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function m(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??p(a);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.W6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(n.location.search);t.set(l,e),n.replace({...n.location,search:t.toString()})}),[l,n])]}function y(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,l=m(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,u]=g({queryString:a,groupId:n}),[p,y]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,l]=(0,c.Dv)(a);return[n,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:n}),h=(()=>{const e=s??p;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),y(e)}),[u,y,l]),tabValues:l}}var h=a(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.a_)(),m=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==o&&(p(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},i,{className:(0,l.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":o===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:n}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=y(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(b,(0,n.A)({},e,t)),r.createElement(N,(0,n.A)({},e,t)))}function k(e){const t=(0,h.A)();return r.createElement(v,(0,n.A)({key:String(t)},e))}},50728:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540);function r(e){return n.createElement("div",null,e.python_package_name&&e.python_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.python_package_name),n.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.scala_package_name),n.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsPython"),n.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsScala"),n.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Single Cluster"),n.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Shared"),n.createElement("span",{className:"right"},e.uc_shared))),e.livy&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Livy"),n.createElement("span",{className:"right"},e.livy))),n.createElement("br",null),n.createElement("br",null))}},34078:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>y,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var n=a(58168),r=(a(96540),a(15680)),l=a(50728),i=a(11470),o=a(19365);const s={title:"DataQualityCheck",id:"data-quality-check",description:"Ensure your data adhere to predefined constraints",tags:["gems","data quality"]},u=void 0,c={unversionedId:"Spark/gems/transform/data-quality-check",id:"Spark/gems/transform/data-quality-check",title:"DataQualityCheck",description:"Ensure your data adhere to predefined constraints",source:"@site/docs/Spark/gems/transform/data-quality-check.md",sourceDirName:"Spark/gems/transform",slug:"/Spark/gems/transform/data-quality-check",permalink:"/Spark/gems/transform/data-quality-check",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"data quality",permalink:"/tags/data-quality"}],version:"current",frontMatter:{title:"DataQualityCheck",id:"data-quality-check",description:"Ensure your data adhere to predefined constraints",tags:["gems","data quality"]},sidebar:"mySidebar",previous:{title:"DataCleansing",permalink:"/Spark/gems/transform/data-cleansing"},next:{title:"Deduplicate",permalink:"/Spark/gems/transform/deduplicate"}},p={},m=[{value:"Requirements",id:"requirements",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Cluster requirements",id:"cluster-requirements",level:3},{value:"Input and Output",id:"input-and-output",level:2},{value:"Data Quality Checks",id:"data-quality-checks",level:2},{value:"Post Actions",id:"post-actions",level:2},{value:"Example code",id:"example-code",level:2}],d={toc:m},g="wrapper";function y(e){let{components:t,...a}=e;return(0,r.yg)(g,(0,n.A)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{python_package_name:"ProphecySparkDataQualityPython",python_package_version:"0.0.1+",scala_package_name:"",scala_package_version:"",scala_lib:"8.2.1",python_lib:"1.9.16",uc_single:"14.3+",uc_shared:"Not Supported",livy:"Not Supported",mdxType:"Requirements"}),(0,r.yg)("p",null,"The DataQualityCheck gem includes a variety of checks that are built on the open source tool ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/awslabs/deequ"},"Deequ"),". Use this gem to make sure your data adheres to predefined constraints."),(0,r.yg)("h2",{id:"requirements"},"Requirements"),(0,r.yg)("h3",{id:"dependencies"},"Dependencies"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"ProphecySparkDataQualityPython 0.0.1+")),(0,r.yg)("h3",{id:"cluster-requirements"},"Cluster requirements"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Set the ",(0,r.yg)("inlineCode",{parentName:"li"},"SPARK_VERSION")," environment variable to a Spark version 3.3+"),(0,r.yg)("li",{parentName:"ul"},"Install the ",(0,r.yg)("a",{parentName:"li",href:"https://pypi.org/project/pydeequ/#:~:text=1.8%2B%2C%20we%20now%20officially%20support%20Spark3%20!"},"PyDeequ")," library on the cluster"),(0,r.yg)("li",{parentName:"ul"},"Install the ",(0,r.yg)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/com.amazon.deequ/deequ"},"Maven Deequ")," library on the cluster (choose the version that matches your Spark version)")),(0,r.yg)("h2",{id:"input-and-output"},"Input and Output"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"DataFrame"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"in0")),(0,r.yg)("td",{parentName:"tr",align:null},"Includes the DataFrame for which the data quality will be checked.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"out0")),(0,r.yg)("td",{parentName:"tr",align:null},"Passes through the ",(0,r.yg)("strong",{parentName:"td"},"in0")," DataFrame unchanged.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("strong",{parentName:"td"},"out1")),(0,r.yg)("td",{parentName:"tr",align:null},"Outputs a DataFrame with the verification results and failure messages (if applicable) that you can define per check.")))),(0,r.yg)("h2",{id:"data-quality-checks"},"Data Quality Checks"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Check Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Success Criteria"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Completeness"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of non-null values is greater than ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),". The default is 100% non-null.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Row count"),(0,r.yg)("td",{parentName:"tr",align:null},"Input DataFrame has at least ",(0,r.yg)("inlineCode",{parentName:"td"},"X")," number of rows.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Distinct count"),(0,r.yg)("td",{parentName:"tr",align:null},"Number of distinct values in selected columns is equal to ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Uniqueness"),(0,r.yg)("td",{parentName:"tr",align:null},"Values in selected columns are unique (occurring exactly once).")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Data type"),(0,r.yg)("td",{parentName:"tr",align:null},"Selected columns have a certain data type.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Min-max length"),(0,r.yg)("td",{parentName:"tr",align:null},"Strings in selected columns have a minimum length of ",(0,r.yg)("inlineCode",{parentName:"td"},"X")," and a maximum length of ",(0,r.yg)("inlineCode",{parentName:"td"},"Y"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Total sum"),(0,r.yg)("td",{parentName:"tr",align:null},"Sum of values in selected columns is equal to ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Mean value"),(0,r.yg)("td",{parentName:"tr",align:null},"Mean of values in selected columns is equal to ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Standard deviation"),(0,r.yg)("td",{parentName:"tr",align:null},"Standard deviation of values in selected columns is equal to ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Non-negative value"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of non-negative values is at least ",(0,r.yg)("inlineCode",{parentName:"td"},"X")," percent.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Positive value"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of positive values is at least ",(0,r.yg)("inlineCode",{parentName:"td"},"X")," percent.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Lookup"),(0,r.yg)("td",{parentName:"tr",align:null},"Fraction of values in selected columns that match lookup values is at least ",(0,r.yg)("inlineCode",{parentName:"td"},"X")," percent.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to constant value greater than"),(0,r.yg)("td",{parentName:"tr",align:null},"Selected column values are greater than a constant value ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to constant value greater than or equal to"),(0,r.yg)("td",{parentName:"tr",align:null},"Selected column values are greater than or equal to a constant value ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to constant value less than"),(0,r.yg)("td",{parentName:"tr",align:null},"Selected column values are less than a constant value ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to constant value less than or equal to"),(0,r.yg)("td",{parentName:"tr",align:null},"Selected column values are less than or equal to a constant value ",(0,r.yg)("inlineCode",{parentName:"td"},"X"),".")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to column greater than"),(0,r.yg)("td",{parentName:"tr",align:null},"All values in left column are greater than all values in right column.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to column greater than or equal to"),(0,r.yg)("td",{parentName:"tr",align:null},"All values in left column are greater than or equal to all values in right column.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to column less than"),(0,r.yg)("td",{parentName:"tr",align:null},"All values in left column are less than all values in right column.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Column to column less than or equal to"),(0,r.yg)("td",{parentName:"tr",align:null},"All values in left column are less than or equal to all values in right column.")))),(0,r.yg)("h2",{id:"post-actions"},"Post Actions"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Action"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Continue execution"),(0,r.yg)("td",{parentName:"tr",align:null},"Continue pipeline execution regardless of data quality success or failure.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Terminate execution"),(0,r.yg)("td",{parentName:"tr",align:null},"Stop pipeline execution after the DataQualityCheck gem runs based on a maximum number of failed checks. Review ",(0,r.yg)("a",{parentName:"td",href:"/concepts/project/gems#gem-phase"},"gem phases")," to understand the order in which gems run.")))),(0,r.yg)("h2",{id:"example-code"},"Example code"),(0,r.yg)("p",null,"Each check is compiled into highly decipherable code. When you switch to the code view and open the DataQualityCheck file, you can see that every check includes a ",(0,r.yg)("strong",{parentName:"p"},"hint")," that populates the ",(0,r.yg)("strong",{parentName:"p"},"out1")," ",(0,r.yg)("em",{parentName:"p"},"constraint_message")," column if you do not define a custom failure message. Below is an example of the generated code with a few checks configured."),(0,r.yg)(i.A,{mdxType:"Tabs"},(0,r.yg)(o.A,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'def data_quality_check(spark: SparkSession, in0: DataFrame) -> (DataFrame, DataFrame):\n    import re\n    from pydeequ.checks import Check, CheckLevel, ConstrainableDataTypes\n    from pydeequ.verification import VerificationSuite, VerificationResult\n\n    return (in0,\n            VerificationResult\\\n              .checkResultsAsDataFrame(\n                spark,\n                VerificationSuite(spark)\\\n                  .onData(in0.withColumn("amount_gt_const", lit("10")))\\\n                  .addCheck(\n                    Check(spark, CheckLevel.Warning, "Data Quality Checks")\\\n                      .hasCompleteness("order_id", lambda x: x >= 1.0, hint = f"{1.0 * 100}% values should be non-null for order_id")\\\n                      .hasSize(lambda x: x >= 10, hint = "The number of rows should be at least 10")\\\n                      .hasDataType(\n                        "order_id",\n                        ConstrainableDataTypes.Numeric,\n                        lambda x: x == True,\n                        hint = "Column order_id is not of Numeric data type"\n                      )\\\n                      .hasMaxLength(\n                        "customer_id",\n                        lambda x: x >= 5 and x <= 20,\n                        hint = "Length of column customer_id does not lie between 5 and 20"\n                      )\\\n                      .hasSum("amount", lambda x: x == 100000.0, hint = "Total sum of column amount is not equals to 100000.0")\\\n                      .hasMean("amount", lambda x: x == 40.0, hint = "Mean value of column amount is not equals to 40.0")\\\n                  )\\\n                  .run()\n              )\\\n              .selectExpr("constraint_status", "constraint_message", "udf_extract_check_and_column(constraint) as parsed")\\\n              .selectExpr("parsed._1 as check_type", "parsed._2 as column", "constraint_status", "constraint_message"))\n')))))}y.isMDXComponent=!0}}]);