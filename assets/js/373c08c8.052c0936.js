"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[98826],{15680:(e,t,a)=>{a.d(t,{xA:()=>s,yg:()=>d});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),g=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=g(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=g(a),y=r,d=m["".concat(p,".").concat(y)]||m[y]||u[y]||l;return a?n.createElement(d,i(i({ref:t},s),{},{components:a})):n.createElement(d,i({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=y;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=a[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},50728:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540);function r(e){return n.createElement("div",null,e.python_package_name&&e.python_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.python_package_name),n.createElement("span",{className:"right"},e.python_package_version))),e.scala_package_name&&e.scala_package_version&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/package-hub/"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},e.scala_package_name),n.createElement("span",{className:"right"},e.scala_package_version))),e.python_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsPython"),n.createElement("span",{className:"right"},e.python_lib))),e.scala_lib&&n.createElement("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries"},n.createElement("span",{className:"badge-dependency"},n.createElement("span",{className:"left"},"ProphecyLibsScala"),n.createElement("span",{className:"right"},e.scala_lib))),e.uc_single&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Single Cluster"),n.createElement("span",{className:"right"},e.uc_single))),e.uc_shared&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/databricks/ucshared"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Databricks UC Shared"),n.createElement("span",{className:"right"},e.uc_shared))),e.livy&&n.createElement("a",{href:"https://docs.prophecy.io/administration/Spark-fabrics/livy"},n.createElement("span",{className:"badge-spark"},n.createElement("span",{className:"left"},"Livy"),n.createElement("span",{className:"right"},e.livy))),n.createElement("br",null),n.createElement("br",null))}},39832:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=a(58168),r=(a(96540),a(15680)),l=a(50728);const i={title:"WhileIterator",id:"while-iterator",description:"Recursively processes rows",tags:["gems","subgraph"]},o=void 0,p={unversionedId:"Spark/gems/subgraph/while-iterator",id:"Spark/gems/subgraph/while-iterator",title:"WhileIterator",description:"Recursively processes rows",source:"@site/docs/Spark/gems/subgraph/while-iterator.md",sourceDirName:"Spark/gems/subgraph",slug:"/Spark/gems/subgraph/while-iterator",permalink:"/Spark/gems/subgraph/while-iterator",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"subgraph",permalink:"/tags/subgraph"}],version:"current",frontMatter:{title:"WhileIterator",id:"while-iterator",description:"Recursively processes rows",tags:["gems","subgraph"]},sidebar:"mySidebar",previous:{title:"TableIterator",permalink:"/Spark/gems/subgraph/table-iterator"},next:{title:"Machine Learning",permalink:"/Spark/gems/machine-learning/"}},g={},s=[{value:"Input",id:"input",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Subgraph",id:"subgraph",level:2},{value:"Break condition",id:"break-condition",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2},{value:"Add Reformat gem",id:"add-reformat-gem",level:3},{value:"Terminate loop",id:"terminate-loop",level:3},{value:"View output data",id:"view-output-data",level:3}],m={toc:s},u="wrapper";function y(e){let{components:t,...i}=e;return(0,r.yg)(u,(0,n.A)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)(l.A,{python_package_name:"",python_package_version:"",scala_package_name:"",scala_package_version:"",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"Not Supported",mdxType:"Requirements"}),(0,r.yg)("p",null,"The WhileIterator allows you to group a set of gems together, and then run them one after another repeatedly in a loop."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"WhileIterator",src:a(22440).A,width:"2620",height:"1508"})),(0,r.yg)("h2",{id:"input"},"Input"),(0,r.yg)("p",null,"The input of the WhileIterator can be any dataset. Importantly, the output schema of the WhileIterator ",(0,r.yg)("strong",{parentName:"p"},"must")," match or be a subset of the input schema. This is because the output feeds back into the input as the subgraph is iterating (looping)."),(0,r.yg)("h2",{id:"configuration"},"Configuration"),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Before setting the WhileIterator configuration, make sure you are familiar with ",(0,r.yg)("a",{parentName:"p",href:"/Spark/configuration"},"pipeline configurations"),".")),(0,r.yg)("p",null,"Once you have a WhileIterator subgraph on your canvas, set configurations by opening the subgraph and clicking on ",(0,r.yg)("strong",{parentName:"p"},"Configuration"),". The following table describes the parameters you need to set."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Tab"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Max iterations"),(0,r.yg)("td",{parentName:"tr",align:null},"Settings"),(0,r.yg)("td",{parentName:"tr",align:null},"The maximum number of loops that will be performed.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Populate iteration number in config variable"),(0,r.yg)("td",{parentName:"tr",align:null},"Settings"),(0,r.yg)("td",{parentName:"tr",align:null},"A checkbox to enable if you want to keep track of iteration numbers in a variable.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Select config variable name to populate iteration number"),(0,r.yg)("td",{parentName:"tr",align:null},"Settings"),(0,r.yg)("td",{parentName:"tr",align:null},"The name of the config variable that will store the iteration number.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Schema"),(0,r.yg)("td",{parentName:"tr",align:null},"Configuration"),(0,r.yg)("td",{parentName:"tr",align:null},"A table where you define configuration variables. You can ",(0,r.yg)("strong",{parentName:"td"},"Copy Pipeline Configs")," to inherit these from your pipeline. If you want to populate the iteration number in a config variable, make sure to include that variable here.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Config"),(0,r.yg)("td",{parentName:"tr",align:null},"Configuration"),(0,r.yg)("td",{parentName:"tr",align:null},"An area where you can define default values for variables in one or more configurations.")))),(0,r.yg)("h2",{id:"subgraph"},"Subgraph"),(0,r.yg)("p",null,"Within the WhileIterator, you can design a flow with multiple gems to create your desired output."),(0,r.yg)("p",null,"Importantly, you also need to understand the two inputs of the WhileIterator_Output. The order of your inputs is important:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"in0")," dataset contains the DataFrame for the ",(0,r.yg)("strong",{parentName:"li"},"following")," iteration. If this dataset becomes empty, the loop is terminated."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"in1")," dataset passes on an individual iteration. You'll see the entire list of iterations as the output of the WhileIterator gem.")),(0,r.yg)("h2",{id:"break-condition"},"Break condition"),(0,r.yg)("p",null,"There are two scenarios in which the WhileIterator will break:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"in0")," dataset of the WhileIterator_Output becomes empty."),(0,r.yg)("li",{parentName:"ul"},"The maximum number of iterations is reached.")),(0,r.yg)("h2",{id:"output"},"Output"),(0,r.yg)("p",null,"There are two outputs of the WhileIterator:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"out0")," dataset that contains the output of the ",(0,r.yg)("strong",{parentName:"li"},"last iteration")," of the WhileIterator."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("strong",{parentName:"li"},"out1")," dataset that contains the whole list of iterations produced by the WhileIterator. This is produced by performing a union on all output iterations.")),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"example"},"Example"),(0,r.yg)("p",null,"Imagine you are simulating an investment that earns a fixed percentage of interest per year. You want to keep compounding the interest until your investment reaches a desired amount. You can use the WhileIterator gem to produce a dataset demonstrating this yearly growth."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"WhileIterator",src:a(75624).A,width:"2620",height:"1508"})),(0,r.yg)("p",null,"For this example, the input of the WhileIterator will be a simple table that describes your starting investment and the fixed interest rate."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"year"),(0,r.yg)("th",{parentName:"tr",align:null},"principal"),(0,r.yg)("th",{parentName:"tr",align:null},"interest_rate"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"0"),(0,r.yg)("td",{parentName:"tr",align:null},"1000"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")))),(0,r.yg)("h3",{id:"add-reformat-gem"},"Add Reformat gem"),(0,r.yg)("p",null,"Now, let's use a Reformat gem in the WhileIterator subgraph to update the ",(0,r.yg)("strong",{parentName:"p"},"Year")," and ",(0,r.yg)("strong",{parentName:"p"},"Principal")," each iteration."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Add the Reformat gem inside the WhileIterator."),(0,r.yg)("li",{parentName:"ol"},"Connect WhileIterator_Input to the Reformat gem."),(0,r.yg)("li",{parentName:"ol"},"Connect the Reformat gem to the WhileIterator_Output."),(0,r.yg)("li",{parentName:"ol"},"Configure the ",(0,r.yg)("strong",{parentName:"li"},"Expressions")," table as it is shown below.")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Target Column"),(0,r.yg)("th",{parentName:"tr",align:null},"Expression"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"year"),(0,r.yg)("td",{parentName:"tr",align:null},"year + 1")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"principal"),(0,r.yg)("td",{parentName:"tr",align:null},"principal + principal ","*"," interest_rate")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"interest_rate"),(0,r.yg)("td",{parentName:"tr",align:null},"interest_rate")))),(0,r.yg)("h3",{id:"terminate-loop"},"Terminate loop"),(0,r.yg)("p",null,"The while loop will stop if the ",(0,r.yg)("strong",{parentName:"p"},"in0")," dataset becomes empty. How can the ",(0,r.yg)("strong",{parentName:"p"},"in0")," dataset become empty? In this example:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Add a Filter gem with the condition ",(0,r.yg)("inlineCode",{parentName:"li"},"principal < 2000"),"."),(0,r.yg)("li",{parentName:"ol"},"Connect the Reformat gem output to the input of the Filter gem."),(0,r.yg)("li",{parentName:"ol"},"Connect the Filter gem output to the input of WhileIterator_Output.")),(0,r.yg)("p",null,"This way, the Filter gem will return data as-is until the principal reaches 2000. After that, the record is filtered out, and the loop will terminate."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"WhileIterator",src:a(22440).A,width:"2620",height:"1508"})),(0,r.yg)("h3",{id:"view-output-data"},"View output data"),(0,r.yg)("p",null,"The ",(0,r.yg)("strong",{parentName:"p"},"out0")," dataset should be empty because we used a Filter gem to return an empty set when the ",(0,r.yg)("inlineCode",{parentName:"p"},"principal > 2000"),"."),(0,r.yg)("p",null,"Below is an example ",(0,r.yg)("strong",{parentName:"p"},"out1")," dataset. This lets you project how your principal will grow over the years."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"year"),(0,r.yg)("th",{parentName:"tr",align:null},"principal"),(0,r.yg)("th",{parentName:"tr",align:null},"interest_rate"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"1"),(0,r.yg)("td",{parentName:"tr",align:null},"1050"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"2"),(0,r.yg)("td",{parentName:"tr",align:null},"1102.5"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"3"),(0,r.yg)("td",{parentName:"tr",align:null},"1157.625"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"4"),(0,r.yg)("td",{parentName:"tr",align:null},"1215.50625"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"5"),(0,r.yg)("td",{parentName:"tr",align:null},"1276.2815625"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"6"),(0,r.yg)("td",{parentName:"tr",align:null},"1340.095640625"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"7"),(0,r.yg)("td",{parentName:"tr",align:null},"1407.100422656"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"8"),(0,r.yg)("td",{parentName:"tr",align:null},"1477.455443789"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"9"),(0,r.yg)("td",{parentName:"tr",align:null},"1551.328215978"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"10"),(0,r.yg)("td",{parentName:"tr",align:null},"1628.894626777"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"11"),(0,r.yg)("td",{parentName:"tr",align:null},"1710.339358116"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"12"),(0,r.yg)("td",{parentName:"tr",align:null},"1795.856326022"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"13"),(0,r.yg)("td",{parentName:"tr",align:null},"1885.649142323"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"14"),(0,r.yg)("td",{parentName:"tr",align:null},"1979.931599439"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"15"),(0,r.yg)("td",{parentName:"tr",align:null},"2078.928179411"),(0,r.yg)("td",{parentName:"tr",align:null},"0.05")))))}y.isMDXComponent=!0},75624:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/while-iterator-output-d0132f5fbde88c759aa54e8b17be2441.png"},22440:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/while-iterator-c24d4ded9e74aa33b6756ca790b44829.png"}}]);