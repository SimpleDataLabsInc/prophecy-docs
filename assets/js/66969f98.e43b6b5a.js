"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[24008],{14103:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"analysts/development/copilot/expression-generation","title":"Generate expressions","description":"Automatically generate expressions with natural language","source":"@site/docs/analysts/development/copilot/gem-expressions.md","sourceDirName":"analysts/development/copilot","slug":"/analysts/expression-generation","permalink":"/analysts/expression-generation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"analyst","permalink":"/tags/analyst"},{"inline":true,"label":"copilot","permalink":"/tags/copilot"}],"version":"current","frontMatter":{"title":"Generate expressions","id":"expression-generation","slug":"/analysts/expression-generation","description":"Automatically generate expressions with natural language","tags":["analyst","copilot"]},"sidebar":"mySidebar","previous":{"title":"Transform data","permalink":"/analysts/ai-transform"},"next":{"title":"Gem auto-documentation","permalink":"/analysts/auto-documentation"}}');var i=n(74848),o=n(28453);const r={title:"Generate expressions",id:"expression-generation",slug:"/analysts/expression-generation",description:"Automatically generate expressions with natural language",tags:["analyst","copilot"]},l=void 0,a={},c=[{value:"Copilot suggestions",id:"copilot-suggestions",level:2},{value:"Copilot prompts",id:"copilot-prompts",level:2},{value:"Example prompts",id:"example-prompts-expressions",level:2}];function d(e){const s={code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Copilot enhances the expression-building experience within gem configurations in two ways:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Suggesting context-aware expressions based on your input and column metadata."}),"\n",(0,i.jsx)(s.li,{children:"Accepting natural language prompts to build new expressions."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"copilot-suggestions",children:"Copilot suggestions"}),"\n",(0,i.jsxs)(s.p,{children:["Copilot suggests expressions based on semantic cues from your column names. To accept Copilot suggestions, click ",(0,i.jsx)(s.code,{children:"tab"})," or click on the expression itself in the gem."]}),"\n",(0,i.jsx)(s.p,{children:"For best results, use descriptive column names."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Recommended"}),": ",(0,i.jsx)(s.code,{children:"customer_email"})]}),"\n",(0,i.jsx)(s.p,{children:"Clear intent, likely to produce accurate suggestions."}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Not recommended"}),": ",(0,i.jsx)(s.code,{children:"col1"})]}),"\n",(0,i.jsx)(s.p,{children:"Ambiguous, may result in less reliable output."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"Copilot expressions",src:n(46504).A+"",width:"2870",height:"1608"})}),"\n",(0,i.jsx)(s.h2,{id:"copilot-prompts",children:"Copilot prompts"}),"\n",(0,i.jsx)(s.p,{children:"If you want to build your own expression, you can ask Copilot to help. Copilot is available for writing expressions in both the visual and code view."}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsx)(s.li,{children:"Click on an expression field in a gem."}),"\n",(0,i.jsxs)(s.li,{children:["Click ",(0,i.jsx)(s.strong,{children:"Ask AI"})," to enter a prompt."]}),"\n",(0,i.jsx)(s.li,{children:"Copilot uses your prompt to generate an expression."}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"example-prompts-expressions",children:"Example prompts"}),"\n",(0,i.jsx)(s.p,{children:"The following are example prompts you can use to generate expressions in gems."}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Scenario"}),(0,i.jsx)(s.th,{children:"Prompt"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Basic transformation"}),(0,i.jsxs)(s.td,{children:["\u201cExtract the domain from the ",(0,i.jsx)(s.code,{children:"email"})," column.\u201d"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"String formatting"}),(0,i.jsxs)(s.td,{children:["\u201cCapitalize the first letter of each word in ",(0,i.jsx)(s.code,{children:"customer_name"}),".\u201d"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Date parsing"}),(0,i.jsxs)(s.td,{children:["\u201cConvert ",(0,i.jsx)(s.code,{children:"order_date"})," to YYYY-MM format.\u201d"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Conditional logic"}),(0,i.jsxs)(s.td,{children:["\u201cIf ",(0,i.jsx)(s.code,{children:"amount"})," > 1000, then label as \u2018high value\u2019, else \u2018standard\u2019.\u201d"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Null handling"}),(0,i.jsxs)(s.td,{children:["\u201cReplace null values in ",(0,i.jsx)(s.code,{children:"zipcode"})," with \u201800000\u2019.\u201d"]})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:"Math calculation"}),(0,i.jsxs)(s.td,{children:["\u201cCalculate discount as ",(0,i.jsx)(s.code,{children:"price"})," * ",(0,i.jsx)(s.code,{children:"discount_rate"}),".\u201d"]})]})]})]})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(96540);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}},46504:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/copilot-expressions-54d039f435397b4e9d9a1236b1d24b43.gif"}}]);