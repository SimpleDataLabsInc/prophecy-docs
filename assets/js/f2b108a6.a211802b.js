"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[22605],{21701:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>o,frontMatter:()=>l,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"analysts/development/gems/gems","title":"Gems","description":"Power your pipelines with gems","source":"@site/docs/analysts/development/gems/gems.md","sourceDirName":"analysts/development/gems","slug":"/analysts/gems","permalink":"/analysts/gems","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"sql","permalink":"/tags/sql"},{"inline":true,"label":"analyst","permalink":"/tags/analyst"}],"version":"current","frontMatter":{"title":"Gems","id":"gems","slug":"/analysts/gems","description":"Power your pipelines with gems","tags":["gems","sql","analyst"]},"sidebar":"mySidebar","previous":{"title":"Pipeline parameters","permalink":"/analysts/pipeline-parameters"},"next":{"title":"Source and Target","permalink":"/analysts/source-target"}}');var r=t(74848),i=t(28453);const l={title:"Gems",id:"gems",slug:"/analysts/gems",description:"Power your pipelines with gems",tags:["gems","sql","analyst"]},d=void 0,a={},h=[{value:"Categories",id:"categories",level:2},{value:"Interactive examples",id:"interactive-examples",level:2},{value:"Gem instance",id:"gem-instance",level:2},{value:"Gem configuration",id:"gem-configuration",level:2},{value:"Visual and code view",id:"visual-and-code-view",level:3},{value:"Action menu",id:"action-menu",level:2},{value:"Gem phase",id:"gem-phase",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/gems",children:"Gems"})," are functional units in a pipeline that perform tasks such as reading, transforming, writing, or handling other data operations. When you build pipelines in a SQL project, some gems will be powered by Prophecy Automate, and some gems will be powered by SQL dbt."]}),"\n",(0,r.jsx)(n.h2,{id:"categories",children:"Categories"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Category"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Execution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Source/Target"})}),(0,r.jsx)(n.td,{children:"Read and write data from various data providers."}),(0,r.jsx)(n.td,{children:"Prophecy Automate"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Transform"})}),(0,r.jsx)(n.td,{children:"Modify, enrich, or reshape data during processing."}),(0,r.jsx)(n.td,{children:"SQL warehouse"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Prepare"})}),(0,r.jsx)(n.td,{children:"Clean, structure, and optimize data for analysis."}),(0,r.jsx)(n.td,{children:"SQL warehouse"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Join"})}),(0,r.jsx)(n.td,{children:"Merge, split, or link datasets."}),(0,r.jsx)(n.td,{children:"SQL warehouse"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Parse"})}),(0,r.jsx)(n.td,{children:"Interpret structured formats in columns like XML and JSON."}),(0,r.jsx)(n.td,{children:"SQL warehouse"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Report"})}),(0,r.jsx)(n.td,{children:"Share results through channels such as email or Tableau."}),(0,r.jsx)(n.td,{children:"Prophecy Automate"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Subgraph"})}),(0,r.jsx)(n.td,{children:"Group gems into reusable components."}),(0,r.jsx)(n.td,{children:"Depends"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Custom"})}),(0,r.jsx)(n.td,{children:"Enhance and extend Prophecy\u2019s functionality."}),(0,r.jsx)(n.td,{children:"Depends"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"interactive-examples",children:"Interactive examples"}),"\n",(0,r.jsxs)(n.p,{children:["To test a gem hands-on, you can try the ",(0,r.jsx)(n.strong,{children:"interactive example"})," of the gem. If you search for a gem in the project sidebar, you can open the associated ",(0,r.jsx)(n.strong,{children:"example"})," and run the pre-configured pipeline!"]}),"\n",(0,r.jsx)(n.h2,{id:"gem-instance",children:"Gem instance"}),"\n",(0,r.jsx)(n.p,{children:"When you click on a gem from the gem drawer, an instance of that gem gets added to your pipeline canvas. Use the image and the table below to understand the UI of a gem."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Callout"}),(0,r.jsx)(n.th,{children:"UI element"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"1"}),(0,r.jsx)(n.td,{children:"Gem label"}),(0,r.jsx)(n.td,{children:"The name of this particular gem instance. It must be unique within a given pipeline."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"2"}),(0,r.jsx)(n.td,{children:"Gem type name"}),(0,r.jsx)(n.td,{children:"The type of gem."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"3"}),(0,r.jsx)(n.td,{children:"Input ports"}),(0,r.jsx)(n.td,{children:"One or more ports that accept connections from upstream gems."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"4"}),(0,r.jsx)(n.td,{children:"Output ports"}),(0,r.jsx)(n.td,{children:"One or more ports that connect to downstream gems."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"5"}),(0,r.jsx)(n.td,{children:"Gem phase"}),(0,r.jsxs)(n.td,{children:["The ",(0,r.jsx)(n.a,{href:"#gem-phase",children:"phase"})," for this gem instance, which defines the order in which gem instances are executed."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"6"}),(0,r.jsx)(n.td,{children:"Open"}),(0,r.jsx)(n.td,{children:"The button that lets you open the gem configuration."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"7"}),(0,r.jsx)(n.td,{children:"Run button"}),(0,r.jsx)(n.td,{children:"A button that runs the pipeline up to and including the gem."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"8"}),(0,r.jsx)(n.td,{children:"Action menu"}),(0,r.jsx)(n.td,{children:"A menu that includes options to change the phase of the gem, add run conditions, delete the gem, and more."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"gem-configuration",children:"Gem configuration"}),"\n",(0,r.jsx)(n.p,{children:"When you open a gem, you can configure how the gem will work."}),"\n",(0,r.jsx)(n.h3,{id:"visual-and-code-view",children:"Visual and code view"}),"\n",(0,r.jsxs)(n.p,{children:["Some gems can be configured in the ",(0,r.jsx)(n.strong,{children:"visual"})," view or the ",(0,r.jsx)(n.strong,{children:"code"})," view. Use the visual expression builder to populate fields in the visual view. Prophecy will automatically convert visual expressions into SQL expressions. You can edit these SQL statements or write your own in the code view."]}),"\n",(0,r.jsx)(n.h2,{id:"action-menu",children:"Action menu"}),"\n",(0,r.jsx)(n.p,{children:"The action menu gives you more granular control over individual gems. When you expand the action menu, you see the following options:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Action"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Description"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Explain"})}),(0,r.jsx)(n.td,{children:"Copilot adds a comment to the gem that explains what it does."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Fix"})}),(0,r.jsx)(n.td,{children:"Copilot resolves an error in the gem configuration."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Label"})}),(0,r.jsx)(n.td,{children:"Copilot renames the gem."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Add Comment"})}),(0,r.jsx)(n.td,{children:"Manually write a comment that explains the gem."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Change Phase"})}),(0,r.jsxs)(n.td,{children:["Change the ",(0,r.jsx)(n.a,{href:"#gem-phase",children:"phase"})," of the gem."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Delete"})}),(0,r.jsx)(n.td,{children:"Remove the gem from the pipeline."})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"gem-phase",children:"Gem phase"}),"\n",(0,r.jsxs)(n.p,{children:["In a data pipeline, the ",(0,r.jsx)(n.strong,{children:"phase"})," of a gem determines the sequence in which it runs. Here\u2019s how it works:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Gems are assigned a numerical phase (e.g., ",(0,r.jsx)(n.code,{children:"0"}),", ",(0,r.jsx)(n.code,{children:"1"}),", ",(0,r.jsx)(n.code,{children:"-1"}),"), where lower values run first. For example, a gem with phase ",(0,r.jsx)(n.code,{children:"0"})," will execute before a gem with phase ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When a gem runs, all its upstream gems must also run. This means that if a downstream gem has phase ",(0,r.jsx)(n.code,{children:"0"})," and an upstream gem has phase ",(0,r.jsx)(n.code,{children:"1"}),", the upstream gem will be grouped into phase ",(0,r.jsx)(n.code,{children:"0"})," to ensure proper execution."]}),"\n",(0,r.jsxs)(n.li,{children:["Because of this dependency, the phase assigned to the last gem in a branch determines the phase of the entire branch. This means that when configuring gem phases, you only need to focus on the ",(0,r.jsx)(n.em,{children:"leaf nodes"}),"\u2014the final gems in each branch of the pipeline."]}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);