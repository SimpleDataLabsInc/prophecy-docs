"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[35392],{15680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>c});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var g=a.createContext({}),u=function(e){var t=a.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(g.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,g=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,c=d["".concat(g,".").concat(m)]||d[m]||p[m]||l;return n?a.createElement(c,o(o({ref:t},s),{},{components:n})):a.createElement(c,o({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var g in t)hasOwnProperty.call(t,g)&&(i[g]=t[g]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19365:(e,t,n)=>{n.d(t,{A:()=>o});var a=n(96540),r=n(20053);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(l.tabItem,o),hidden:n},t)}},11470:(e,t,n)=>{n.d(t,{A:()=>v});var a=n(58168),r=n(96540),l=n(20053),o=n(23104),i=n(56347),g=n(57485),u=n(31682),s=n(89466);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function c(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.W6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,g.aZ)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[g,u]=c({queryString:n,groupId:a}),[d,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,s.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),b=(()=>{const e=g??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),y(e)}),[u,y,l]),tabValues:l}}var b=n(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function N(e){let{className:t,block:n,selectedValue:i,selectValue:g,tabValues:u}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.a_)(),p=e=>{const t=e.currentTarget,n=s.indexOf(t),a=u[n].value;a!==i&&(d(t),g(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.A)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>s.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=y(e);return r.createElement("div",{className:(0,l.A)("tabs-container",f.tabList)},r.createElement(N,(0,a.A)({},e,t)),r.createElement(h,(0,a.A)({},e,t)))}function v(e){const t=(0,b.A)();return r.createElement(w,(0,a.A)({key:String(t)},e))}},89741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>g,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(58168),r=(n(96540),n(15680)),l=n(11470),o=n(19365);const i={title:"MongoDB",id:"mongodb",description:"MongoDB",sidebar_position:5,tags:["gems","warehouse","mongodb"]},g=void 0,u={unversionedId:"Spark/gems/source-target/warehouse/mongodb",id:"Spark/gems/source-target/warehouse/mongodb",title:"MongoDB",description:"MongoDB",source:"@site/docs/Spark/gems/source-target/warehouse/mongodb.md",sourceDirName:"Spark/gems/source-target/warehouse",slug:"/Spark/gems/source-target/warehouse/mongodb",permalink:"/Spark/gems/source-target/warehouse/mongodb",draft:!1,tags:[{label:"gems",permalink:"/tags/gems"},{label:"warehouse",permalink:"/tags/warehouse"},{label:"mongodb",permalink:"/tags/mongodb"}],version:"current",sidebarPosition:5,frontMatter:{title:"MongoDB",id:"mongodb",description:"MongoDB",sidebar_position:5,tags:["gems","warehouse","mongodb"]},sidebar:"mySidebar",previous:{title:"JDBC",permalink:"/Spark/gems/source-target/warehouse/jdbc"},next:{title:"Oracle",permalink:"/Spark/gems/source-target/warehouse/oracle"}},s={},d=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Example",id:"source-example",level:3},{value:"Generated Code",id:"source-code",level:3},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Supported Write Modes",id:"supported-write-modes",level:3},{value:"Example",id:"target-example",level:3},{value:"Generated Code",id:"target-code",level:3}],p={toc:d},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("admonition",{title:"Built on",type:"info"},(0,r.yg)("p",{parentName:"admonition"},"Built on ",(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/#mongodb-connector-for-spark"},"MongoDB Spark Connector")," v10.0. ",(0,r.yg)("br",null),"\nAdd ",(0,r.yg)("inlineCode",{parentName:"p"},"mongodb-spark-connector")," jar as dependency ",(0,r.yg)("a",{parentName:"p",href:"https://docs.prophecy.io/Spark/extensibility/dependencies/#add-dependency"},"for more"),".")),(0,r.yg)("p",null,"Allows read and write operations on ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB"),"."),(0,r.yg)("h2",{id:"source"},"Source"),(0,r.yg)("h3",{id:"source-parameters"},"Source Parameters"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/read/"},"Official documentation")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Username"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Password"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Driver"),(0,r.yg)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,r.yg)("br",null)," e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Database"),(0,r.yg)("td",{parentName:"tr",align:null},"Database from which we want to read the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Collection"),(0,r.yg)("td",{parentName:"tr",align:null},"Collection from which we want to read the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,r.yg)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,r.yg)("br",null)," You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner"),(0,r.yg)("td",{parentName:"tr",align:null},"The partitioner full class name. You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.Partitioner")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.read.partitioner.SamplePartitioner")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.partition.field"),(0,r.yg)("td",{parentName:"tr",align:null},"The field to use for partitioning, which must be a unique field. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_id")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.partition.size"),(0,r.yg)("td",{parentName:"tr",align:null},"The size (in MB) for each partition. Smaller partition sizes create more partitions containing fewer documents. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"64")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"partitioner.options.samples.per.partition"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of samples to take per partition. The total number of samples taken is: ",(0,r.yg)("inlineCode",{parentName:"td"},"samples per partiion * ( count / number of documents per partition)")," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"10")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sampleSize"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of documents to sample from the collection when inferring the schema. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"1000")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.enabled"),(0,r.yg)("td",{parentName:"tr",align:null},"Whether to enable Map types when inferring the schema. When enabled, large compatible struct types are inferred to a MapType instead. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"sql.inferSchema.mapTypes.minimum.key.size"),(0,r.yg)("td",{parentName:"tr",align:null},"Minimum size of a StructType before inferring as a MapType. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"250")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"aggregation.pipeline"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies a custom aggregation pipeline to apply to the collection before sending data to Spark. The value must be either an extended JSON single document or list of documents.",(0,r.yg)("br",null)," A single document should resemble the following:",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},'{"$match": {"closed": false}}')," ",(0,r.yg)("br",null)," A list of documents should resemble the following:",(0,r.yg)("br",null)," ",(0,r.yg)("inlineCode",{parentName:"td"},'[{"$match": {"closed": false}}, {"$project": {"status": 1, "name": 1, "description": 1}}]')),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"aggregation.allowDiskUse"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies whether to allow storage to disk when running the aggregation. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")))),(0,r.yg)("h3",{id:"source-example"},"Example"),(0,r.yg)("p",null,"Below is an example of configuring MongoDB Source using Prophecy IDE.\nWe will be reading Airbnb public ",(0,r.yg)("inlineCode",{parentName:"p"},"listingReviews")," dataset using in-built ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB")," Source Gem.",(0,r.yg)("br",null),"\nAfter configuration you can view schema by clicking ",(0,r.yg)("inlineCode",{parentName:"p"},"Infer Schema")," in properties tab and also view data by clicking ",(0,r.yg)("inlineCode",{parentName:"p"},"Load")," inside Preview tab."),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218975988-7e445ee5-81c1-4c0c-90dd-711ec28f0a38.mp4",title:"MongoDB Source",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,r.yg)("h3",{id:"source-code"},"Generated Code"),(0,r.yg)(l.A,{defaultValue:"scala",mdxType:"Tabs"},(0,r.yg)(o.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'object input_mongodb {\n\n  def apply(context: Context): DataFrame = {\n    context.spark.read\n      .format("mongodb")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",   "test_input")\n      .option("collection", "listAndReviews")\n      .load()\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"target"},"Target"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.mongodb.com/docs/spark-connector/v10.0/configuration/write/"},"Official documentation")),(0,r.yg)("h3",{id:"target-parameters"},"Target Parameters"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Parameter"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Username"),(0,r.yg)("td",{parentName:"tr",align:null},"Username for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Password"),(0,r.yg)("td",{parentName:"tr",align:null},"Password for MongoDB instance"),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Driver"),(0,r.yg)("td",{parentName:"tr",align:null},"Driver string for mongodb connection, e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"mongodb+srv")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP Address and Options"),(0,r.yg)("td",{parentName:"tr",align:null},"Cluster IP and options(if required) for the MongoDB connection, ",(0,r.yg)("br",null)," e.g. ",(0,r.yg)("inlineCode",{parentName:"td"},"cluster0.prophecy.mongodb.xyz/?retryWrites=true&w=majority")),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Database"),(0,r.yg)("td",{parentName:"tr",align:null},"Database to which we want to write the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Collection"),(0,r.yg)("td",{parentName:"tr",align:null},"Collection to which we want to write the data."),(0,r.yg)("td",{parentName:"tr",align:null},"True")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"mongoClientFactory"),(0,r.yg)("td",{parentName:"tr",align:null},"MongoClientFactory configuration key. ",(0,r.yg)("br",null)," You can specify a custom implementation which must implement the ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.MongoClientFactory")," interface. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"com.mongodb.spark.sql.connector.connection.DefaultMongoClientFactory")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"maxBatchSize"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies the maximum number of operations to batch in bulk operations. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"512")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"ordered"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies whether to perform ordered bulk operations. ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"true")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"operationType"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies the type of write operation to perform. You can set this to one of the following values: ",(0,r.yg)("inlineCode",{parentName:"td"},"insert"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"replace")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"update")," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"replace")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"idFieldList"),(0,r.yg)("td",{parentName:"tr",align:null},"Field or list of fields by which to split the collection data. To specify more than one field, separate them using a comma as shown in the following example:",(0,r.yg)("inlineCode",{parentName:"td"},'"fieldName1,fieldName2"')," ",(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_id")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.w"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies w, a write concern option to acknowledge the level to which the change propagated in the MongoDB replica set. You can specify one of the following values: ",(0,r.yg)("inlineCode",{parentName:"td"},"MAJORITY"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W1"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W2"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"W3"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"ACKNOWLEDGED")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"UNACKNOWLEDGED"),(0,r.yg)("br",null)," Default: ",(0,r.yg)("inlineCode",{parentName:"td"},"_ACKNOWLEDGED")),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.journal"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies j, a write concern option to enable request for acknowledgment that the data is confirmed on on-disk journal for the criteria specified in the w option.",(0,r.yg)("br",null)," You can specify either ",(0,r.yg)("inlineCode",{parentName:"td"},"true")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"false"),"."),(0,r.yg)("td",{parentName:"tr",align:null},"False")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"writeConcern.wTimeoutMS"),(0,r.yg)("td",{parentName:"tr",align:null},"Specifies wTimeoutMS, a write concern option to return an error when a write operation exceeds the number of milliseconds. If you use this optional setting, you must specify a ",(0,r.yg)("inlineCode",{parentName:"td"},"non-negative")," integer."),(0,r.yg)("td",{parentName:"tr",align:null},"False")))),(0,r.yg)("h3",{id:"supported-write-modes"},"Supported Write Modes"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Write Mode"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"overwrite"),(0,r.yg)("td",{parentName:"tr",align:null},"If data already exists, ",(0,r.yg)("inlineCode",{parentName:"td"},"overwrite")," the contents of the Collection with data.")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"append"),(0,r.yg)("td",{parentName:"tr",align:null},"If data already exists, ",(0,r.yg)("inlineCode",{parentName:"td"},"append")," the data on to the contents of the Collection.")))),(0,r.yg)("h3",{id:"target-example"},"Example"),(0,r.yg)("p",null,"Below is an example of configuring MongoDB Target using Prophecy IDE.\nWe will be writing back Airbnb public ",(0,r.yg)("inlineCode",{parentName:"p"},"listingReviews")," data into a collection in ",(0,r.yg)("inlineCode",{parentName:"p"},"MongoDB")," using our in-built Target Gem."),(0,r.yg)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,r.yg)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,r.yg)("iframe",{src:"https://user-images.githubusercontent.com/16856802/218750916-a3ea2ead-9c81-42c9-9ad2-c60a61cdde4a.mp4",title:"MongoDB Target",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",allowfullscreen:"allowfullscreen",mozallowfullscreen:"mozallowfullscreen",msallowfullscreen:"msallowfullscreen",oallowfullscreen:"oallowfullscreen",webkitallowfullscreen:"webkitallowfullscreen",width:"100%",height:"100%"}))),(0,r.yg)("h3",{id:"target-code"},"Generated Code"),(0,r.yg)(l.A,{defaultValue:"scala",mdxType:"Tabs"},(0,r.yg)(o.A,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-scala"},'object output_mongodb {\n  def apply(context: Context, df: DataFrame): Unit = {\n    df.write\n      .format("mongodb")\n      .mode("overwrite")\n      .option(\n        "connection.uri",\n        f"${"mongodb+srv"}://${"ashish_mongotrial"}:${"password"}@${"cluster0.zveltwx.mongodb.net/?retryWrites=true&w=majority"}".trim\n      )\n      .option("database",      "test")\n      .option("collection",    "test_output")\n      .option("ordered",       "true")\n      .option("operationType", "replace")\n      .save()\n  }\n}\n')))))}c.isMDXComponent=!0}}]);