"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[9438],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(a),u=n,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||l;return a?r.createElement(f,i(i({ref:t},p),{},{components:a})):r.createElement(f,i({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2360:function(e,t,a){a.d(t,{Z:function(){return i}});var r=a(7294),n=a(6010),l="tabItem_OmH5";function i(e){var t=e.children,a=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,i),hidden:a},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return u}});var r=a(7462),n=a(7294),l=a(2389),i=a(7392),o=a(7094),s=a(2466),d=a(6010),p="tabList_uSqn",m="tabItem_LplD";function c(e){var t,a,l,c=e.lazy,u=e.block,f=e.defaultValue,k=e.values,g=e.groupId,v=e.className,b=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),N=(0,i.l)(h,(function(e,t){return e.value===t.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===f?f:null!=(t=null!=f?f:null==(a=b.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(l=b[0])?void 0:l.props.value;if(null!==y&&!h.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,o.U)(),T=w.tabGroupChoices,x=w.setTabGroupChoices,S=(0,n.useState)(y),E=S[0],O=S[1],_=[],D=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var P=T[g];null!=P&&P!==E&&h.some((function(e){return e.value===P}))&&O(P)}var F=function(e){var t=e.currentTarget,a=_.indexOf(t),r=h[a].value;r!==E&&(D(t),O(r),null!=g&&x(g,r))},I=function(e){var t,a=null;switch(e.key){case"ArrowRight":var r=_.indexOf(e.currentTarget)+1;a=_[r]||_[0];break;case"ArrowLeft":var n=_.indexOf(e.currentTarget)-1;a=_[n]||_[_.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:(0,d.Z)("tabs-container",p)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":u},v)},h.map((function(e){var t=e.value,a=e.label,l=e.attributes;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:function(e){return _.push(e)},onKeyDown:I,onFocus:F,onClick:F},l,{className:(0,d.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":E===t})}),null!=a?a:t)}))),c?(0,n.cloneElement)(b.filter((function(e){return e.props.value===E}))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==E})}))))}function u(e){var t=(0,l.Z)();return n.createElement(c,(0,r.Z)({key:String(t)},e))}},9649:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return d},metadata:function(){return m},toc:function(){return u}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),i=a(9877),o=a(2360),s=["components"],d={title:"Delta Table",sidebar_position:2},p=void 0,m={unversionedId:"low-code-spark/gems/source-target/catalog-table/delta",id:"low-code-spark/gems/source-target/catalog-table/delta",title:"Delta Table",description:"Reads data from delta tables saved in data catalog and writes data into delta table in data catalog.",source:"@site/docs/05-low-code-spark/05-gems/01-source-target/03-catalog-table/02-delta.md",sourceDirName:"05-low-code-spark/05-gems/01-source-target/03-catalog-table",slug:"/low-code-spark/gems/source-target/catalog-table/delta",permalink:"/low-code-spark/gems/source-target/catalog-table/delta",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Delta Table",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Hive Table",permalink:"/low-code-spark/gems/source-target/catalog-table/hive"},next:{title:"Lookup",permalink:"/low-code-spark/gems/source-target/lookup"}},c={},u=[{value:"Source",id:"source",level:2},{value:"Source Parameters",id:"source-parameters",level:3},{value:"Source Example",id:"source-example",level:3},{value:"Spark Code",id:"spark-code",level:3},{value:"Without filter predicate",id:"without-filter-predicate",level:4},{value:"With filter predicate",id:"with-filter-predicate",level:4},{value:"Target",id:"target",level:2},{value:"Target Parameters",id:"target-parameters",level:3},{value:"Target Example",id:"target-example",level:3},{value:"Spark Code",id:"spark-code-1",level:3}],f={toc:u};function k(e){var t=e.components,a=(0,n.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Reads data from delta tables saved in data catalog and writes data into delta table in data catalog."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Please choose the provider as delta on properties page."))),(0,l.kt)("h2",{id:"source"},"Source"),(0,l.kt)("h3",{id:"source-parameters"},"Source Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Database name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of the database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Table name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of the table"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Provider"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Provider needs to be selected as delta"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Filter Predicate"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Where clause to filter the table"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Read Timestamp"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Time travel to a specific timestamp"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Read Version"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Time travel to a specific version of table"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For time travel on delta tables:"),(0,l.kt)("ol",{parentName:"div"},(0,l.kt)("li",{parentName:"ol"},"Only one among timestamp and version can be chosen at a time for time travel."),(0,l.kt)("li",{parentName:"ol"},"Timestamp should be between the first commit timestamp and the latest commit timestamp in the table."),(0,l.kt)("li",{parentName:"ol"},"Version needs to be an integer. Its value has to be between min and max version of table.")),(0,l.kt)("p",{parentName:"div"},"By default most recent version of each row is fetched if no time travel option is used."))),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"To read more about delta time travel and its use cases ",(0,l.kt)("a",{parentName:"p",href:"https://databricks.com/blog/2019/02/04/introducing-delta-time-travel-for-large-scale-data-lakes.html"},"click here"),"."))),(0,l.kt)("h3",{id:"source-example"},"Source Example"),(0,l.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,l.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,l.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/173573367-057f47b0-c56c-4ffd-9ceb-27bc34444b41.mp4",title:"Catalog delta source",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,l.kt)("h3",{id:"spark-code"},"Spark Code"),(0,l.kt)("h4",{id:"without-filter-predicate"},"Without filter predicate"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'def Source(spark: SparkSession) -> DataFrame:\n    return spark.read.table(f"test_db.test_table")\n\n'))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object Source {\n\n  def apply(spark: SparkSession): DataFrame = {\n    spark.read.table("test_db.test_table")\n  }\n\n}\n')))),(0,l.kt)("h4",{id:"with-filter-predicate"},"With filter predicate"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'def Source(spark: SparkSession) -> DataFrame:\n    return spark.sql("SELECT * FROM test_db.test_table WHERE col > 10")\n\n'))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object Source {\n\n  def apply(spark: SparkSession): DataFrame =\n    spark.sql("SELECT * FROM test_db.test_table WHERE col > 10")\n\n}\n\n')))),(0,l.kt)("h2",{id:"target"},"Target"),(0,l.kt)("h3",{id:"target-parameters"},"Target Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Required"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Database name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of the database"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Table name"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Name of the table"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Custom file path"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Use custom file path to store underlying files"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Provider"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Provider needs to be selected as delta"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Write Mode"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Where clause to filter the table (Default is set to overwrite)"),(0,l.kt)("td",{parentName:"tr",align:"left"},"True")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Use insert into"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Flag to use insert into method to write instead of save in spark."),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Optimise write"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, it optimizes spark partition sizes based on the actual data"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Overwrite table schema"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, overwrites the schema of the delta table as per the dataframe"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Merge schema"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If true, then any columns that are present in the DataFrame but not in the target table are automatically added on to the end of the schema as part of a write transaction"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Partition Columns"),(0,l.kt)("td",{parentName:"tr",align:"left"},"List of columns to partition the delta table by"),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Overwrite partition predicate"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If specified, then it selectively overwrites only the data that satisfies the given where clause expression."),(0,l.kt)("td",{parentName:"tr",align:"left"},"False")))),(0,l.kt)("p",null,"Below are different type of write modes which prophecy provided hive catalog supports."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Write Mode"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"overwrite"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If data already exists, existing data is expected to be overwritten by the contents of the DataFrame.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"append"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If data already exists, contents of the DataFrame are expected to be appended to existing data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"ignore"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If data already exists, the save operation is expected not to save the contents of the DataFrame and not to change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"error"),(0,l.kt)("td",{parentName:"tr",align:"left"},"If data already exists, an exception is expected to be thrown.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"merge"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Insert, delete and update data using the delta merge command.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"scd2 merge"),(0,l.kt)("td",{parentName:"tr",align:"left"},"It is a delta merge operation that stores and manages both current and historical data over time.")))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Among these write modes overwrite, append, ignore and error works the same way as in case of parquet file writes."),(0,l.kt)("p",{parentName:"div"},"To read more about using merge write mode ",(0,l.kt)("a",{parentName:"p",href:"/low-code-spark/gems/source-target/file/delta#merge-write-mode-with-delta"},(0,l.kt)("strong",{parentName:"a"},"click here"))),(0,l.kt)("p",{parentName:"div"},"To read more about using scd2 merge write mode ",(0,l.kt)("a",{parentName:"p",href:"/low-code-spark/gems/source-target/file/delta#scd2-merge-write-mode-with-delta"},(0,l.kt)("strong",{parentName:"a"},"click here"))))),(0,l.kt)("h3",{id:"target-example"},"Target Example"),(0,l.kt)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"}},(0,l.kt)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"}},(0,l.kt)("iframe",{src:"https://user-images.githubusercontent.com/103921419/173573390-2295b399-f6af-49f1-b398-dfd66072d1b3.mp4",title:"Catalog delta target",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"}))),(0,l.kt)("h3",{id:"spark-code-1"},"Spark Code"),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'def Target(spark: SparkSession, in0: DataFrame):\n    in0.write\\\n        .format("delta")\\\n        .mode("overwrite")\\\n        .saveAsTable("test_db.test_table")\n\n'))),(0,l.kt)(o.Z,{value:"scala",label:"Scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'object Target {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame = {\n    in.write\n        .format("delta")\n        .mode("overwrite")\n        .saveAsTable("test_db.test_table")\n  }\n\n}\n')))))}k.isMDXComponent=!0}}]);