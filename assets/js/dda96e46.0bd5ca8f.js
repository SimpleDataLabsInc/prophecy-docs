"use strict";(self.webpackChunkdocs_4=self.webpackChunkdocs_4||[]).push([[33852],{13473:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>d,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"Spark/gems/transform/aggregate","title":"Aggregate","description":"Group data and apply aggregation methods or pivot operations","source":"@site/docs/Spark/gems/transform/aggregate.md","sourceDirName":"Spark/gems/transform","slug":"/engineers/aggregate","permalink":"/engineers/aggregate","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"gems","permalink":"/tags/gems"},{"inline":true,"label":"aggregate","permalink":"/tags/aggregate"},{"inline":true,"label":"group by","permalink":"/tags/group-by"},{"inline":true,"label":"sum","permalink":"/tags/sum"},{"inline":true,"label":"count","permalink":"/tags/count"}],"version":"current","frontMatter":{"title":"Aggregate","id":"aggregate","slug":"/engineers/aggregate","description":"Group data and apply aggregation methods or pivot operations","tags":["gems","aggregate","group by","sum","count"]},"sidebar":"mySidebar","previous":{"title":"Transform","permalink":"/engineers/transform"},"next":{"title":"BulkColumnExpressions","permalink":"/engineers/bulk-column-expressions"}}');var t=n(74848),s=n(28453),i=n(49235),l=n(65537),o=n(79329);const d={title:"Aggregate",id:"aggregate",slug:"/engineers/aggregate",description:"Group data and apply aggregation methods or pivot operations",tags:["gems","aggregate","group by","sum","count"]},c=void 0,h={},u=[{value:"Input and Output",id:"input-and-output",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Aggregate",id:"aggregate",level:3},{value:"Group By",id:"group-by",level:3},{value:"Pivot",id:"pivot",level:3},{value:"Advanced",id:"advanced",level:3},{value:"Examples",id:"examples",level:2},{value:"Aggregation without grouping",id:"aggregation-without-grouping",level:3},{value:"Aggregation with grouping",id:"aggregation-with-grouping",level:3},{value:"Pivot the data",id:"pivot-the-data",level:3},{value:"Propagate all input columns",id:"propagate-all-input-columns",level:3}];function p(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.A,{python_package_name:"ProphecySparkBasicsPython",python_package_version:"0.0.1+",scala_package_name:"ProphecySparkBasicsScala",scala_package_version:"0.0.1+",scala_lib:"",python_lib:"",uc_single:"14.3+",uc_shared:"14.3+",livy:"3.0.1+"}),"\n",(0,t.jsx)(r.p,{children:"Allows you to group the data and apply aggregation methods and pivot operation."}),"\n",(0,t.jsx)(r.h2,{id:"input-and-output",children:"Input and Output"}),"\n",(0,t.jsx)(r.p,{children:"The Aggregate gem accepts the following input and output"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Port"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"in0"})}),(0,t.jsx)(r.td,{children:"Input DataFrame that contains data to be aggregated."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.strong,{children:"out"})}),(0,t.jsx)(r.td,{children:"Output DataFrame that includes the key column and the aggregated columns."})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(r.p,{children:"Configure the Aggregate gem using the following parameters. Each section describes a different tab of the gem configuration."}),"\n",(0,t.jsx)(r.h3,{id:"aggregate",children:"Aggregate"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Required"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:"Output column name of aggregated column."}),(0,t.jsx)(r.td,{children:"True"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsxs)(r.td,{children:["Aggregate function expression that generates the target column values.",(0,t.jsx)("br",{}),"Example: ",(0,t.jsx)(r.code,{children:"sum(amount)"}),", ",(0,t.jsx)(r.code,{children:"count(*)"}),", ",(0,t.jsx)(r.code,{children:"avg(amount)"})]}),(0,t.jsx)(r.td,{children:"True"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Propagate All Input Columns"}),(0,t.jsxs)(r.td,{children:["If ",(0,t.jsx)(r.code,{children:"true"}),", all columns from the DataFrame would be propagated to output DataFrame. By default, all columns apart from ones specified in ",(0,t.jsx)(r.code,{children:"group by"}),", ",(0,t.jsx)(r.code,{children:"pivot"}),", ",(0,t.jsx)(r.code,{children:"aggregate"})," expressions are propagated as ",(0,t.jsx)(r.code,{children:"first(col_name)"})," in the output DataFrame."]}),(0,t.jsx)(r.td,{children:"False"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"group-by",children:"Group By"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Required"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:"Output column name of the key column for grouping."}),(0,t.jsxs)(r.td,{children:["Required if ",(0,t.jsx)(r.a,{href:"#pivot",children:"Pivot"})," is present"]})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsxs)(r.td,{children:["Expression that generates how to group the data. ",(0,t.jsx)("br",{}),"In many cases, this is simply the column name."]}),(0,t.jsx)(r.td,{children:"Required for each target column."})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"pivot",children:"Pivot"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Description"}),(0,t.jsx)(r.th,{children:"Required"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Pivot Column"}),(0,t.jsx)(r.td,{children:"Name of the column whose unique values become the new column headers."}),(0,t.jsx)(r.td,{children:"False"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Unique values"}),(0,t.jsxs)(r.td,{children:["List of values in the pivot column that will be translated to columns in the output DataFrame. Providing ",(0,t.jsx)(r.code,{children:"Unique values"})," while performing pivot operation improves performance since Spark does not have to first compute the list of distinct values of the pivot column."]}),(0,t.jsx)(r.td,{children:"False"})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"advanced",children:"Advanced"}),"\n",(0,t.jsx)(r.p,{children:"The Advanced tab lets you configure multiple aggregation options using a concise syntax. This is a lightweight alternative to writing full PySpark code."}),"\n",(0,t.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(r.p,{children:"These examples demonstrate common use cases of the Aggregate gem, showing how to configure aggregation operations with and without grouping, how to perform pivot operations, and how to propagate all input columns to the output. Each example includes the relevant gem parameter settings and the equivalent generated PySpark and Scala code."}),"\n",(0,t.jsx)(r.h3,{id:"aggregation-without-grouping",children:"Aggregation without grouping"}),"\n",(0,t.jsx)(r.p,{children:"This example counts the total number of rows in the dataset, producing a single aggregated value without any grouping."}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Tab"}),(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Value"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number_of_orders"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"count(*)"})})]})]})]}),"\n","\n",(0,t.jsxs)(l.A,{children:[(0,t.jsxs)(o.A,{value:"py",label:"Python",children:[(0,t.jsx)(r.p,{children:"This gem configuration is compiled into the following PySpark code:"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'def total_orders(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    return in0.agg(count(lit(1)).alias("number_of_orders"))\n'})})]}),(0,t.jsxs)(o.A,{value:"scala",label:"Scala",children:[(0,t.jsx)(r.p,{children:"This gem configuration is compiled into the following Scala code:"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'object total_orders {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(count(lit(1)).as("number_of_orders"))\n}\n'})})]})]}),"\n",(0,t.jsx)(r.h3,{id:"aggregation-with-grouping",children:"Aggregation with grouping"}),"\n",(0,t.jsxs)(r.p,{children:["This example counts orders per month by extracting and grouping on the month and year from the ",(0,t.jsx)(r.code,{children:"order_date"}),"."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Tab"}),(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Value"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number_of_orders"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"count(*)"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Group By"}),(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"order_month(MM/YYYY)"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Group By"}),(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:'concat(month(col("order_date")), lit("/"), year(col("order_date"))'})})]})]})]}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"py",label:"Python",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'def orders_by_date(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date")))\n                      .alias("order_month(MM/YYYY)"))\n    return df1.agg(count(lit(1)).alias("number_of_orders"))\n'})})}),(0,t.jsx)(o.A,{value:"scala",label:"Scala",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'object orders_by_date {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n'})})})]}),"\n",(0,t.jsx)(r.h3,{id:"pivot-the-data",children:"Pivot the data"}),"\n",(0,t.jsxs)(r.p,{children:["This example shows how to pivot ",(0,t.jsx)(r.code,{children:"order_status"})," values into separate columns while grouping by month and aggregating the number of orders."]}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Tab"}),(0,t.jsx)(r.th,{children:"Parameter"}),(0,t.jsx)(r.th,{children:"Value"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"number_of_orders"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Aggregate"}),(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"count(*)"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Group By"}),(0,t.jsx)(r.td,{children:"Target Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"order_month(MM/YYYY)"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Group By"}),(0,t.jsx)(r.td,{children:"Expression"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:'concat(month(col("order_date")), lit("/"), year(col("order_date"))'})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Pivot"}),(0,t.jsx)(r.td,{children:"Pivot Column"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"order_status"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Pivot"}),(0,t.jsx)(r.td,{children:"Unique Values"}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Finished"}),", ",(0,t.jsx)(r.code,{children:"Approved"}),", ",(0,t.jsx)(r.code,{children:"Pending"}),", ",(0,t.jsx)(r.code,{children:"Started"})]})]})]})]}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"py",label:"Python",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'def orders_by_date_N_status(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(concat(month(col("order_date")), lit("/"), year(col("order_date"))).alias("order_month(MM/YYYY)"))\n    df2 = df1.pivot("order_status", ["Approved", "Finished", "Pending", "Started"])\n    return df2.agg(count(lit(1)).alias("number_of_orders"))\n'})})}),(0,t.jsx)(o.A,{value:"scala",label:"Scala",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'object orders_by_date_N_status {\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.groupBy(\n        concat(month(col("order_date")), lit("/"), year(col("order_date")))\n          .as("order_month(MM/YYYY)")\n      )\n      .pivot(col("order_status"),\n             List("Approved", "Finished", "Pending", "Started")\n      )\n      .agg(count(lit(1)).as("number_of_orders"))\n}\n'})})})]}),"\n",(0,t.jsx)(r.h3,{id:"propagate-all-input-columns",children:"Propagate all input columns"}),"\n",(0,t.jsxs)(r.p,{children:["This option in used to propagate all columns from input DataFrame to output DataFrame.\nBy default ",(0,t.jsx)(r.code,{children:"first(col_name)"})," is used as aggregate function for columns not specified in ",(0,t.jsx)(r.code,{children:"group by"}),", ",(0,t.jsx)(r.code,{children:"pivot"}),", ",(0,t.jsx)(r.code,{children:"aggregate"})," expressions."]}),"\n",(0,t.jsx)("div",{class:"wistia_responsive_padding",style:{padding:"56.25% 0 0 0",position:"relative"},children:(0,t.jsx)("div",{class:"wistia_responsive_wrapper",style:{height:"100%",left:0,position:"absolute",top:0,width:"100%"},children:(0,t.jsx)("iframe",{src:"https://user-images.githubusercontent.com/103921419/185245719-2be22f30-c84f-4b85-8712-be626c77e4e4.mp4",title:"Aggregate Propagate columns",allow:"autoplay;fullscreen",allowtransparency:"true",frameborder:"0",scrolling:"no",class:"wistia_embed",name:"wistia_embed",msallowfullscreen:!0,width:"100%",height:"100%"})})}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"py",label:"Python",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-py",children:'def Aggregate_1(spark: SparkSession, in0: DataFrame) -> DataFrame:\n    df1 = in0.groupBy(col("customer_id"))\n\n    return df1.agg(\n        *[first(col("order_date")).alias("order_date")],\n        *[\n          first(col(x)).alias(x)\n          for x in in0.columns\n          if x not in ["order_date", "customer_id"]\n        ]\n    )\n'})})}),(0,t.jsx)(o.A,{value:"scala",label:"Scala",children:(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-scala",children:'object Aggregate {\n\n  def apply(spark: SparkSession, in: DataFrame): DataFrame =\n    in.agg(first(col("order_date")).as("order_date"),\n           List() ++ in.columns.toList\n             .diff(List("order_date", "customer_id"))\n             .map(x => first(col(x)).as(x)): _*\n    )\n\n}\n'})})})]})]})}function g(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var a=n(96540);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}},49235:(e,r,n)=>{n.d(r,{A:()=>t});n(96540);var a=n(74848);function t(e){return(0,a.jsxs)("div",{children:[e.python_package_name&&e.python_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub/",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.python_package_name," ",e.python_package_version]})}),e.scala_package_name&&e.scala_package_version&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/engineers/package-hub",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:[e.scala_package_name," ",e.scala_package_version]})}),e.python_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsPython ",e.python_lib]})}),e.scala_lib&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/extensibility/dependencies/prophecy-libraries",children:(0,a.jsxs)("span",{className:"badge badge-dependency",children:["ProphecyLibsScala ",e.scala_lib]})}),e.uc_single&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Dedicated Cluster ",e.uc_single]})}),e.uc_shared&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/databricks/ucshared",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["UC Standard Cluster ",e.uc_shared]})}),e.livy&&(0,a.jsx)("a",{href:"https://docs.prophecy.io/administration/fabrics/Spark-fabrics/livy",children:(0,a.jsxs)("span",{className:"badge badge-spark",children:["Livy ",e.livy]})}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})}},65537:(e,r,n)=>{n.d(r,{A:()=>_});var a=n(96540),t=n(18215),s=n(65627),i=n(56347),l=n(50372),o=n(30604),d=n(11861),c=n(78749);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:n}=e;return(0,a.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:n,attributes:a,default:t}}=e;return{value:r,label:n,attributes:a,default:t}}))}(n);return function(e){const r=(0,d.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,n])}function p(e){let{value:r,tabValues:n}=e;return n.some((e=>e.value===r))}function g(e){let{queryString:r=!1,groupId:n}=e;const t=(0,i.W6)(),s=function(e){let{queryString:r=!1,groupId:n}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:r,groupId:n});return[(0,o.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const r=new URLSearchParams(t.location.search);r.set(s,e),t.replace({...t.location,search:r.toString()})}),[s,t])]}function x(e){const{defaultValue:r,queryString:n=!1,groupId:t}=e,s=u(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:r,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!p({value:r,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:r,tabValues:s}))),[d,h]=g({queryString:n,groupId:t}),[x,m]=function(e){let{groupId:r}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(r),[t,s]=(0,c.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:t}),j=(()=>{const e=d??x;return p({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{j&&o(j)}),[j]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),h(e),m(e)}),[h,m,s]),tabValues:s}}var m=n(9136);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function f(e){let{className:r,block:n,selectedValue:a,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const r=e.currentTarget,n=o.indexOf(r),t=l[n].value;t!==a&&(d(r),i(t))},h=e=>{let r=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;r=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;r=o[n]??o[o.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},r),children:l.map((e=>{let{value:r,label:n,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:a===r?0:-1,"aria-selected":a===r,ref:e=>{o.push(e)},onKeyDown:h,onClick:c,...s,className:(0,t.A)("tabs__item",j.tabItem,s?.className,{"tabs__item--active":a===r}),children:n??r},r)}))})}function v(e){let{lazy:r,children:n,selectedValue:s}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(r){const e=i.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,r)=>(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==s})))})}function y(e){const r=x(e);return(0,b.jsxs)("div",{className:(0,t.A)("tabs-container",j.tabList),children:[(0,b.jsx)(f,{...r,...e}),(0,b.jsx)(v,{...r,...e})]})}function _(e){const r=(0,m.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(r))}},79329:(e,r,n)=>{n.d(r,{A:()=>i});n(96540);var a=n(18215);const t={tabItem:"tabItem_Ymn6"};var s=n(74848);function i(e){let{children:r,hidden:n,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(t.tabItem,i),hidden:n,children:r})}}}]);